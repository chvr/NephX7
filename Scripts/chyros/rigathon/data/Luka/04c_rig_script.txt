
#############################################################################
#### [ SETUP ] Default Parameters
#############################################################################

define_defaults	# DEFINE DEFAULT PARAMETERS
		[CREATE_JOINT]
			zeroScaleOrient=True orientJoint="xyz" secondaryAxisOrient="yup"

		[MIRROR_JOINT]
			mirrorBehavior=True mirrorYZ=True searchReplace=("_lt","_rt")

		[BIND_SKIN]
			bindMethod=2 heatmapFalloff=0.68 skinMethod=2 normalizeWeights=1
			weightDistribution=0 maximumInfluences=2 obeyMaxInfluences=True
			dropoffRate=4 removeUnusedInfluence=True

		[IK_HANDLE]
			solver="ikSplineSolver"

		[CREATE_CIRCLE]
			constructionHistory=True object=True

		[PARENT_CONSTRAINT]
			maintainOffset=True weight=1

		[POLE_CONSTRAINT]
			weight=1

		[SCALE]
			relative=True

		[FREEZE]
			apply=True translate=True rotate=True scale=True

		[EDIT_LAYER]
			noRecurse=True
;


#############################################################################
#### [ SETUP ] Query Skeleton Transforms
#############################################################################


# CENTER ====================================================================

# ROOT joint
	xform_ref			root					translation worldSpace
	;

# BODY joint chain
	xform_ref			pelvis					translation worldSpace
						spine_01				translation worldSpace
						spine_02				translation worldSpace
						spine_03				translation worldSpace
						neck_01					translation worldSpace
						neck_02					translation worldSpace
						neck_03					translation worldSpace
						head					translation worldSpace
	;


# LEFT ======================================================================

# Left LEG joint chain
	xform_ref			thigh_lt				translation worldSpace
						calf_lt					translation worldSpace
						foot_lt					translation worldSpace
						ball_lt					translation worldSpace
						toe_lt					translation worldSpace
	;

# Left ARM joint chain
	xform_ref			clavicle_lt				translation worldSpace
						upperarm_lt				translation worldSpace
						upperarm_twist_01_lt	translation worldSpace
						upperarm_twist_02_lt	translation worldSpace
						upperarm_twist_03_lt	translation worldSpace
						lowerarm_lt				translation worldSpace
						lowerarm_twist_01_lt	translation worldSpace
						lowerarm_twist_02_lt	translation worldSpace
						lowerarm_twist_03_lt	translation worldSpace
						hand_lt					translation worldSpace
						hand_end_lt				translation worldSpace
	; #1todo: TRY REMOVING 'hand_end_lt' if its possible to do so.

# Finger joint chains:
	# Left PINKY finger joint chain
		xform_ref		pinky_base_lt			translation worldSpace
						pinky_01_lt				translation worldSpace
						pinky_02_lt				translation worldSpace
						pinky_03_lt				translation worldSpace
						pinky_04_lt				translation worldSpace
		;
	# Left RING finger joint chain
		xform_ref		ring_base_lt			translation worldSpace
						ring_01_lt				translation worldSpace
						ring_02_lt				translation worldSpace
						ring_03_lt				translation worldSpace
						ring_04_lt				translation worldSpace
		;
	# Left MIDDLE finger joint chain
		xform_ref		middle_base_lt			translation worldSpace
						middle_01_lt			translation worldSpace
						middle_02_lt			translation worldSpace
						middle_03_lt			translation worldSpace
						middle_04_lt			translation worldSpace
		;
	# Left INDEX finger joint chain
		xform_ref		index_base_lt			translation worldSpace
						index_01_lt				translation worldSpace
						index_02_lt				translation worldSpace
						index_03_lt				translation worldSpace
						index_04_lt				translation worldSpace
		;
	# Left THUMB finger joint chain
		xform_ref		thumb_base_lt			translation worldSpace
						thumb_01_lt				translation worldSpace
						thumb_02_lt				translation worldSpace
						thumb_03_lt				translation worldSpace
		;


# RIGHT =====================================================================

# Right LEG joint chain
	xform_ref			thigh_rt				translation worldSpace
						calf_rt					translation worldSpace
						foot_rt					translation worldSpace
						ball_rt					translation worldSpace
						toe_rt					translation worldSpace
	;

# Right ARM joint chain
	xform_ref			clavicle_rt				translation worldSpace
						upperarm_rt				translation worldSpace
						upperarm_twist_01_rt	translation worldSpace
						upperarm_twist_02_rt	translation worldSpace
						upperarm_twist_03_rt	translation worldSpace
						lowerarm_rt				translation worldSpace
						lowerarm_twist_01_rt	translation worldSpace
						lowerarm_twist_02_rt	translation worldSpace
						lowerarm_twist_03_rt	translation worldSpace
						hand_rt					translation worldSpace
						hand_end_rt				translation worldSpace
	; #1todo: TRY REMOVING 'hand_end_rt' if its possible to do so.

# Finger joint chains:
	# Right PINKY finger joint chain
		xform_ref		pinky_base_rt			translation worldSpace
						pinky_01_rt				translation worldSpace
						pinky_02_rt				translation worldSpace
						pinky_03_rt				translation worldSpace
						pinky_04_rt				translation worldSpace
		;
	# Right RING finger joint chain
		xform_ref		ring_base_rt			translation worldSpace
						ring_01_rt				translation worldSpace
						ring_02_rt				translation worldSpace
						ring_03_rt				translation worldSpace
						ring_04_rt				translation worldSpace
		;
	# Right MIDDLE finger joint chain
		xform_ref		middle_base_rt			translation worldSpace
						middle_01_rt			translation worldSpace
						middle_02_rt			translation worldSpace
						middle_03_rt			translation worldSpace
						middle_04_rt			translation worldSpace
		;
	# Right INDEX finger joint chain
		xform_ref		index_base_rt			translation worldSpace
						index_01_rt				translation worldSpace
						index_02_rt				translation worldSpace
						index_03_rt				translation worldSpace
						index_04_rt				translation worldSpace
		;
	# Right THUMB finger joint chain
		xform_ref		thumb_base_rt			translation worldSpace
						thumb_01_rt				translation worldSpace
						thumb_02_rt				translation worldSpace
						thumb_03_rt				translation worldSpace
		;


#############################################################################
#### [ ROOT ] Setup
#############################################################################

# Create control shape for CHARACTER_CTRL
	create_circle		character_CTRL_nurb				0.0		0.0		0.0				radius=45	;
	parent				character_CTRL					[character_CTRL_nurbShape]		relative shape	;
	rename				character_CTRL_nurbShape		character_CTRLShape	;
	delete				character_CTRL_nurb	;
	set_attribute		character_CTRL.rotateOrder		4	;							# Change rotation order => [yxz] # TODO: bookmark 6: is this mentioned?? should we remove this?

# Update OFFSET_CTRL's attributes
	move				offset_CTRL						0.0		0.0		0.0		relative_to=root	;
	freeze				offset_CTRL	;
	move				offset_CTRL						0.0		0.0		0.0		relative_to=root	[rotatePivot, scalePivot];
	set_attribute		offset_CTRL.rotateOrder			4	;

# Update ROOT_CTRL's attributes
	move				root_CTRL						0.0		0.0		0.0		relative_to=root	;
	freeze				root_CTRL	;
	move				root_CTRL						0.0		0.0		0.0		relative_to=root	[rotatePivot, scalePivot];
	set_attribute		root_CTRL.rotateOrder			4	;

# Add members to their respective layers
	edit_layer			Controls						[character_CTRL, root_CTRL]
						Controls_Special				[offset_CTRL]
						FBX_Export						[root]
	;


#############################################################################
#### [ ROOT ] Driver Joint Hierarchy
#############################################################################

# Create DRIVER joint chain based on ROOT joint chain
	duplicate				driver_root				root	;
	rename_prefix			driver_root|pelvis		driver_	;

# Make DRIVER joint chain to drive translate, rotate and scale attributes of SKELETON joint chain
	connect_attribute		root					driver_<0>		<0>				[translate, rotate, scale]		batch	;

# Parent DRIVER joint hierarchy to group rig_GRP
	create_group			driver_root_GRP	;
	parent					rig_GRP					[driver_root_GRP]
							driver_root_GRP			[driver_root]	;
	scale_constraint		driver_root_GRP			character_CTRL	;

# Make ROOT_CTRL to drive translate, rotate and scale attributes of DRIVER root joint
	parent_constraint		driver_root				root_CTRL
	;

# Add members to layer: SKELETON
	edit_layer				Skeleton				[driver_root]
	;


#############################################################################
#### [ BODY ] Setup
#############################################################################

# Create RESULT joint chain based on SKELETON joint chain
	create_joint			result_pelvis				0.0		0.0		0.0			relative_to=pelvis
							result_spine_01				0.0		0.0		0.0			relative_to=spine_01
							result_spine_02				0.0		0.0		0.0			relative_to=spine_02
							result_spine_03				0.0		0.0		0.0			relative_to=spine_03
	;

# Make RESULT joint chain to drive translate, rotate and scale attributes of DRIVER joint chain
	parent_constraint		driver_pelvis				result_pelvis
							driver_spine_01				result_spine_01
							driver_spine_02				result_spine_02
							driver_spine_03				result_spine_03	;
	connect_attribute		result_pelvis.scale			driver_pelvis.scale
							result_spine_01.scale		driver_spine_01.scale
							result_spine_02.scale		driver_spine_02.scale
							result_spine_03.scale		driver_spine_03.scale	;

# Add members to layer: SKELETON
	edit_layer				Skeleton					[result_pelvis]
	;


#############################################################################
#### [ BODY ] IK Controls
#############################################################################

# Create IK spline handle: SPINE_HDL
	ik_handle			spine_HDL						result_pelvis			result_spine_03	;
	rename				curve1							spine_CRV
						effector1						spine_EFF	;
	set_attribute		spine_CRV.inheritsTransform		0	;					# Disable inheritsTransform to avoid double transformation issue

# Create IK joints: IK_HIP and IK_SHOULDER
	duplicate			ik_hip							result_pelvis			parentOnly
						ik_shoulder						result_spine_03			parentOnly	;
	set_attribute		ik_hip.rotateOrder				4
						ik_shoulder.rotateOrder			4	;					# Change rotation order => [yxz]
	parent				ik_shoulder						world	;
	orient_constraint	result_spine_03					ik_shoulder	;
# Add weight influence on IK JOINTS and SPINE_CRV
	bind_skin			spine_CRV_SKN					[ik_hip, ik_shoulder, spine_CRV]	bindMethod=0 !heatmapFalloff !skinMethod
	;

# Setup IK twist controls on SPINE_HDL
	set_attribute		spine_HDL.dTwistControlEnable		1
						spine_HDL.dWorldUpType				4							# Object Rotation Up (Start/End)
						spine_HDL.dWorldUpAxis				0							# Positive Y
						spine_HDL.dWorldUpVectorX			0
						spine_HDL.dWorldUpVectorY			1
						spine_HDL.dWorldUpVectorZ			0							# WorldUpVector: 0, 1, 0
						spine_HDL.dWorldUpVectorEndX		0
						spine_HDL.dWorldUpVectorEndY		1
						spine_HDL.dWorldUpVectorEndZ		0	;						# WorldUpVectorEnd: 0, 1, 0
	connect_attribute	ik_hip.worldMatrix[0]				spine_HDL.dWorldUpMatrix
						ik_shoulder.worldMatrix[0]			spine_HDL.dWorldUpMatrixEnd	;

# Create control: IK_HIP_CTRL
	create_circle		ik_hip_CTRL							0.0		-4.0	0.0			radius=17						relative_to=pelvis	;
	move				ik_hip_CTRL							0.0		 0.0	0.0			[rotatePivot, scalePivot]		relative_to=pelvis	;
	set_attribute		ik_hip_CTRL.rotateOrder				4	;						# Change rotation order => [yxz]
	parent_constraint	ik_hip								ik_hip_CTRL	;				# Parent constraint IK joint to IK control

# Create control: IK_SHOULDER_CTRL
	create_circle		ik_shoulder_CTRL					0.0		-4.0	0.0			radius=18						relative_to=spine_03	;
	move				ik_shoulder_CTRL					0.0		 0.0	0.0			[rotatePivot, scalePivot]		relative_to=spine_03	;
	set_attribute		ik_shoulder_CTRL.rotateOrder		4	;						# Change rotation order => [yxz]
	parent_constraint	ik_shoulder							ik_shoulder_CTRL	;		# Parent constraint IK joint to IK control

# Add members to layer: CONTROLS_IK
	edit_layer			Controls_IK							[ik_hip_CTRL, ik_shoulder_CTRL]
	;


#############################################################################
#### [ BODY ] FK Controls
#############################################################################

# Create FK joints
	create_joint		fk_hip							0.0		0.0		0.0								relative_to=pelvis
						fk_spine_01						0.0		0.0		0.0		orientJoint="zyx"		relative_to=spine_01
						fk_spine_02						0.0		0.0		0.0		orientJoint="zyx"		relative_to=spine_02
						fk_shoulder						0.0		0.0		0.0		orientJoint="zyx"		relative_to=spine_03	;	# Use world orientation as joint orientation [zyx] (Same with controls)
	set_attribute		fk_spine_01.rotateOrder			5
						fk_spine_02.rotateOrder			5	;					# Change rotation order to [zyx] (same rotation order with controls)

# Create FK constraint groups for IK controls: HIP_FKC and SHOULDER_FKC
	create_group		hip_FKC
						shoulder_FKC	;
	parent				hip_FKC							[ik_hip_CTRL]
						shoulder_FKC					[ik_shoulder_CTRL]	;
	parent_constraint	hip_FKC							fk_hip
						shoulder_FKC					fk_shoulder
	;

# Create control: FK_SPINE_01_CTRL
	create_circle		fk_spine_01_CTRL_nurb			0.0		-5.0	0.0					radius=16	;
	parent				fk_spine_01						[fk_spine_01_CTRL_nurbShape]		relative shape	;
	rename				fk_spine_01_CTRL_nurbShape		fk_spine_01Shape	;
	delete				fk_spine_01_CTRL_nurb	;
	rename				fk_spine_01						fk_spine_01_CTRL	;
	;

# Create control: FK_SPINE_02_CTRL
	create_circle		fk_spine_02_CTRL_nurb			0.0		-5.0	0.0					radius=16	;
	parent				fk_spine_02						[fk_spine_02_CTRL_nurbShape]		relative shape	;
	rename				fk_spine_02_CTRL_nurbShape		fk_spine_02Shape	;
	delete				fk_spine_02_CTRL_nurb	;
	rename				fk_spine_02						fk_spine_02_CTRL	;
	;

# Add members to their respective layers
	edit_layer			Skeleton						[fk_shoulder]
						Controls_FK						[fk_hip, fk_spine_01_CTRL, fk_spine_02_CTRL]
	;


#############################################################################
#### [ BODY ] Stretch and Squash
#############################################################################

# Setup STRETCH nodes:
	# Compute stretch percentage
		create_node				spine_CRV_INF							curveInfo
								body_stretchPct_DIV						multiplyDivide	;
		connect_attribute		spine_CRVShape.worldSpace[0]			spine_CRV_INF.inputCurve
								spine_CRV_INF.arcLength					body_stretchPct_DIV.input1X	;
		set_attribute			body_stretchPct_DIV.input2X				{spine_CRV_INF.arcLength}
								body_stretchPct_DIV.operation			2	;
	# Normalize curve length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
		create_node				body_normalizeLength_DIV				multiplyDivide	;
		connect_attribute		spine_CRV_INF.arcLength					body_normalizeLength_DIV.input1X
								character_CTRL.scaleZ					body_normalizeLength_DIV.input2X	;
		set_attribute			body_normalizeLength_DIV.operation		2	;
		connect_attribute		body_normalizeLength_DIV.outputX		body_stretchPct_DIV.input1X		force	;
	# Apply stretch percentage to joints' X scale
		connect_attribute		body_stretchPct_DIV.outputX				[result_spine_01.scaleX, result_spine_02.scaleX]	;

# Setup SQUASH nodes:
	# Get square root of stretch percentage
		create_node				body_stretchSqrt_POW					multiplyDivide	;
		connect_attribute		body_stretchPct_DIV.outputX				body_stretchSqrt_POW.input1X	;
		set_attribute			body_stretchSqrt_POW.input2X			0.5
								body_stretchSqrt_POW.operation			3	;
	# Inverse the result
		create_node				body_stretchInv_DIV						multiplyDivide	;
		set_attribute			body_stretchInv_DIV.input1X				1	;
		connect_attribute		body_stretchSqrt_POW.outputX			body_stretchInv_DIV.input2X	;
		set_attribute			body_stretchInv_DIV.operation			2	;
	# Apply inversed result value to joints' Y and Z scales
		connect_attribute		body_stretchInv_DIV.outputX				[result_spine_01.scaleY, result_spine_02.scaleY, result_spine_01.scaleZ, result_spine_02.scaleZ]	;

# Add STRETCH and SQUASH attributes to IK_SHOULDER_CTRL
	# Add STRETCH and SQUASH attributes
		add_attribute			ik_shoulder_CTRL						stretch	float minValue=0 maxValue=1 defaultValue=0 keyable
								ik_shoulder_CTRL						squash	float minValue=0 maxValue=1 defaultValue=0 keyable	;
	# Setup STRETCH blend nodes
		create_node				body_stretch_BLND						blendColors	;
		connect_attribute		body_stretchPct_DIV.outputX				body_stretch_BLND.color1R	;
		set_attribute			body_stretch_BLND.color2R				1	;
		connect_attribute		body_stretch_BLND.outputR				[result_spine_01.scaleX, result_spine_02.scaleX]	force
								ik_shoulder_CTRL.stretch				body_stretch_BLND.blender	;
	# Setup SQUASH blend nodes
		create_node				body_squash_BLND						blendColors	;
		connect_attribute		body_stretchInv_DIV.outputX				body_squash_BLND.color1R	;
		set_attribute			body_squash_BLND.color2R				1	;
		connect_attribute		body_squash_BLND.outputR				[result_spine_01.scaleY, result_spine_02.scaleY, result_spine_01.scaleZ, result_spine_02.scaleZ]	force
								ik_shoulder_CTRL.squash					body_squash_BLND.blender	;


#############################################################################
#### [ BODY ] Group and Controls
#############################################################################

# Create control: BODY_CTRL
	create_curve			body_CTRL					[-20.70, -17.79, 94.00, 20.70, -17.79, 94.00, 20.70, 23.60, 94.00, -20.70, 23.60, 94.00, -20.70, -17.79, 94.00]		degree=1	;
	move					body_CTRL					0.0		-4.0	0.0			relative
							body_CTRL					0.0		 0.0	0.0			[rotatePivot, scalePivot]				relative_to=pelvis	;
	set_attribute			body_CTRL.rotateOrder		4	;						# Change rotation order => [yxz]
	parent					body_sys_GRP				[body_CTRL]	;

# Create group: BODY_GRP
	create_group			body_GRP	;
	parent					body_GRP					[result_pelvis, ik_hip, ik_shoulder, fk_hip, spine_HDL, spine_CRV, hip_FKC, shoulder_FKC]
							body_sys_GRP				[body_GRP]	;
	parent_constraint		body_GRP					body_CTRL
	;

# Create group: DO_NOT_TOUCH_GRP
	create_group			DO_NOT_TOUCH_GRP	;
	parent					DO_NOT_TOUCH_GRP			[result_pelvis, ik_hip, ik_shoulder, spine_HDL, spine_CRV]
							body_GRP					[DO_NOT_TOUCH_GRP]	;

# Add members to layer: CONTROLS
	edit_layer				Controls					[body_CTRL]
	;


#############################################################################
#### [ BODY ] Lock And Hide Control Channels
#############################################################################

# Lock-and-Hide channels
	set_attribute		fk_hip				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						fk_spine_01_CTRL	lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, radi]
						fk_spine_02_CTRL	lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, radi]
						fk_shoulder			lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						ik_hip_CTRL			lock keyable=False channelBox=False		[sx, sy, sz]
						ik_shoulder_CTRL	lock keyable=False channelBox=False		[sx, sy, sz]
						body_CTRL			lock keyable=False channelBox=False		[sx, sy, sz]
						body_GRP			lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz]
						hip_FKC				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						shoulder_FKC		lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
	;

# Hide objects
	set_attribute		ik_hip.visibility			0
						ik_shoulder.visibility		0
						spine_HDL.visibility		0
						spine_CRV.visibility		0
	;


#############################################################################
#### [ HEAD / NECK ] Setup
#############################################################################

# Create RESULT joint chain based on SKELETON joint chain
	create_joint			result_neck_01				0.0		0.0		0.0			relative_to=neck_01
							result_neck_02				0.0		0.0		0.0			relative_to=neck_02
							result_neck_03				0.0		0.0		0.0			relative_to=neck_03
							result_head					0.0		0.0		0.0			relative_to=head
	;

# Create IK joint chains based on RESULT joint chain
	duplicate				ik_neck_01					result_neck_01	;
	find_replace			ik_neck_01					result_ ik_	;

# Make IK joint chain to drive translate attribute of RESULT joint chain
	point_constraint		result_neck_01				ik_neck_01
							result_neck_02				ik_neck_02
							result_neck_03				ik_neck_03
							result_head					ik_head
	;

# Make RESULT joint chain to drive translate, rotate and scale attributes of DRIVER joint chain
	parent_constraint		driver_neck_01				result_neck_01
							driver_neck_02				result_neck_02
							driver_neck_03				result_neck_03
							driver_head					result_head	;
	connect_attribute		result_neck_01.scale		driver_neck_01.scale
							result_neck_02.scale		driver_neck_02.scale
							result_neck_03.scale		driver_neck_03.scale
							result_head.scale			driver_head.scale	;

# Add members to layer: SKELETON
	edit_layer				Skeleton					[result_neck_01, ik_neck_01]
	;


#############################################################################
#### [ HEAD / NECK ] IK Controls
##############################################################################

# Create IK spline handle: NECK_HDL
	ik_handle			neck_HDL						ik_neck_01				ik_head	;
	rename				curve1							neck_CRV
						effector1						neck_EFF	;
	set_attribute		neck_CRV.inheritsTransform		0	;					# Disable inheritsTransform to avoid double transformation issue

# Create IK joints: IK_NECK_BASE and IK_NECK_END
	duplicate			ik_neck_base					result_neck_01			parentOnly
						ik_neck_end						result_head				parentOnly	;
	parent				ik_neck_end						world	;

# Make IK_NECK_END joint to drive rotation of RESULT joint chain
	orient_constraint	result_head						ik_neck_end
	;

# Add weight influence on IK JOINTS and NECK_CRV
	bind_skin			neck_CRV_SKN					[ik_neck_base, ik_neck_end, neck_CRV]		bindMethod=0 !heatmapFalloff !skinMethod
	;

# Setup IK twist controls on NECK_HDL
	set_attribute		neck_HDL.dTwistControlEnable		1
						neck_HDL.dWorldUpType				4							# Object Rotation Up (Start/End)
						neck_HDL.dWorldUpAxis				0							# Positive Y
						neck_HDL.dWorldUpVectorX			0
						neck_HDL.dWorldUpVectorY			1
						neck_HDL.dWorldUpVectorZ			0							# WorldUpVector: 0, 1, 0
						neck_HDL.dWorldUpVectorEndX			0
						neck_HDL.dWorldUpVectorEndY			1
						neck_HDL.dWorldUpVectorEndZ			0	;						# WorldUpVectorEnd: 0, 1, 0
	connect_attribute	ik_neck_base.worldMatrix[0]			neck_HDL.dWorldUpMatrix
						ik_neck_end.worldMatrix[0]			neck_HDL.dWorldUpMatrixEnd	;

# Create control: IK_HEAD_CTRL
	create_circle		ik_head_CTRL						 0.0	0.0		0.0			radius=12						relative_to=head	;
	move				ik_head_CTRL						 0.0	0.0		0.0			[rotatePivot, scalePivot]		relative_to=head	;
	rotate				ik_head_CTRL						45.0	0.0		0.0			euler	;
	freeze				ik_head_CTRL	;
	set_attribute		ik_head_CTRL.rotateOrder			4	;						# Change rotation order => [yxz]
	parent_constraint	ik_neck_end							ik_head_CTRL	;			# Parent constraint IK joint to IK control

# Add members to layer: CONTROLS_IK
	edit_layer			Controls_IK							[ik_head_CTRL]
	;


#############################################################################
#### [ HEAD / NECK ] FK Controls
#############################################################################

# Create FK joints
	create_joint		fk_neck						0.0		0.0		0.0										relative_to=neck_01
						fk_head						0.0		0.0		0.0			orientJoint="zyx"			relative_to=head	;	# Use world orientation as joint orientation [zyx] (Same with controls)
	set_attribute		fk_neck.rotateOrder			5	;						# Change rotation order to [zyx] (same rotation order with controls)

# Create FK constraint group for IK control: HEAD_FKC
	create_group		head_FKC	;
	move				head_FKC					0.0		0.0		0.0			[rotatePivot, scalePivot]	relative_to=head	;
	parent				head_FKC					[ik_head_CTRL]	;
	parent_constraint	head_FKC					fk_head	;

# Create control: FK_NECK_CTRL
	create_circle		fk_neck_CTRL_nurb			0.0		0.0		0.0			radius=8	;
	parent				fk_neck						[fk_neck_CTRL_nurbShape]	relative shape	;
	rename				fk_neck_CTRL_nurbShape		fk_neckShape	;
	delete				fk_neck_CTRL_nurb	;
	rename				fk_neck						fk_neck_CTRL	;

# Add members to layer: CONTROLS_FK
	edit_layer			Controls_FK					[fk_neck_CTRL]
	;


#############################################################################
#### [ HEAD / NECK ] Stretch and Squash
#############################################################################

# Setup STRETCH nodes:
	# Compute stretch percentage
		create_node				neck_CRV_INF							curveInfo
								neck_stretchPct_DIV						multiplyDivide	;
		connect_attribute		neck_CRVShape.worldSpace[0]				neck_CRV_INF.inputCurve
								neck_CRV_INF.arcLength					neck_stretchPct_DIV.input1X	;
		set_attribute			neck_stretchPct_DIV.input2X				{neck_CRV_INF.arcLength}
								neck_stretchPct_DIV.operation			2	;
	# Normalize length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
		create_node				neck_normalizeLength_DIV				multiplyDivide	;
		connect_attribute		neck_CRV_INF.arcLength					neck_normalizeLength_DIV.input1X
								character_CTRL.scaleZ					neck_normalizeLength_DIV.input2X	;
		set_attribute			neck_normalizeLength_DIV.operation		2	;
		connect_attribute		neck_normalizeLength_DIV.outputX		neck_stretchPct_DIV.input1X		force	;
	# Apply stretch percentage to joints' X scale
		connect_attribute		neck_stretchPct_DIV.outputX				[ik_neck_01.scaleX, ik_neck_02.scaleX, ik_neck_03.scaleX]	;

# todo / bookmark 08 : remove squash? coz it doesn't work
# Setup SQUASH nodes:
	# Get square root of stretch percentage
		create_node				neck_stretchSqrt_POW					multiplyDivide	;
		connect_attribute		neck_stretchPct_DIV.outputX				neck_stretchSqrt_POW.input1X	;
		set_attribute			neck_stretchSqrt_POW.input2X			0.5
								neck_stretchSqrt_POW.operation			3	;
	# Inverse the result
		create_node				neck_stretchInv_DIV						multiplyDivide	;
		set_attribute			neck_stretchInv_DIV.input1X				1	;
		connect_attribute		neck_stretchSqrt_POW.outputX			neck_stretchInv_DIV.input2X	;
		set_attribute			neck_stretchInv_DIV.operation			2	;
	# Apply inversed result value to joints' Y and Z scales
		connect_attribute		neck_stretchInv_DIV.outputX				[result_neck_01.scaleY, result_neck_02.scaleY, result_neck_03.scaleY, result_neck_01.scaleZ, result_neck_02.scaleZ, result_neck_03.scaleZ]	;

# Add STRETCH and SQUASH attributes to IK_HEAD_CTRL
	# Add STRETCH and SQUASH attributes
		add_attribute			ik_head_CTRL							stretch	float minValue=0 maxValue=1 defaultValue=0 keyable
								ik_head_CTRL							squash	float minValue=0 maxValue=1 defaultValue=0 keyable	;
	# Setup STRETCH blend nodes
		create_node				neck_stretch_BLND						blendColors	;
		connect_attribute		neck_stretchPct_DIV.outputX				neck_stretch_BLND.color1R	;
		set_attribute			neck_stretch_BLND.color2R				1	;
		connect_attribute		neck_stretch_BLND.outputR				[ik_neck_01.scaleX, ik_neck_02.scaleX, ik_neck_03.scaleX]	force
								ik_head_CTRL.stretch					neck_stretch_BLND.blender	;
	# Setup SQUASH blend nodes
		create_node				neck_squash_BLND						blendColors	;
		connect_attribute		neck_stretchInv_DIV.outputX				neck_squash_BLND.color1R	;
		set_attribute			neck_squash_BLND.color2R				1	;
		connect_attribute		neck_squash_BLND.outputR				[result_neck_01.scaleY, result_neck_02.scaleY, result_neck_03.scaleY, result_neck_01.scaleZ, result_neck_02.scaleZ, result_neck_03.scaleZ]	force
								ik_head_CTRL.squash						neck_squash_BLND.blender	;


#############################################################################
#### [ HEAD / NECK ] Group and Controls
#############################################################################

# Create group: FK_NECK_GRP
	create_group		fk_neck_GRP	;
	parent				fk_neck_GRP				[fk_neck_CTRL]	;

# Create group: HEAD_GRP
	create_group		head_GRP	;
	parent				head_GRP				[result_neck_01, ik_neck_01, ik_neck_base, ik_neck_end, fk_neck_GRP, neck_HDL, neck_CRV, head_FKC]
						head_sys_GRP			[head_GRP]	;

# Create group: DO_NOT_TOUCH_GRP
	create_group		DO_NOT_TOUCH_GRP	;
	parent				|DO_NOT_TOUCH_GRP		[result_neck_01, ik_neck_01, ik_neck_base, ik_neck_end, neck_HDL, neck_CRV]
						head_GRP				[|DO_NOT_TOUCH_GRP]	;


#############################################################################
#### [ HEAD / NECK ] Space Switchers
#############################################################################

# Create constraint locator: NECK-SHOULDER_CONST
	create_locator			neckShoulder_CONST	;
	move					neckShoulder_CONST				0.0		0.0		0.0			relative_to=neck_01	;
	parent					ik_shoulder						[neckShoulder_CONST]	;
	parent_constraint		ik_neck_base					neckShoulder_CONST
							fk_neck_GRP						neckShoulder_CONST	;

# Create space switchers: HEAD, SHOULDER, BODY and ROOT
	# Create locators
		create_locator		headNeck_SPACE	;
		move				headNeck_SPACE					0.0		0.0		0.0			relative_to=head	;
		duplicate			headShoulder_SPACE				headNeck_SPACE
							headBody_SPACE					headNeck_SPACE
							headRoot_SPACE					headNeck_SPACE	;
		parent				fk_head							[headNeck_SPACE]
							ik_shoulder						[headShoulder_SPACE]
							body_GRP|DO_NOT_TOUCH_GRP		[headBody_SPACE]
							offset_CTRL						[headRoot_SPACE]	;
	# Replace constraint with space switchers
		delete				head_FKC_parentConstraint1	;	# TODO / BOOKMARK 9; why make it in the first place if we're gonna delete it anyway?
		orient_constraint	head_FKC						[headNeck_SPACE, headShoulder_SPACE, headBody_SPACE, headRoot_SPACE]	;
		point_constraint	head_FKC						[headNeck_SPACE, headShoulder_SPACE, headBody_SPACE, headRoot_SPACE]	; # TODO: bookmark 09 - not in video yet
	# Create ROTATION-SPACE and TRANSLATION-SPACE attributes to IK_HEAD_CTRL
		add_attribute		ik_head_CTRL					rotationSpace				enum [neck, shoulders, body, root] defaultValue=0 keyable
							ik_head_CTRL					translationSpace			enum [neck, shoulders, body, root] defaultValue=0 keyable	;
	# Set driven keys for space switcher enum values
		set_driven_key		ik_head_CTRL.rotationSpace		0	1	[head_FKC_orientConstraint1]	[headNeck_SPACEW0]
							ik_head_CTRL.rotationSpace		0	0	[head_FKC_orientConstraint1]	[headShoulder_SPACEW1, headBody_SPACEW2, headRoot_SPACEW3]
							ik_head_CTRL.rotationSpace		1	1	[head_FKC_orientConstraint1]	[headShoulder_SPACEW1]
							ik_head_CTRL.rotationSpace		1	0	[head_FKC_orientConstraint1]	[headNeck_SPACEW0, headBody_SPACEW2, headRoot_SPACEW3]
							ik_head_CTRL.rotationSpace		2	1	[head_FKC_orientConstraint1]	[headBody_SPACEW2]
							ik_head_CTRL.rotationSpace		2	0	[head_FKC_orientConstraint1]	[headNeck_SPACEW0, headShoulder_SPACEW1, headRoot_SPACEW3]
							ik_head_CTRL.rotationSpace		3	1	[head_FKC_orientConstraint1]	[headRoot_SPACEW3]
							ik_head_CTRL.rotationSpace		3	0	[head_FKC_orientConstraint1]	[headNeck_SPACEW0, headShoulder_SPACEW1, headBody_SPACEW2]
							ik_head_CTRL.translationSpace	0	1	[head_FKC_pointConstraint1]		[headNeck_SPACEW0]
							ik_head_CTRL.translationSpace	0	0	[head_FKC_pointConstraint1]		[headShoulder_SPACEW1, headBody_SPACEW2, headRoot_SPACEW3]
							ik_head_CTRL.translationSpace	1	1	[head_FKC_pointConstraint1]		[headShoulder_SPACEW1]
							ik_head_CTRL.translationSpace	1	0	[head_FKC_pointConstraint1]		[headNeck_SPACEW0, headBody_SPACEW2, headRoot_SPACEW3]
							ik_head_CTRL.translationSpace	2	1	[head_FKC_pointConstraint1]		[headBody_SPACEW2]
							ik_head_CTRL.translationSpace	2	0	[head_FKC_pointConstraint1]		[headNeck_SPACEW0, headShoulder_SPACEW1, headRoot_SPACEW3]
							ik_head_CTRL.translationSpace	3	1	[head_FKC_pointConstraint1]		[headRoot_SPACEW3]
							ik_head_CTRL.translationSpace	3	0	[head_FKC_pointConstraint1]		[headNeck_SPACEW0, headShoulder_SPACEW1, headBody_SPACEW2]	;


#############################################################################
#### [ HEAD / NECK ] Lock And Hide Control Channels
#############################################################################

# Lock-and-Hide channels
	set_attribute		fk_head				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						ik_head_CTRL		lock keyable=False channelBox=False		[sx, sy, sz]
						fk_neck_CTRL		lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, radi]
						fk_neck_GRP			lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						head_FKC			lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
	;

# Hide objects
	set_attribute		ik_neck_base.visibility				0
						ik_neck_end.visibility					0
						neckShoulder_CONST.visibility		0
						headNeck_SPACE.visibility			0
						headShoulder_SPACE.visibility		0
						headBody_SPACE.visibility			0
						headRoot_SPACE.visibility			0
						neck_HDL.visibility					0
						neck_CRV.visibility					0
	;


#############################################################################
#### [ LEG ] Setup
#############################################################################

# Create RESULT joint chain based on SKELETON joint chain
	create_joint		result_thigh_lt		0.0		0.0		0.0		relative_to=thigh_lt
						result_calf_lt		0.0		0.0		0.0		relative_to=calf_lt
						result_foot_lt		0.0		0.0		0.0		relative_to=foot_lt
						result_ball_lt		0.0		0.0		0.0		relative_to=ball_lt
						result_toe_lt		0.0		0.0		0.0		relative_to=toe_lt
	;

# Change RESULT joint rotation orders => [xyz]
	set_attribute		result_thigh_lt.rotateOrder			0
						result_calf_lt.rotateOrder			0
						result_foot_lt.rotateOrder			0
						result_ball_lt.rotateOrder			0
						result_toe_lt.rotateOrder			0
	; # todo - bookmark - if we change the roateOrder of RESULT, should we also change the DRIVER and SKELETON's?

# Make RESULT joint chain to drive translate, rotate and scale attributes of DRIVER joint chain
	parent_constraint		driver_thigh_lt				result_thigh_lt
							driver_calf_lt				result_calf_lt
							driver_foot_lt				result_foot_lt
							driver_ball_lt				result_ball_lt
							driver_toe_lt				result_toe_lt	;
	connect_attribute		result_thigh_lt.scale		driver_thigh_lt.scale
							result_calf_lt.scale		driver_calf_lt.scale
							result_foot_lt.scale		driver_foot_lt.scale
							result_ball_lt.scale		driver_ball_lt.scale
							result_toe_lt.scale			driver_toe_lt.scale	;

# Create control: LEG_SETTINGS_LT_CTRL
	create_circle			leg_settings_lt_CTRL		0.0		0.0		0.0			radius=4	;
	create_curve			leg_settings_lt_CTRL1		[0, 3, 0, 0, -3, 0]			degree=1
							leg_settings_lt_CTRL2		[3, 0, 0, -3, 0, 0]			degree=1
							leg_settings_lt_CTRL3		[0, -4, 0, 0, -7, 0]		degree=1	;
	parent					leg_settings_lt_CTRL		[leg_settings_lt_CTRL1Shape, leg_settings_lt_CTRL2Shape, leg_settings_lt_CTRL3Shape]		relative shape	;
	delete												[leg_settings_lt_CTRL1, leg_settings_lt_CTRL2, leg_settings_lt_CTRL3]	;
	move					leg_settings_lt_CTRL		0.0		10.0	0.0			relative_to=foot_lt	;
	rotate					leg_settings_lt_CTRL		0.0		90.0	0.0			euler	;
	freeze					leg_settings_lt_CTRL	;
	parent_constraint		leg_settings_lt_CTRL		result_foot_lt	;
	parent					rig_settings				[leg_settings_lt_CTRL]	;

# Create control: IK_FOOT_LT_CTRL
	create_circle			ik_foot_lt_CTRL				0.0		 0.0	  0.0		relative_to=foot_lt		radius=8	;
	move					ik_foot_lt_CTRL				0.3		-7.7	-13.6		relative
							ik_foot_lt_CTRL.cv[0:2]		0.0		 6.8	  0.0		relative
							ik_foot_lt_CTRL.cv[4:6]		0.0		-5.7	  0.0		relative
							ik_foot_lt_CTRL				0.0		 0.0	  0.0		relative_to=foot_lt		[rotatePivot, scalePivot]	;
	freeze					ik_foot_lt_CTRL	;
	set_attribute			ik_foot_lt_CTRL.rotateOrder					4	;		# Change rotation order => [yxz]

# Add members to their respective layers
	edit_layer				Skeleton					[result_thigh_lt]
							Controls_IK					[ik_foot_lt_CTRL]
							Controls_Settings			[leg_settings_lt_CTRL]
	;


# RIGHT =====================================================================

# Mirror left joint chain to right
	mirror_joint			result_thigh_lt
	;

# Make RESULT joint chain to drive translate, rotate and scale attributes of DRIVER joint chain
	parent_constraint		driver_thigh_rt				result_thigh_rt
							driver_calf_rt				result_calf_rt
							driver_foot_rt				result_foot_rt
							driver_ball_rt				result_ball_rt
							driver_toe_rt				result_toe_rt	;
	connect_attribute		result_thigh_rt.scale		driver_thigh_rt.scale
							result_calf_rt.scale		driver_calf_rt.scale
							result_foot_rt.scale		driver_foot_rt.scale
							result_ball_rt.scale		driver_ball_rt.scale
							result_toe_rt.scale			driver_toe_rt.scale	;

# Create control: LEG_SETTINGS_RT_CTRL
	create_circle			leg_settings_rt_CTRL		0.0		0.0		0.0			radius=4	;
	create_curve			leg_settings_rt_CTRL1		[0, 3, 0, 0, -3, 0]			degree=1
							leg_settings_rt_CTRL2		[3, 0, 0, -3, 0, 0]			degree=1
							leg_settings_rt_CTRL3		[0, -4, 0, 0, -7, 0]		degree=1	;
	parent					leg_settings_rt_CTRL		[leg_settings_rt_CTRL1Shape, leg_settings_rt_CTRL2Shape, leg_settings_rt_CTRL3Shape]		relative shape	;
	delete												[leg_settings_rt_CTRL1, leg_settings_rt_CTRL2, leg_settings_rt_CTRL3]	;
	move					leg_settings_rt_CTRL		0.0		10.0	0.0			relative_to=foot_rt	;
	rotate					leg_settings_rt_CTRL		0.0		90.0	0.0			euler	;
	freeze					leg_settings_rt_CTRL	;
	parent_constraint		leg_settings_rt_CTRL		result_foot_rt	;
	parent					rig_settings				[leg_settings_rt_CTRL]	;

# Create control: IK_FOOT_RT_CTRL
	create_circle			ik_foot_rt_CTRL				 0.0	 0.0	  0.0		relative_to=foot_rt		radius=8	;
	move					ik_foot_rt_CTRL				-0.3	-7.7	-13.6		relative
							ik_foot_rt_CTRL.cv[0:2]		 0.0	 6.8	  0.0		relative
							ik_foot_rt_CTRL.cv[4:6]		 0.0	-5.7	  0.0		relative
							ik_foot_rt_CTRL				 0.0	 0.0	  0.0		relative_to=foot_rt		[rotatePivot, scalePivot]	;
	freeze					ik_foot_rt_CTRL	;
	set_attribute			ik_foot_rt_CTRL.rotateOrder					4	;		# Change rotation order => [yxz]

# Add members to their respective layers
	edit_layer				Skeleton					[result_thigh_rt]
							Controls_IK					[ik_foot_rt_CTRL]
							Controls_Settings			[leg_settings_rt_CTRL]
	;


#############################################################################
#### [ LEG ] IK and FK Setup
#############################################################################

# Create IK and FK joint chains based on RESULT joint chain
	duplicate			ik_thigh_lt		result_thigh_lt
						fk_thigh_lt		result_thigh_lt	;
	find_replace		ik_thigh_lt		result_ ik_
						fk_thigh_lt		result_ fk_	;

# Make IK and FK joint chain to drive translate attribute of RESULT joint chain
	create_node				thigh_lt_ikFkTranslate_BLND				blendColors
							calf_lt_ikFkTranslate_BLND				blendColors
							foot_lt_ikFkTranslate_BLND				blendColors
							ball_lt_ikFkTranslate_BLND				blendColors
							toe_lt_ikFkTranslate_BLND				blendColors	;
	connect_attribute		ik_thigh_lt.translate					thigh_lt_ikFkTranslate_BLND.color2
							ik_calf_lt.translate					calf_lt_ikFkTranslate_BLND.color2
							ik_foot_lt.translate					foot_lt_ikFkTranslate_BLND.color2
							ik_ball_lt.translate					ball_lt_ikFkTranslate_BLND.color2
							ik_toe_lt.translate						toe_lt_ikFkTranslate_BLND.color2
							fk_thigh_lt.translate					thigh_lt_ikFkTranslate_BLND.color1
							fk_calf_lt.translate					calf_lt_ikFkTranslate_BLND.color1
							fk_foot_lt.translate					foot_lt_ikFkTranslate_BLND.color1
							fk_ball_lt.translate					ball_lt_ikFkTranslate_BLND.color1
							fk_toe_lt.translate						toe_lt_ikFkTranslate_BLND.color1
							thigh_lt_ikFkTranslate_BLND.output		result_thigh_lt.translate
							calf_lt_ikFkTranslate_BLND.output		result_calf_lt.translate
							foot_lt_ikFkTranslate_BLND.output		result_foot_lt.translate
							ball_lt_ikFkTranslate_BLND.output		result_ball_lt.translate
							toe_lt_ikFkTranslate_BLND.output		result_toe_lt.translate	;

# Make IK and FK joint chain to drive rotate attribute of RESULT joint chain
	create_node				thigh_lt_ikFkRotate_BLND				blendColors
							calf_lt_ikFkRotate_BLND					blendColors
							foot_lt_ikFkRotate_BLND					blendColors
							ball_lt_ikFkRotate_BLND					blendColors
							toe_lt_ikFkRotate_BLND					blendColors	;
	connect_attribute		ik_thigh_lt.rotate						thigh_lt_ikFkRotate_BLND.color2
							ik_calf_lt.rotate						calf_lt_ikFkRotate_BLND.color2
							ik_foot_lt.rotate						foot_lt_ikFkRotate_BLND.color2
							ik_ball_lt.rotate						ball_lt_ikFkRotate_BLND.color2
							ik_toe_lt.rotate						toe_lt_ikFkRotate_BLND.color2
							fk_thigh_lt.rotate						thigh_lt_ikFkRotate_BLND.color1
							fk_calf_lt.rotate						calf_lt_ikFkRotate_BLND.color1
							fk_foot_lt.rotate						foot_lt_ikFkRotate_BLND.color1
							fk_ball_lt.rotate						ball_lt_ikFkRotate_BLND.color1
							fk_toe_lt.rotate						toe_lt_ikFkRotate_BLND.color1
							thigh_lt_ikFkRotate_BLND.output			result_thigh_lt.rotate
							calf_lt_ikFkRotate_BLND.output			result_calf_lt.rotate
							foot_lt_ikFkRotate_BLND.output			result_foot_lt.rotate
							ball_lt_ikFkRotate_BLND.output			result_ball_lt.rotate
							toe_lt_ikFkRotate_BLND.output			result_toe_lt.rotate	;

# Add IK-FK-BLEND attribute to LEG_SETTINGS_LT_CTRL
	add_attribute			leg_settings_lt_CTRL					ikFkBlend float niceName="IK / FK Blend" minValue=0 maxValue=1 defaultValue=0 keyable	;
	connect_attribute		leg_settings_lt_CTRL.ikFkBlend			[thigh_lt_ikFkTranslate_BLND.blender, calf_lt_ikFkTranslate_BLND.blender, foot_lt_ikFkTranslate_BLND.blender, ball_lt_ikFkTranslate_BLND.blender, toe_lt_ikFkTranslate_BLND.blender]
							leg_settings_lt_CTRL.ikFkBlend			[thigh_lt_ikFkRotate_BLND.blender, calf_lt_ikFkRotate_BLND.blender, foot_lt_ikFkRotate_BLND.blender, ball_lt_ikFkRotate_BLND.blender, toe_lt_ikFkRotate_BLND.blender]	;

# Add members to layer: SKELETON
	edit_layer				Skeleton								[ik_thigh_lt]
	;


# RIGHT =====================================================================

# Create IK and FK joint chains based on RESULT joint chain
	duplicate			ik_thigh_rt		result_thigh_rt
						fk_thigh_rt		result_thigh_rt	;
	find_replace		ik_thigh_rt		result_ ik_
						fk_thigh_rt		result_ fk_	;

# Make IK and FK joint chain to drive translate attribute of RESULT joint chain
	create_node				thigh_rt_ikFkTranslate_BLND				blendColors
							calf_rt_ikFkTranslate_BLND				blendColors
							foot_rt_ikFkTranslate_BLND				blendColors
							ball_rt_ikFkTranslate_BLND				blendColors
							toe_rt_ikFkTranslate_BLND				blendColors	;
	connect_attribute		ik_thigh_rt.translate					thigh_rt_ikFkTranslate_BLND.color2
							ik_calf_rt.translate					calf_rt_ikFkTranslate_BLND.color2
							ik_foot_rt.translate					foot_rt_ikFkTranslate_BLND.color2
							ik_ball_rt.translate					ball_rt_ikFkTranslate_BLND.color2
							ik_toe_rt.translate						toe_rt_ikFkTranslate_BLND.color2
							fk_thigh_rt.translate					thigh_rt_ikFkTranslate_BLND.color1
							fk_calf_rt.translate					calf_rt_ikFkTranslate_BLND.color1
							fk_foot_rt.translate					foot_rt_ikFkTranslate_BLND.color1
							fk_ball_rt.translate					ball_rt_ikFkTranslate_BLND.color1
							fk_toe_rt.translate						toe_rt_ikFkTranslate_BLND.color1
							thigh_rt_ikFkTranslate_BLND.output		result_thigh_rt.translate
							calf_rt_ikFkTranslate_BLND.output		result_calf_rt.translate
							foot_rt_ikFkTranslate_BLND.output		result_foot_rt.translate
							ball_rt_ikFkTranslate_BLND.output		result_ball_rt.translate
							toe_rt_ikFkTranslate_BLND.output		result_toe_rt.translate	;

# Make IK and FK joint chain to drive rotate attribute of RESULT joint chain
	create_node				thigh_rt_ikFkRotate_BLND				blendColors
							calf_rt_ikFkRotate_BLND					blendColors
							foot_rt_ikFkRotate_BLND					blendColors
							ball_rt_ikFkRotate_BLND					blendColors
							toe_rt_ikFkRotate_BLND					blendColors	;
	connect_attribute		ik_thigh_rt.rotate						thigh_rt_ikFkRotate_BLND.color2
							ik_calf_rt.rotate						calf_rt_ikFkRotate_BLND.color2
							ik_foot_rt.rotate						foot_rt_ikFkRotate_BLND.color2
							ik_ball_rt.rotate						ball_rt_ikFkRotate_BLND.color2
							ik_toe_rt.rotate						toe_rt_ikFkRotate_BLND.color2
							fk_thigh_rt.rotate						thigh_rt_ikFkRotate_BLND.color1
							fk_calf_rt.rotate						calf_rt_ikFkRotate_BLND.color1
							fk_foot_rt.rotate						foot_rt_ikFkRotate_BLND.color1
							fk_ball_rt.rotate						ball_rt_ikFkRotate_BLND.color1
							fk_toe_rt.rotate						toe_rt_ikFkRotate_BLND.color1
							thigh_rt_ikFkRotate_BLND.output			result_thigh_rt.rotate
							calf_rt_ikFkRotate_BLND.output			result_calf_rt.rotate
							foot_rt_ikFkRotate_BLND.output			result_foot_rt.rotate
							ball_rt_ikFkRotate_BLND.output			result_ball_rt.rotate
							toe_rt_ikFkRotate_BLND.output			result_toe_rt.rotate	;

# Add IK-FK-BLEND attribute to LEG_SETTINGS_RT_CTRL
	add_attribute			leg_settings_rt_CTRL					ikFkBlend float niceName="IK / FK Blend" minValue=0 maxValue=1 defaultValue=0 keyable	;
	connect_attribute		leg_settings_rt_CTRL.ikFkBlend			[thigh_rt_ikFkTranslate_BLND.blender, calf_rt_ikFkTranslate_BLND.blender, foot_rt_ikFkTranslate_BLND.blender, ball_rt_ikFkTranslate_BLND.blender, toe_rt_ikFkTranslate_BLND.blender]
							leg_settings_rt_CTRL.ikFkBlend			[thigh_rt_ikFkRotate_BLND.blender, calf_rt_ikFkRotate_BLND.blender, foot_rt_ikFkRotate_BLND.blender, ball_rt_ikFkRotate_BLND.blender, toe_rt_ikFkRotate_BLND.blender]	;

# Add members to layer: SKELETON
	edit_layer				Skeleton								[ik_thigh_rt]
	;


#############################################################################
#### [ LEG ] IK Stretch, IK No-Flip / Pole Vector Constraint Knee Setup
#############################################################################

# Create No-Flip and Pole Vector Constraint IK joint chains based on IK joint chain
	duplicate					ik_nf_thigh_lt								ik_thigh_lt
								ik_pv_thigh_lt								ik_thigh_lt	;
	find_replace				ik_nf_thigh_lt|ik_calf_lt					ik_ ik_nf_
								ik_pv_thigh_lt|ik_calf_lt					ik_ ik_pv_	;
	delete						ik_nf_ball_lt
								ik_pv_ball_lt	;

# Make No-Flip and Pole Vector Constraint IK joint chain to drive translate attribute of IK joint chain
	create_node					thigh_lt_ikNfPvTranslate_BLND				blendColors
								calf_lt_ikNfPvTranslate_BLND				blendColors
								foot_lt_ikNfPvTranslate_BLND				blendColors	;
	connect_attribute			ik_nf_thigh_lt.translate					thigh_lt_ikNfPvTranslate_BLND.color1
								ik_pv_thigh_lt.translate					thigh_lt_ikNfPvTranslate_BLND.color2
								ik_nf_calf_lt.translate						calf_lt_ikNfPvTranslate_BLND.color1
								ik_pv_calf_lt.translate						calf_lt_ikNfPvTranslate_BLND.color2
								ik_nf_foot_lt.translate						foot_lt_ikNfPvTranslate_BLND.color1
								ik_pv_foot_lt.translate						foot_lt_ikNfPvTranslate_BLND.color2
								thigh_lt_ikNfPvTranslate_BLND.output		ik_thigh_lt.translate
								calf_lt_ikNfPvTranslate_BLND.output			ik_calf_lt.translate
								foot_lt_ikNfPvTranslate_BLND.output			ik_foot_lt.translate	;

# Make No-Flip and Pole Vector Constraint IK joint chain to drive rotate attribute of IK joint chain
	create_node					thigh_lt_ikNfPvRotate_BLND					blendColors
								calf_lt_ikNfPvRotate_BLND					blendColors
								foot_lt_ikNfPvRotate_BLND					blendColors	;
	connect_attribute			ik_nf_thigh_lt.rotate						thigh_lt_ikNfPvRotate_BLND.color1
								ik_pv_thigh_lt.rotate						thigh_lt_ikNfPvRotate_BLND.color2
								ik_nf_calf_lt.rotate						calf_lt_ikNfPvRotate_BLND.color1
								ik_pv_calf_lt.rotate						calf_lt_ikNfPvRotate_BLND.color2
								ik_nf_foot_lt.rotate						foot_lt_ikNfPvRotate_BLND.color1
								ik_pv_foot_lt.rotate						foot_lt_ikNfPvRotate_BLND.color2
								thigh_lt_ikNfPvRotate_BLND.output			ik_thigh_lt.rotate
								calf_lt_ikNfPvRotate_BLND.output			ik_calf_lt.rotate
								foot_lt_ikNfPvRotate_BLND.output			ik_foot_lt.rotate	;

# Setup STRETCH joint length attributes (No-Flip IK):
	# Create distance from THIGH_LT to FOOT_LT
		create_distance			leg_lt_nf_length							thigh_lt			foot_lt	;
		parent					ik_foot_lt_CTRL								[leg_lt_nf_length_end_LOC]	;
	# Left LEG length (No-Flip IK)
		set_driven_key			leg_lt_nf_length_DISTShape.distance			{ik_nf_calf_lt.translateX}+{ik_nf_foot_lt.translateX}		{ik_nf_calf_lt.translateX}		[ik_nf_calf_lt]	[translateX]
								leg_lt_nf_length_DISTShape.distance			({ik_nf_calf_lt.translateX}+{ik_nf_foot_lt.translateX})*2	{ik_nf_calf_lt.translateX}*2	[ik_nf_calf_lt]	[translateX]
								leg_lt_nf_length_DISTShape.distance			{ik_nf_calf_lt.translateX}+{ik_nf_foot_lt.translateX}		{ik_nf_foot_lt.translateX}		[ik_nf_foot_lt]	[translateX]
								leg_lt_nf_length_DISTShape.distance			({ik_nf_calf_lt.translateX}+{ik_nf_foot_lt.translateX})*2	{ik_nf_foot_lt.translateX}*2	[ik_nf_foot_lt]	[translateX]	;
		key_tangent				[translateX]								[ik_nf_calf_lt, ik_nf_foot_lt]	inTangentType="spline" outTangentType="spline"	;
		set_infinity			[translateX]								[ik_nf_calf_lt, ik_nf_foot_lt]	postInfinite="linear"	;
	# Normalize length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
		create_node				leg_lt_nf_normalizeLength_DIV				multiplyDivide	;
		connect_attribute		leg_lt_nf_length_DISTShape.distance			leg_lt_nf_normalizeLength_DIV.input1X
								character_CTRL.scaleZ						leg_lt_nf_normalizeLength_DIV.input2X	;
		set_attribute			leg_lt_nf_normalizeLength_DIV.operation		2	;
		connect_attribute		leg_lt_nf_normalizeLength_DIV.outputX		ik_nf_calf_lt_translateX.input	force
								leg_lt_nf_normalizeLength_DIV.outputX		ik_nf_foot_lt_translateX.input	force	;

# Setup STRETCH joint length attributes (Pole Vector Constraint IK):
	# Create distance from THIGH_LT to FOOT_LT
		create_distance			leg_lt_pv_length							thigh_lt			foot_lt	;
		parent					ik_foot_lt_CTRL								[leg_lt_pv_length_end_LOC]	;
	# Left LEG length (Pole Vector IK)
		set_driven_key			leg_lt_pv_length_DISTShape.distance			{ik_pv_calf_lt.translateX}+{ik_pv_foot_lt.translateX}		{ik_pv_calf_lt.translateX}		[ik_pv_calf_lt]	[translateX]
								leg_lt_pv_length_DISTShape.distance			({ik_pv_calf_lt.translateX}+{ik_pv_foot_lt.translateX})*2	{ik_pv_calf_lt.translateX}*2	[ik_pv_calf_lt]	[translateX]
								leg_lt_pv_length_DISTShape.distance			{ik_pv_calf_lt.translateX}+{ik_pv_foot_lt.translateX}		{ik_pv_foot_lt.translateX}		[ik_pv_foot_lt]	[translateX]
								leg_lt_pv_length_DISTShape.distance			({ik_pv_calf_lt.translateX}+{ik_pv_foot_lt.translateX})*2	{ik_pv_foot_lt.translateX}*2	[ik_pv_foot_lt]	[translateX]	;
		key_tangent				[translateX]								[ik_pv_calf_lt, ik_pv_foot_lt]	inTangentType="spline" outTangentType="spline"	;
		set_infinity			[translateX]								[ik_pv_calf_lt, ik_pv_foot_lt]	postInfinite="linear"	;
	# Normalize length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
		create_node				leg_lt_pv_normalizeLength_DIV				multiplyDivide	;
		connect_attribute		leg_lt_pv_length_DISTShape.distance			leg_lt_pv_normalizeLength_DIV.input1X
								character_CTRL.scaleZ						leg_lt_pv_normalizeLength_DIV.input2X	;
		set_attribute			leg_lt_pv_normalizeLength_DIV.operation		2	;
		connect_attribute		leg_lt_pv_normalizeLength_DIV.outputX		ik_pv_calf_lt_translateX.input	force
								leg_lt_pv_normalizeLength_DIV.outputX		ik_pv_foot_lt_translateX.input	force	;

# Add STRETCH attributes to IK_FOOT_LT_CTRL
	# Add STRETCH attributes
		add_attribute			ik_foot_lt_CTRL								stretch	float minValue=0 maxValue=1 defaultValue=0 keyable	;
	# Setup STRETCH blend nodes
		create_node				calf_lt_nf_stretch_BLND						blendColors
								calf_lt_pv_stretch_BLND						blendColors
								foot_lt_nf_stretch_BLND						blendColors
								foot_lt_pv_stretch_BLND						blendColors	;
		connect_attribute		ik_nf_calf_lt_translateX.output				calf_lt_nf_stretch_BLND.color1R
								ik_pv_calf_lt_translateX.output				calf_lt_pv_stretch_BLND.color1R
								ik_nf_foot_lt_translateX.output				foot_lt_nf_stretch_BLND.color1R
								ik_pv_foot_lt_translateX.output				foot_lt_pv_stretch_BLND.color1R	;
		set_attribute			calf_lt_nf_stretch_BLND.color2R				{ik_calf_lt.translateX}
								calf_lt_pv_stretch_BLND.color2R				{ik_calf_lt.translateX}
								foot_lt_nf_stretch_BLND.color2R				{ik_foot_lt.translateX}
								foot_lt_pv_stretch_BLND.color2R				{ik_foot_lt.translateX}	;
		connect_attribute		calf_lt_nf_stretch_BLND.outputR				ik_nf_calf_lt.translateX		force
								calf_lt_pv_stretch_BLND.outputR				ik_pv_calf_lt.translateX		force
								foot_lt_nf_stretch_BLND.outputR				ik_nf_foot_lt.translateX		force
								foot_lt_pv_stretch_BLND.outputR				ik_pv_foot_lt.translateX		force
								ik_foot_lt_CTRL.stretch						[calf_lt_nf_stretch_BLND.blender, calf_lt_pv_stretch_BLND.blender, foot_lt_nf_stretch_BLND.blender, foot_lt_pv_stretch_BLND.blender] 	;

# Add AUTO-KNEE attribute to IK_FOOT_LT_CTRL
	add_attribute				ik_foot_lt_CTRL								autoKneeBlend					float minValue=0 maxValue=1 defaultValue=1 keyable	;
	connect_attribute			ik_foot_lt_CTRL.autoKneeBlend				[thigh_lt_ikNfPvTranslate_BLND.blender, calf_lt_ikNfPvTranslate_BLND.blender, foot_lt_ikNfPvTranslate_BLND.blender, thigh_lt_ikNfPvRotate_BLND.blender, calf_lt_ikNfPvRotate_BLND.blender, foot_lt_ikNfPvRotate_BLND.blender]	;


# Add AUTO-KNEE-THIGH-LENGTH attribute to IK_FOOT_LT_CTRL
	# Add LENGTH attribute
		add_attribute			ik_foot_lt_CTRL								autoKneeThighLength				float minValue=0 defaultValue=1 keyable	;
	# Setup LENGTH nodes
		create_node				thigh_lt_nf_length_MUL						multiplyDivide	;
		connect_attribute		ik_foot_lt_CTRL.autoKneeThighLength			thigh_lt_nf_length_MUL.input1X
								calf_lt_nf_stretch_BLND.outputR				thigh_lt_nf_length_MUL.input2X	;
		set_attribute			thigh_lt_nf_length_MUL.operation				1	;
		connect_attribute		thigh_lt_nf_length_MUL.outputX				ik_nf_calf_lt.translateX		force	;

# Add AUTO-KNEE-CALF-LENGTH attribute to IK_FOOT_LT_CTRL
	# Add LENGTH attribute
		add_attribute			ik_foot_lt_CTRL								autoKneeCalfLength				float minValue=0 defaultValue=1 keyable	;
	# Setup LENGTH nodes
		create_node				calf_lt_nf_length_MUL						multiplyDivide	;
		connect_attribute		ik_foot_lt_CTRL.autoKneeCalfLength			calf_lt_nf_length_MUL.input1X
								foot_lt_nf_stretch_BLND.outputR				calf_lt_nf_length_MUL.input2X	;
		set_attribute			calf_lt_nf_length_MUL.operation				1	;
		connect_attribute		calf_lt_nf_length_MUL.outputX				ik_nf_foot_lt.translateX		force	;

# Add members to layer: SKELETON
	edit_layer					Skeleton									[ik_nf_thigh_lt, ik_pv_thigh_lt]
	;


# RIGHT =====================================================================

# Create No-Flip and Pole Vector Constraint IK joint chains based on IK joint chain
	duplicate					ik_nf_thigh_rt								ik_thigh_rt
								ik_pv_thigh_rt								ik_thigh_rt	;
	find_replace				ik_nf_thigh_rt|ik_calf_rt					ik_ ik_nf_
								ik_pv_thigh_rt|ik_calf_rt					ik_ ik_pv_	;
	delete						ik_nf_ball_rt
								ik_pv_ball_rt	;

# Make No-Flip and Pole Vector Constraint IK joint chain to drive translate attribute of IK joint chain
	create_node					thigh_rt_ikNfPvTranslate_BLND				blendColors
								calf_rt_ikNfPvTranslate_BLND				blendColors
								foot_rt_ikNfPvTranslate_BLND				blendColors	;
	connect_attribute			ik_nf_thigh_rt.translate					thigh_rt_ikNfPvTranslate_BLND.color1
								ik_pv_thigh_rt.translate					thigh_rt_ikNfPvTranslate_BLND.color2
								ik_nf_calf_rt.translate						calf_rt_ikNfPvTranslate_BLND.color1
								ik_pv_calf_rt.translate						calf_rt_ikNfPvTranslate_BLND.color2
								ik_nf_foot_rt.translate						foot_rt_ikNfPvTranslate_BLND.color1
								ik_pv_foot_rt.translate						foot_rt_ikNfPvTranslate_BLND.color2
								thigh_rt_ikNfPvTranslate_BLND.output		ik_thigh_rt.translate
								calf_rt_ikNfPvTranslate_BLND.output			ik_calf_rt.translate
								foot_rt_ikNfPvTranslate_BLND.output			ik_foot_rt.translate	;

# Make No-Flip and Pole Vector Constraint IK joint chain to drive rotate attribute of IK joint chain
	create_node					thigh_rt_ikNfPvRotate_BLND					blendColors
								calf_rt_ikNfPvRotate_BLND					blendColors
								foot_rt_ikNfPvRotate_BLND					blendColors	;
	connect_attribute			ik_nf_thigh_rt.rotate						thigh_rt_ikNfPvRotate_BLND.color1
								ik_pv_thigh_rt.rotate						thigh_rt_ikNfPvRotate_BLND.color2
								ik_nf_calf_rt.rotate						calf_rt_ikNfPvRotate_BLND.color1
								ik_pv_calf_rt.rotate						calf_rt_ikNfPvRotate_BLND.color2
								ik_nf_foot_rt.rotate						foot_rt_ikNfPvRotate_BLND.color1
								ik_pv_foot_rt.rotate						foot_rt_ikNfPvRotate_BLND.color2
								thigh_rt_ikNfPvRotate_BLND.output			ik_thigh_rt.rotate
								calf_rt_ikNfPvRotate_BLND.output			ik_calf_rt.rotate
								foot_rt_ikNfPvRotate_BLND.output			ik_foot_rt.rotate	;

# Setup STRETCH joint length attributes (No-Flip IK):
	# Create distance from THIGH_RT to FOOT_RT
		create_distance			leg_rt_nf_length							thigh_rt			foot_rt	;
		parent					ik_foot_rt_CTRL								[leg_rt_nf_length_end_LOC]	;
	# Right LEG length (No-Flip IK)
		set_driven_key			leg_rt_nf_length_DISTShape.distance			-1*({ik_nf_calf_rt.translateX}+{ik_nf_foot_rt.translateX})		{ik_nf_calf_rt.translateX}		[ik_nf_calf_rt]	[translateX]
								leg_rt_nf_length_DISTShape.distance			-1*({ik_nf_calf_rt.translateX}+{ik_nf_foot_rt.translateX})*2	{ik_nf_calf_rt.translateX}*2	[ik_nf_calf_rt]	[translateX]
								leg_rt_nf_length_DISTShape.distance			-1*({ik_nf_calf_rt.translateX}+{ik_nf_foot_rt.translateX})		{ik_nf_foot_rt.translateX}		[ik_nf_foot_rt]	[translateX]
								leg_rt_nf_length_DISTShape.distance			-1*({ik_nf_calf_rt.translateX}+{ik_nf_foot_rt.translateX})*2	{ik_nf_foot_rt.translateX}*2	[ik_nf_foot_rt]	[translateX]	;
		key_tangent				[translateX]								[ik_nf_calf_rt, ik_nf_foot_rt]	inTangentType="spline" outTangentType="spline"	;
		set_infinity			[translateX]								[ik_nf_calf_rt, ik_nf_foot_rt]	postInfinite="linear"	;
	# Normalize length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
		create_node				leg_rt_nf_normalizeLength_DIV				multiplyDivide	;
		connect_attribute		leg_rt_nf_length_DISTShape.distance			leg_rt_nf_normalizeLength_DIV.input1X
								character_CTRL.scaleZ						leg_rt_nf_normalizeLength_DIV.input2X	;
		set_attribute			leg_rt_nf_normalizeLength_DIV.operation		2	;
		connect_attribute		leg_rt_nf_normalizeLength_DIV.outputX		ik_nf_calf_rt_translateX.input	force
								leg_rt_nf_normalizeLength_DIV.outputX		ik_nf_foot_rt_translateX.input	force	;

# Setup STRETCH joint length attributes (Pole Vector Constraint IK):
	# Create distance from THIGH_RT to FOOT_RT
		create_distance			leg_rt_pv_length							thigh_rt			foot_rt	;
		parent					ik_foot_rt_CTRL								[leg_rt_pv_length_end_LOC]	;
	# Right LEG length (Pole Vector IK)
		set_driven_key			leg_rt_pv_length_DISTShape.distance			-1*({ik_pv_calf_rt.translateX}+{ik_pv_foot_rt.translateX})		{ik_pv_calf_rt.translateX}		[ik_pv_calf_rt]	[translateX]
								leg_rt_pv_length_DISTShape.distance			-1*({ik_pv_calf_rt.translateX}+{ik_pv_foot_rt.translateX})*2	{ik_pv_calf_rt.translateX}*2	[ik_pv_calf_rt]	[translateX]
								leg_rt_pv_length_DISTShape.distance			-1*({ik_pv_calf_rt.translateX}+{ik_pv_foot_rt.translateX})		{ik_pv_foot_rt.translateX}		[ik_pv_foot_rt]	[translateX]
								leg_rt_pv_length_DISTShape.distance			-1*({ik_pv_calf_rt.translateX}+{ik_pv_foot_rt.translateX})*2	{ik_pv_foot_rt.translateX}*2	[ik_pv_foot_rt]	[translateX]	;
		key_tangent				[translateX]								[ik_pv_calf_rt, ik_pv_foot_rt]	inTangentType="spline" outTangentType="spline"	;
		set_infinity			[translateX]								[ik_pv_calf_rt, ik_pv_foot_rt]	postInfinite="linear"	;
	# Normalize length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
		create_node				leg_rt_pv_normalizeLength_DIV				multiplyDivide	;
		connect_attribute		leg_rt_pv_length_DISTShape.distance			leg_rt_pv_normalizeLength_DIV.input1X
								character_CTRL.scaleZ						leg_rt_pv_normalizeLength_DIV.input2X	;
		set_attribute			leg_rt_pv_normalizeLength_DIV.operation		2	;
		connect_attribute		leg_rt_pv_normalizeLength_DIV.outputX		ik_pv_calf_rt_translateX.input	force
								leg_rt_pv_normalizeLength_DIV.outputX		ik_pv_foot_rt_translateX.input	force	;

# Add STRETCH attributes to IK_FOOT_RT_CTRL
	# Add STRETCH attributes
		add_attribute			ik_foot_rt_CTRL								stretch	float minValue=0 maxValue=1 defaultValue=0 keyable	;
	# Setup STRETCH blend nodes
		create_node				calf_rt_nf_stretch_BLND						blendColors
								calf_rt_pv_stretch_BLND						blendColors
								foot_rt_nf_stretch_BLND						blendColors
								foot_rt_pv_stretch_BLND						blendColors	;
		connect_attribute		ik_nf_calf_rt_translateX.output				calf_rt_nf_stretch_BLND.color1R
								ik_pv_calf_rt_translateX.output				calf_rt_pv_stretch_BLND.color1R
								ik_nf_foot_rt_translateX.output				foot_rt_nf_stretch_BLND.color1R
								ik_pv_foot_rt_translateX.output				foot_rt_pv_stretch_BLND.color1R	;
		set_attribute			calf_rt_nf_stretch_BLND.color2R				{ik_calf_rt.translateX}
								calf_rt_pv_stretch_BLND.color2R				{ik_calf_rt.translateX}
								foot_rt_nf_stretch_BLND.color2R				{ik_foot_rt.translateX}
								foot_rt_pv_stretch_BLND.color2R				{ik_foot_rt.translateX}	;
		connect_attribute		calf_rt_nf_stretch_BLND.outputR				ik_nf_calf_rt.translateX		force
								calf_rt_pv_stretch_BLND.outputR				ik_pv_calf_rt.translateX		force
								foot_rt_nf_stretch_BLND.outputR				ik_nf_foot_rt.translateX		force
								foot_rt_pv_stretch_BLND.outputR				ik_pv_foot_rt.translateX		force	;
		connect_attribute		ik_foot_rt_CTRL.stretch						[calf_rt_nf_stretch_BLND.blender, calf_rt_pv_stretch_BLND.blender, foot_rt_nf_stretch_BLND.blender, foot_rt_pv_stretch_BLND.blender] 	;

# Add AUTO-KNEE attribute to IK_FOOT_RT_CTRL
	add_attribute				ik_foot_rt_CTRL								autoKneeBlend					float minValue=0 maxValue=1 defaultValue=1 keyable	;
	connect_attribute			ik_foot_rt_CTRL.autoKneeBlend				[thigh_rt_ikNfPvTranslate_BLND.blender, calf_rt_ikNfPvTranslate_BLND.blender, foot_rt_ikNfPvTranslate_BLND.blender, thigh_rt_ikNfPvRotate_BLND.blender, calf_rt_ikNfPvRotate_BLND.blender, foot_rt_ikNfPvRotate_BLND.blender]	;


# Add AUTO-KNEE-THIGH-LENGTH attribute to IK_FOOT_RT_CTRL
	# Add LENGTH attribute
		add_attribute			ik_foot_rt_CTRL								autoKneeThighLength				float minValue=0 defaultValue=1 keyable	;
	# Setup LENGTH nodes
		create_node				thigh_rt_nf_length_MUL						multiplyDivide	;
		connect_attribute		ik_foot_rt_CTRL.autoKneeThighLength			thigh_rt_nf_length_MUL.input1X
								calf_rt_nf_stretch_BLND.outputR				thigh_rt_nf_length_MUL.input2X	;
		set_attribute			thigh_rt_nf_length_MUL.operation				1	;
		connect_attribute		thigh_rt_nf_length_MUL.outputX				ik_nf_calf_rt.translateX		force	;

# Add AUTO-KNEE-CALF-LENGTH attribute to IK_FOOT_RT_CTRL
	# Add LENGTH attribute
		add_attribute			ik_foot_rt_CTRL								autoKneeCalfLength				float minValue=0 defaultValue=1 keyable	;
	# Setup LENGTH nodes
		create_node				calf_rt_nf_length_MUL						multiplyDivide	;
		connect_attribute		ik_foot_rt_CTRL.autoKneeCalfLength			calf_rt_nf_length_MUL.input1X
								foot_rt_nf_stretch_BLND.outputR				calf_rt_nf_length_MUL.input2X	;
		set_attribute			calf_rt_nf_length_MUL.operation				1	;
		connect_attribute		calf_rt_nf_length_MUL.outputX				ik_nf_foot_rt.translateX		force	;

# Add members to layer: SKELETON
	edit_layer					Skeleton									[ik_nf_thigh_rt, ik_pv_thigh_rt]
	;


#############################################################################
#### [ LEG ] IK Controls, No-Flip and Pole Vector Constraint Knee
#############################################################################

# Create IK spline handles: LEG_LT_NF_HDL and LEG_LT_PV_HDL
	ik_handle		leg_lt_nf_HDL		ik_nf_thigh_lt		ik_nf_foot_lt		solver="ikRPsolver"
					leg_lt_pv_HDL		ik_pv_thigh_lt		ik_pv_foot_lt		solver="ikRPsolver"	;
	rename			effector1			leg_lt_nf_EFF
					effector2			leg_lt_pv_EFF	;
	parent			ik_foot_lt_CTRL		[leg_lt_nf_HDL, leg_lt_pv_HDL]	;

# Create IK spline handle: BALL_LT_HDL
	ik_handle		ball_lt_HDL			ik_foot_lt			ik_ball_lt			solver="ikRPsolver"	;
	rename			effector1			ball_lt_EFF	;
	parent			ik_foot_lt_CTRL		[ball_lt_HDL]	;

# Create IK spline handle: TOE_LT_HDL
	ik_handle		toe_lt_HDL			ik_ball_lt			ik_toe_lt			solver="ikRPsolver"	;
	rename			effector1			toe_lt_EFF	;
	parent			ik_foot_lt_CTRL		[toe_lt_HDL]	;

# Create pole vector constraints: KNEE_LT_NF_PVC and KNEE_LT_PV_PVC
	create_locator			knee_lt_nf_LOC
							knee_lt_pv_LOC	;
	move					knee_lt_nf_LOC					 0.0	-40.0		0.0			relative_to=calf_lt
							knee_lt_pv_LOC					 0.0	-40.0		0.0			relative_to=calf_lt	;
	xform_ref				knee_lt_pv_LOC													translation worldSpace	;
	pole_constraint			knee_lt_nf_PVC					knee_lt_nf_LOC					leg_lt_nf_HDL
							knee_lt_pv_PVC					knee_lt_pv_LOC					leg_lt_pv_HDL	;

# Create group: KNEE_LT_NF_GRP
	create_group			knee_lt_nf_GRP	;
	parent					knee_lt_nf_GRP					[knee_lt_nf_LOC]	;
	move					knee_lt_nf_GRP					 0.0	  0.0		0.0			relative_to=foot_lt		[rotatePivot, scalePivot]
							knee_lt_nf_LOC					20.0	  0.0		0.0			relative_to=foot_lt		to_world_position	;
	set_attribute			leg_lt_nf_HDL.twist				90	;
	parent					ik_foot_lt_CTRL					[knee_lt_nf_GRP]	;

# Create KNEE-TWIST attributes to IK_FOOT_LT_CTRL
	add_attribute			ik_foot_lt_CTRL					kneeTwist						float defaultValue=0 keyable	;
	connect_attribute		ik_foot_lt_CTRL.kneeTwist		knee_lt_nf_GRP.rotateZ	;

# Create control: IK_KNEE_LT_CTRL
	create_curve			ik_knee_lt_CTRL					[0.00, 4.24, 0.00, 4.24, 0.00, 0.00, 0.00, -4.24, 0.00, -4.24, 0.00, 0.00, 0.00, 4.24, 0.00, 0.00, 0.00, 7.07, 0.00, -4.24, 0.00, -4.24, 0.00, 0.00, 0.00, 0.00, 7.07, 4.24, 0.00, 0.00]	degree=1	;
	move					ik_knee_lt_CTRL					 0.0	  0.0		0.0			relative_to=knee_lt_pv_LOC	;
	rotate					ik_knee_lt_CTRL					90.0	  0.0		0.0			euler	;
	freeze					ik_knee_lt_CTRL	;
	parent					ik_knee_lt_CTRL					[knee_lt_pv_LOC]	;

# Add to layer: CONTROLS_IK
	edit_layer				Controls_IK						[ik_knee_lt_CTRL]
	;


# RIGHT =====================================================================

# Create IK spline handles: LEG_RT_NF_HDL and LEG_RT_PV_HDL
	ik_handle		leg_rt_nf_HDL		ik_nf_thigh_rt		ik_nf_foot_rt		solver="ikRPsolver"
					leg_rt_pv_HDL		ik_pv_thigh_rt		ik_pv_foot_rt		solver="ikRPsolver"	;
	rename			effector1			leg_rt_nf_EFF
					effector2			leg_rt_pv_EFF	;
	parent			ik_foot_rt_CTRL		[leg_rt_nf_HDL, leg_rt_pv_HDL]	;

# Create IK spline handle: BALL_RT_HDL
	ik_handle		ball_rt_HDL			ik_foot_rt			ik_ball_rt			solver="ikRPsolver"	;
	rename			effector1			ball_rt_EFF	;
	parent			ik_foot_rt_CTRL		[ball_rt_HDL]	;

# Create IK spline handle: TOE_RT_HDL
	ik_handle		toe_rt_HDL			ik_ball_rt			ik_toe_rt			solver="ikRPsolver"	;
	rename			effector1			toe_rt_EFF	;
	parent			ik_foot_rt_CTRL		[toe_rt_HDL]	;

# Create pole vector constraints: KNEE_RT_NF_PVC and KNEE_RT_PV_PVC
	create_locator			knee_rt_nf_LOC
							knee_rt_pv_LOC	;
	move					knee_rt_nf_LOC					 0.0	-40.0		0.0			relative_to=calf_rt
							knee_rt_pv_LOC					 0.0	-40.0		0.0			relative_to=calf_rt	;
	xform_ref				knee_rt_pv_LOC													translation worldSpace	;
	pole_constraint			knee_rt_nf_PVC					knee_rt_nf_LOC					leg_rt_nf_HDL
							knee_rt_pv_PVC					knee_rt_pv_LOC					leg_rt_pv_HDL	;

# Create group: KNEE_RT_NF_GRP
	create_group			knee_rt_nf_GRP	;
	parent					knee_rt_nf_GRP					[knee_rt_nf_LOC]	;
	move					knee_rt_nf_GRP					 0.0	  0.0		0.0			relative_to=foot_rt		[rotatePivot, scalePivot]
							knee_rt_nf_LOC					20.0	  0.0		0.0			relative_to=foot_rt		to_world_position	;
	set_attribute			leg_rt_nf_HDL.twist				90	;
	parent					ik_foot_rt_CTRL					[knee_rt_nf_GRP]	;

# Create KNEE-TWIST attributes to IK_FOOT_RT_CTRL
	add_attribute			ik_foot_rt_CTRL					kneeTwist						float defaultValue=0 keyable	;
	connect_attribute		ik_foot_rt_CTRL.kneeTwist		knee_rt_nf_GRP.rotateZ	;
# Additive inverse
	create_node				additiveInverse_kneeTwist_rt_MUL				multiplyDivide	;
	set_attribute			additiveInverse_kneeTwist_rt_MUL.input1X		-1	;
	connect_attribute		ik_foot_rt_CTRL.kneeTwist						additiveInverse_kneeTwist_rt_MUL.input2X
							additiveInverse_kneeTwist_rt_MUL.outputX		knee_rt_nf_GRP.rotateZ					force	;
	set_attribute			additiveInverse_kneeTwist_rt_MUL.operation		1	;

# Create control: IK_KNEE_RT_CTRL
	create_curve			ik_knee_rt_CTRL					[0.00, 4.24, 0.00, 4.24, 0.00, 0.00, 0.00, -4.24, 0.00, -4.24, 0.00, 0.00, 0.00, 4.24, 0.00, 0.00, 0.00, 7.07, 0.00, -4.24, 0.00, -4.24, 0.00, 0.00, 0.00, 0.00, 7.07, 4.24, 0.00, 0.00]	degree=1	;
	move					ik_knee_rt_CTRL					 0.0	  0.0		0.0			relative_to=knee_rt_pv_LOC	;
	rotate					ik_knee_rt_CTRL					90.0	  0.0		0.0			euler	;
	freeze					ik_knee_rt_CTRL	;
	parent					ik_knee_rt_CTRL					[knee_rt_pv_LOC]	;

# Add to layer: CONTROLS_IK
	edit_layer				Controls_IK						[ik_knee_rt_CTRL]
	;


#############################################################################
#### [ LEG ] IK Snappable Knee
#############################################################################

# Create distance from THIGH_LT to CALF_LT and CALF_LT to FOOT_LT
	create_distance		thighCalf_lt_pv_length			thigh_lt			knee_lt_pv_LOC
						calfFoot_lt_pv_length			knee_lt_pv_LOC		foot_lt	;
	parent				ik_knee_lt_CTRL					[thighCalf_lt_pv_length_end_LOC, calfFoot_lt_pv_length_start_LOC]
						ik_foot_lt_CTRL					[calfFoot_lt_pv_length_end_LOC]	;

# Create blend between uniform and non-uniform scaling for IK_PV_THIGH_LT length
	create_node			thigh_lt_pv_length_BLND								blendColors	;
	connect_attribute	thighCalf_lt_pv_length_DISTShape.distance			thigh_lt_pv_length_BLND.color1R
						ik_pv_calf_lt_translateX.output						thigh_lt_pv_length_BLND.color2R
						thigh_lt_pv_length_BLND.outputR						calf_lt_pv_stretch_BLND.color1R				force	;

# Create blend between uniform and non-uniform scaling for IK_PV_CALF_LT length
	create_node			calf_lt_pv_length_BLND								blendColors	;
	connect_attribute	calfFoot_lt_pv_length_DISTShape.distance			calf_lt_pv_length_BLND.color1R
						ik_pv_foot_lt_translateX.output						calf_lt_pv_length_BLND.color2R
						calf_lt_pv_length_BLND.outputR						foot_lt_pv_stretch_BLND.color1R				force	;

# Normalize THIGH-CALF_LT_PV_LENGTH with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
	create_node			thigh_lt_pv_normalizeLength_DIV						multiplyDivide	;
	connect_attribute	thighCalf_lt_pv_length_DISTShape.distance			thigh_lt_pv_normalizeLength_DIV.input1X
						character_CTRL.scaleZ								thigh_lt_pv_normalizeLength_DIV.input2X	;
	set_attribute		thigh_lt_pv_normalizeLength_DIV.operation			2	;
	connect_attribute	thigh_lt_pv_normalizeLength_DIV.outputX				thigh_lt_pv_length_BLND.color1R	force	;

# Normalize CALF-FOOT_LT_PV_LENGTH length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
	create_node			calf_lt_pv_normalizeLength_DIV						multiplyDivide	;
	connect_attribute	calfFoot_lt_pv_length_DISTShape.distance			calf_lt_pv_normalizeLength_DIV.input1X
						character_CTRL.scaleZ								calf_lt_pv_normalizeLength_DIV.input2X	;
	set_attribute		calf_lt_pv_normalizeLength_DIV.operation			2	;
	connect_attribute	calf_lt_pv_normalizeLength_DIV.outputX				calf_lt_pv_length_BLND.color1R				force	;

# Add KNEE-SNAP attribute to IK_KNEE_LT_CTRL
	add_attribute		ik_knee_lt_CTRL					kneeSnap float minValue=0 maxValue=1 defaultValue=0 keyable	;
	connect_attribute	ik_knee_lt_CTRL.kneeSnap		[thigh_lt_pv_length_BLND.blender, calf_lt_pv_length_BLND.blender]	;


# RIGHT =====================================================================

# Create distance from THIGH_RT to CALF_RT and CALF_RT to FOOT_RT
	create_distance		thighCalf_rt_pv_length			thigh_rt			knee_rt_pv_LOC
						calfFoot_rt_pv_length			knee_rt_pv_LOC		foot_rt	;
	parent				ik_knee_rt_CTRL					[thighCalf_rt_pv_length_end_LOC, calfFoot_rt_pv_length_start_LOC]
						ik_foot_rt_CTRL					[calfFoot_rt_pv_length_end_LOC]	;

# Create blend between uniform and non-uniform scaling for IK_PV_THIGH_RT length
	create_node			thigh_rt_pv_length_BLND								blendColors	;
	connect_attribute	thighCalf_rt_pv_length_DISTShape.distance			thigh_rt_pv_length_BLND.color1R
						ik_pv_calf_rt_translateX.output						thigh_rt_pv_length_BLND.color2R
						thigh_rt_pv_length_BLND.outputR						calf_rt_pv_stretch_BLND.color1R					force	;

# Create blend between uniform and non-uniform scaling for IK_PV_CALF_RT length
	create_node			calf_rt_pv_length_BLND								blendColors	;
	connect_attribute	calfFoot_rt_pv_length_DISTShape.distance			calf_rt_pv_length_BLND.color1R
						ik_pv_foot_rt_translateX.output						calf_rt_pv_length_BLND.color2R
						calf_rt_pv_length_BLND.outputR						foot_rt_pv_stretch_BLND.color1R					force	;

# Normalize THIGH-CALF_RT_PV_LENGTH with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
	create_node			thigh_rt_pv_normalizeLength_DIV						multiplyDivide	;
	connect_attribute	thighCalf_rt_pv_length_DISTShape.distance			thigh_rt_pv_normalizeLength_DIV.input1X
						character_CTRL.scaleZ								thigh_rt_pv_normalizeLength_DIV.input2X	;
	set_attribute		thigh_rt_pv_normalizeLength_DIV.operation			2	;
	connect_attribute	thigh_rt_pv_normalizeLength_DIV.outputX				thigh_rt_pv_length_BLND.color1R					force	;

# Normalize CALF-FOOT_RT_PV_LENGTH length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
	create_node			calf_rt_pv_normalizeLength_DIV						multiplyDivide	;
	connect_attribute	calfFoot_rt_pv_length_DISTShape.distance			calf_rt_pv_normalizeLength_DIV.input1X
						character_CTRL.scaleZ								calf_rt_pv_normalizeLength_DIV.input2X	;
	set_attribute		calf_rt_pv_normalizeLength_DIV.operation			2	;
	connect_attribute	calf_rt_pv_normalizeLength_DIV.outputX				calf_rt_pv_length_BLND.color1R					force	;

# Additive inverse
	create_node			additiveInverse_kneeSnap_thigh_rt_MUL				multiplyDivide	;
	set_attribute		additiveInverse_kneeSnap_thigh_rt_MUL.input1X		-1	;
	connect_attribute	thigh_rt_pv_normalizeLength_DIV.outputX				additiveInverse_kneeSnap_thigh_rt_MUL.input2X
						additiveInverse_kneeSnap_thigh_rt_MUL.outputX		thigh_rt_pv_length_BLND.color1R					force	;
	set_attribute		additiveInverse_kneeSnap_thigh_rt_MUL.operation		1	;

# Additive inverse
	create_node			additiveInverse_kneeSnap_calf_rt_MUL				multiplyDivide	;
	set_attribute		additiveInverse_kneeSnap_calf_rt_MUL.input1X		-1	;
	connect_attribute	calf_rt_pv_normalizeLength_DIV.outputX				additiveInverse_kneeSnap_calf_rt_MUL.input2X
						additiveInverse_kneeSnap_calf_rt_MUL.outputX		calf_rt_pv_length_BLND.color1R					force	;
	set_attribute		additiveInverse_kneeSnap_calf_rt_MUL.operation		1	;

# Add KNEE-SNAP attribute to IK_KNEE_RT_CTRL
	add_attribute		ik_knee_rt_CTRL					kneeSnap float minValue=0 maxValue=1 defaultValue=0 keyable	;
	connect_attribute	ik_knee_rt_CTRL.kneeSnap		[thigh_rt_pv_length_BLND.blender, calf_rt_pv_length_BLND.blender]	;


#############################################################################
#### [ LEG ] FK Controls and Stretch
#############################################################################

# Create FK controls:
	# Left THIGH FK control
		create_circle		fk_thigh_lt_CTRL_nurb			 0.0	 0.0	  0.0				radius=8.9	;
		parent				fk_thigh_lt						[fk_thigh_lt_CTRL_nurbShape]		relative shape	;
		rename				fk_thigh_lt_CTRL_nurbShape		fk_thigh_ltShape	;
		rotate				fk_thigh_ltShape.cv[0:7]		 0.0	90.0	  0.0				euler worldSpace	;
		move				fk_thigh_ltShape.cv[0:7]		 1.0	-1.8	-11.5				relative	;
		delete				fk_thigh_lt_CTRL_nurb	;
		rename				fk_thigh_lt						fk_thigh_lt_CTRL	;
	# Left CALF FK control
		create_circle		fk_calf_lt_CTRL_nurb			 0.0	 0.0	  0.0				radius=7	;
		parent				fk_calf_lt						[fk_calf_lt_CTRL_nurbShape]			relative shape	;
		rename				fk_calf_lt_CTRL_nurbShape		fk_calf_ltShape	;
		rotate				fk_calf_ltShape.cv[0:7]			 0.0	90.0	  0.0				euler worldSpace	;
		delete				fk_calf_lt_CTRL_nurb	;
		rename				fk_calf_lt						fk_calf_lt_CTRL	;
	# Left FOOT FK control
		create_circle		fk_foot_lt_CTRL_nurb			 0.0	 0.0	  0.0				radius=7	;
		parent				fk_foot_lt						[fk_foot_lt_CTRL_nurbShape]			relative shape	;
		rename				fk_foot_lt_CTRL_nurbShape		fk_foot_ltShape	;
		rotate				fk_foot_ltShape.cv[0:7]			45.0	90.0	  0.0				euler worldSpace	;
		delete				fk_foot_lt_CTRL_nurb	;
		rename				fk_foot_lt						fk_foot_lt_CTRL	;
	# Left BALL FK control
		create_circle		fk_ball_lt_CTRL_nurb			 0.0	 0.0	  0.0				radius=7	;
		parent				fk_ball_lt						[fk_ball_lt_CTRL_nurbShape]			relative shape	;
		rename				fk_ball_lt_CTRL_nurbShape		fk_ball_ltShape	;
		rotate				fk_ball_ltShape.cv[0:7]			 0.0	 0.0	 90.0				euler worldSpace;
		move				fk_ball_ltShape.cv[0:7]			 0.0	-3.0	  4.0				relative	;
		delete				fk_ball_lt_CTRL_nurb	;
		rename				fk_ball_lt						fk_ball_lt_CTRL	;

# Setup STRETCH joint length attributes:
	# Left THIGH length
		add_attribute		fk_thigh_lt_CTRL				length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		fk_thigh_lt_CTRL.length			-	-		[fk_calf_lt_CTRL]		[translateX]
							fk_thigh_lt_CTRL.length			0	0		[fk_calf_lt_CTRL]		[translateX]	;
		key_tangent			[translateX]								[fk_calf_lt_CTRL]		inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]								[fk_calf_lt_CTRL]		postInfinite="linear"	;
	# Left CALF length
		add_attribute		fk_calf_lt_CTRL					length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		fk_calf_lt_CTRL.length			-	-		[fk_foot_lt_CTRL]		[translateX]
							fk_calf_lt_CTRL.length			0	0		[fk_foot_lt_CTRL]		[translateX]	;
		key_tangent			[translateX]								[fk_foot_lt_CTRL]		inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]								[fk_foot_lt_CTRL]		postInfinite="linear"	;

# Add to layer: CONTROLS_FK
	edit_layer				Controls_FK						[fk_thigh_lt_CTRL, fk_calf_lt_CTRL, fk_foot_lt_CTRL, fk_ball_lt_CTRL]
	;


# RIGHT =====================================================================

# Create FK controls:
	# Left THIGH FK control
		create_circle		fk_thigh_rt_CTRL_nurb			 0.0	 0.0	  0.0				radius=8.9	;
		parent				fk_thigh_rt						[fk_thigh_rt_CTRL_nurbShape]		relative shape	;
		rename				fk_thigh_rt_CTRL_nurbShape		fk_thigh_rtShape	;
		rotate				fk_thigh_rtShape.cv[0:7]		 0.0	90.0	  0.0				euler worldSpace	;
		move				fk_thigh_rtShape.cv[0:7]		 1.0	-1.8	-11.5				relative	;
		delete				fk_thigh_rt_CTRL_nurb	;
		rename				fk_thigh_rt						fk_thigh_rt_CTRL	;
	# Left CALF FK control
		create_circle		fk_calf_rt_CTRL_nurb			 0.0	 0.0	  0.0				radius=7	;
		parent				fk_calf_rt						[fk_calf_rt_CTRL_nurbShape]			relative shape	;
		rename				fk_calf_rt_CTRL_nurbShape		fk_calf_rtShape	;
		rotate				fk_calf_rtShape.cv[0:7]			 0.0	90.0	  0.0				euler worldSpace	;
		delete				fk_calf_rt_CTRL_nurb	;
		rename				fk_calf_rt						fk_calf_rt_CTRL	;
	# Left FOOT FK control
		create_circle		fk_foot_rt_CTRL_nurb			 0.0	 0.0	  0.0				radius=7	;
		parent				fk_foot_rt						[fk_foot_rt_CTRL_nurbShape]			relative shape	;
		rename				fk_foot_rt_CTRL_nurbShape		fk_foot_rtShape	;
		rotate				fk_foot_rtShape.cv[0:7]			45.0	90.0	  0.0				euler worldSpace	;
		delete				fk_foot_rt_CTRL_nurb	;
		rename				fk_foot_rt						fk_foot_rt_CTRL	;
	# Left BALL FK control
		create_circle		fk_ball_rt_CTRL_nurb			 0.0	 0.0	  0.0				radius=7	;
		parent				fk_ball_rt						[fk_ball_rt_CTRL_nurbShape]			relative shape	;
		rename				fk_ball_rt_CTRL_nurbShape		fk_ball_rtShape	;
		rotate				fk_ball_rtShape.cv[0:7]			 0.0	 0.0	 90.0				euler worldSpace;
		move				fk_ball_rtShape.cv[0:7]			 0.0	-3.0	  4.0				relative	;
		delete				fk_ball_rt_CTRL_nurb	;
		rename				fk_ball_rt						fk_ball_rt_CTRL	;

# Setup STRETCH joint length attributes:
	# Left THIGH length
		add_attribute		fk_thigh_rt_CTRL				length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		fk_thigh_rt_CTRL.length			-	-		[fk_calf_rt_CTRL]		[translateX]
							fk_thigh_rt_CTRL.length			0	0		[fk_calf_rt_CTRL]		[translateX]	;
		key_tangent			[translateX]								[fk_calf_rt_CTRL]		inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]								[fk_calf_rt_CTRL]		postInfinite="linear"	;
	# Left CALF length
		add_attribute		fk_calf_rt_CTRL					length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		fk_calf_rt_CTRL.length			-	-		[fk_foot_rt_CTRL]		[translateX]
							fk_calf_rt_CTRL.length			0	0		[fk_foot_rt_CTRL]		[translateX]	;
		key_tangent			[translateX]								[fk_foot_rt_CTRL]		inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]								[fk_foot_rt_CTRL]		postInfinite="linear"	;

# Add to layer: CONTROLS_FK
	edit_layer				Controls_FK						[fk_thigh_rt_CTRL, fk_calf_rt_CTRL, fk_foot_rt_CTRL, fk_ball_rt_CTRL]
	;


#############################################################################
#### [ LEG ] Visibility
#############################################################################

# Add IK / FK visibility attributes to LEG_SETTINGS_LT_CTRL
	add_attribute		leg_settings_lt_CTRL					ikVisibility		bool niceName="IK Visibility" keyable
						leg_settings_lt_CTRL					fkVisibility		bool niceName="FK Visibility" keyable
						leg_settings_lt_CTRL					ikKneeVisibility	bool niceName="IK Knee Visibility" keyable	;
	connect_attribute	leg_settings_lt_CTRL.ikVisibility		ik_foot_lt_CTRL.visibility
						leg_settings_lt_CTRL.fkVisibility		fk_thigh_lt_CTRL.visibility
						leg_settings_lt_CTRL.ikKneeVisibility	ik_knee_lt_CTRL.visibility	;

# Drive IK / FK control visibility based on IK / FK selection
	set_driven_key		leg_settings_lt_CTRL.ikFkBlend			0		1		[leg_settings_lt_CTRL]		[ikVisibility]
						leg_settings_lt_CTRL.ikFkBlend			0.999	1		[leg_settings_lt_CTRL]		[ikVisibility]
						leg_settings_lt_CTRL.ikFkBlend			1		0		[leg_settings_lt_CTRL]		[ikVisibility]
						leg_settings_lt_CTRL.ikFkBlend			0		0		[leg_settings_lt_CTRL]		[fkVisibility]
						leg_settings_lt_CTRL.ikFkBlend			0.001	1		[leg_settings_lt_CTRL]		[fkVisibility]
						leg_settings_lt_CTRL.ikFkBlend			1		1		[leg_settings_lt_CTRL]		[fkVisibility]
						ik_foot_lt_CTRL.autoKneeBlend			0		1		[leg_settings_lt_CTRL]		[ikKneeVisibility]
						ik_foot_lt_CTRL.autoKneeBlend			0.999	1		[leg_settings_lt_CTRL]		[ikKneeVisibility]
						ik_foot_lt_CTRL.autoKneeBlend			1		0		[leg_settings_lt_CTRL]		[ikKneeVisibility]	;

# Create group: IK_KNEE_GRP
	create_group		ik_knee_lt_GRP	;
	parent				ik_knee_lt_GRP							[ik_knee_lt_CTRL]	;
	set_driven_key		leg_settings_lt_CTRL.ikFkBlend			0		1		[ik_knee_lt_GRP]			[visibility]
						leg_settings_lt_CTRL.ikFkBlend			0.999	1		[ik_knee_lt_GRP]			[visibility]
						leg_settings_lt_CTRL.ikFkBlend			1		0		[ik_knee_lt_GRP]			[visibility]	;


# RIGHT =====================================================================

# Add IK / FK visibility attributes to leg_settings_rt_CTRL
	add_attribute		leg_settings_rt_CTRL					ikVisibility		bool niceName="IK Visibility" keyable
						leg_settings_rt_CTRL					fkVisibility		bool niceName="FK Visibility" keyable
						leg_settings_rt_CTRL					ikKneeVisibility	bool niceName="IK Knee Visibility" keyable	;
	connect_attribute	leg_settings_rt_CTRL.ikVisibility		ik_foot_rt_CTRL.visibility
						leg_settings_rt_CTRL.fkVisibility		fk_thigh_rt_CTRL.visibility
						leg_settings_rt_CTRL.ikKneeVisibility	ik_knee_rt_CTRL.visibility	;

# Drive IK / FK control visibility based on IK / FK selection
	set_driven_key		leg_settings_rt_CTRL.ikFkBlend			0		1		[leg_settings_rt_CTRL]		[ikVisibility]
						leg_settings_rt_CTRL.ikFkBlend			0.999	1		[leg_settings_rt_CTRL]		[ikVisibility]
						leg_settings_rt_CTRL.ikFkBlend			1		0		[leg_settings_rt_CTRL]		[ikVisibility]
						leg_settings_rt_CTRL.ikFkBlend			0		0		[leg_settings_rt_CTRL]		[fkVisibility]
						leg_settings_rt_CTRL.ikFkBlend			0.001	1		[leg_settings_rt_CTRL]		[fkVisibility]
						leg_settings_rt_CTRL.ikFkBlend			1		1		[leg_settings_rt_CTRL]		[fkVisibility]
						ik_foot_rt_CTRL.autoKneeBlend			0		1		[leg_settings_rt_CTRL]		[ikKneeVisibility]
						ik_foot_rt_CTRL.autoKneeBlend			0.999	1		[leg_settings_rt_CTRL]		[ikKneeVisibility]
						ik_foot_rt_CTRL.autoKneeBlend			1		0		[leg_settings_rt_CTRL]		[ikKneeVisibility]	;

# Create group: IK_KNEE_GRP
	create_group		ik_knee_rt_GRP	;
	parent				ik_knee_rt_GRP							[ik_knee_rt_CTRL]	;
	set_driven_key		leg_settings_rt_CTRL.ikFkBlend			0		1		[ik_knee_rt_GRP]			[visibility]
						leg_settings_rt_CTRL.ikFkBlend			0.999	1		[ik_knee_rt_GRP]			[visibility]
						leg_settings_rt_CTRL.ikFkBlend			1		0		[ik_knee_rt_GRP]			[visibility]	;


#############################################################################
#### [ LEG ] Group and Controls
#############################################################################

# Create group: LEG_LT_GRP
	create_group		leg_lt_GRP	;
	parent				leg_lt_GRP						[result_thigh_lt, ik_thigh_lt, ik_nf_thigh_lt, ik_pv_thigh_lt, fk_thigh_lt_CTRL, ik_knee_lt_GRP, ik_foot_lt_CTRL, leg_lt_nf_length_start_LOC, leg_lt_nf_length_DIST, leg_lt_pv_length_start_LOC, leg_lt_pv_length_DIST, thighCalf_lt_pv_length_start_LOC, thighCalf_lt_pv_length_DIST, calfFoot_lt_pv_length_DIST]
						leg_sys_GRP						[leg_lt_GRP]	;

# Create group: DO_NOT_TOUCH_GRP
	create_group		DO_NOT_TOUCH_GRP	;
	parent				|DO_NOT_TOUCH_GRP				[result_thigh_lt, ik_thigh_lt, ik_nf_thigh_lt, ik_pv_thigh_lt, leg_lt_nf_length_start_LOC, leg_lt_nf_length_DIST, leg_lt_pv_length_start_LOC, leg_lt_pv_length_DIST, thighCalf_lt_pv_length_start_LOC, thighCalf_lt_pv_length_DIST, calfFoot_lt_pv_length_DIST]
						leg_lt_GRP						[|DO_NOT_TOUCH_GRP]	;

# Create group: LEG_LT_RESULTCONST_GRP
	create_group		leg_lt_resultConst_GRP	;
	parent				leg_lt_resultConst_GRP			[result_thigh_lt]
						leg_lt_GRP|DO_NOT_TOUCH_GRP		[leg_lt_resultConst_GRP]	;
	move				leg_lt_resultConst_GRP			0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=thigh_lt	;

# Create group: LEG_LT_IKC
	create_group		leg_lt_IKC	;
	parent				leg_lt_IKC						[ik_thigh_lt, ik_nf_thigh_lt, ik_pv_thigh_lt, leg_lt_nf_length_start_LOC, leg_lt_pv_length_start_LOC, thighCalf_lt_pv_length_start_LOC]
						leg_lt_GRP|DO_NOT_TOUCH_GRP		[leg_lt_IKC]	;
	move				leg_lt_IKC						0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=thigh_lt	;

# Create group: LEG_LT_FKC
	create_group		leg_lt_FKC	;
	parent				leg_lt_FKC						[fk_thigh_lt_CTRL]
						leg_lt_GRP						[leg_lt_FKC]	;
	move				leg_lt_FKC						0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=thigh_lt	;


# RIGHT =====================================================================

# Create group: LEG_RT_GRP
	create_group		leg_rt_GRP	;
	parent				leg_rt_GRP						[result_thigh_rt, ik_thigh_rt, ik_nf_thigh_rt, ik_pv_thigh_rt, fk_thigh_rt_CTRL, ik_knee_rt_GRP, ik_foot_rt_CTRL, leg_rt_nf_length_start_LOC, leg_rt_nf_length_DIST, leg_rt_pv_length_start_LOC, leg_rt_pv_length_DIST, thighCalf_rt_pv_length_start_LOC, thighCalf_rt_pv_length_DIST, calfFoot_rt_pv_length_DIST]
						leg_sys_GRP						[leg_rt_GRP]	;

# Create group: DO_NOT_TOUCH_GRP
	create_group		DO_NOT_TOUCH_GRP	;
	parent				|DO_NOT_TOUCH_GRP				[result_thigh_rt, ik_thigh_rt, ik_nf_thigh_rt, ik_pv_thigh_rt, leg_rt_nf_length_start_LOC, leg_rt_nf_length_DIST, leg_rt_pv_length_start_LOC, leg_rt_pv_length_DIST, thighCalf_rt_pv_length_start_LOC, thighCalf_rt_pv_length_DIST, calfFoot_rt_pv_length_DIST]
						leg_rt_GRP						[|DO_NOT_TOUCH_GRP]	;

# Create group: LEG_RT_RESULTCONST_GRP
	create_group		leg_rt_resultConst_GRP	;
	parent				leg_rt_resultConst_GRP			[result_thigh_rt]
						leg_rt_GRP|DO_NOT_TOUCH_GRP		[leg_rt_resultConst_GRP]	;
	move				leg_rt_resultConst_GRP			0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=thigh_rt	;

# Create group: LEG_RT_IKC
	create_group		leg_rt_IKC	;
	parent				leg_rt_IKC						[ik_thigh_rt, ik_nf_thigh_rt, ik_pv_thigh_rt, leg_rt_nf_length_start_LOC, leg_rt_pv_length_start_LOC, thighCalf_rt_pv_length_start_LOC]
						leg_rt_GRP|DO_NOT_TOUCH_GRP		[leg_rt_IKC]	;
	move				leg_rt_IKC						0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=thigh_rt	;

# Create group: LEG_RT_FKC
	create_group		leg_rt_FKC	;
	parent				leg_rt_FKC						[fk_thigh_rt_CTRL]
						leg_rt_GRP						[leg_rt_FKC]	;
	move				leg_rt_FKC						0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=thigh_rt	;


#############################################################################
#### [ LEG ] Space Switchers
#############################################################################

# Create constraint locator: THIGH-HIP_LT_SPACE
	create_locator			thighHip_lt_SPACE	;
	move					thighHip_lt_SPACE					0.0		0.0		0.0			relative_to=thigh_lt	;
	parent					ik_hip								[thighHip_lt_SPACE]	; # todo1a - change to result_thigh_lt, if weird
	point_constraint		leg_lt_resultConst_GRP				thighHip_lt_SPACE
							leg_lt_IKC							thighHip_lt_SPACE
							leg_lt_FKC							thighHip_lt_SPACE	;

# Create space switchers: BODY and ROOT
	# Create locators
		duplicate			thighBody_lt_SPACE					thighHip_lt_SPACE
							thighRoot_lt_SPACE					thighHip_lt_SPACE	;
		parent				body_GRP|DO_NOT_TOUCH_GRP			[thighBody_lt_SPACE]
							offset_CTRL							[thighRoot_lt_SPACE]	;
	# Replace constraint with space switchers
		orient_constraint	leg_lt_resultConst_GRP				[thighHip_lt_SPACE, thighBody_lt_SPACE, thighRoot_lt_SPACE]
							leg_lt_FKC							[thighHip_lt_SPACE, thighBody_lt_SPACE, thighRoot_lt_SPACE]	;
	# Create ROTATION-SPACE and TRANSLATION-SPACE attributes to LEG_SETTINGS_LT_CTRL
		add_attribute		leg_settings_lt_CTRL				rotationSpace				enum [hip, body, root] defaultValue=0 keyable	;
	# Set driven keys for space switcher enum values
		set_driven_key		leg_settings_lt_CTRL.rotationSpace	0	1						[leg_lt_resultConst_GRP_orientConstraint1]	[thighHip_lt_SPACEW0]
							leg_settings_lt_CTRL.rotationSpace	0	0						[leg_lt_resultConst_GRP_orientConstraint1]	[thighBody_lt_SPACEW1, thighRoot_lt_SPACEW2]
							leg_settings_lt_CTRL.rotationSpace	1	1						[leg_lt_resultConst_GRP_orientConstraint1]	[thighBody_lt_SPACEW1]
							leg_settings_lt_CTRL.rotationSpace	1	0						[leg_lt_resultConst_GRP_orientConstraint1]	[thighHip_lt_SPACEW0, thighRoot_lt_SPACEW2]
							leg_settings_lt_CTRL.rotationSpace	2	1						[leg_lt_resultConst_GRP_orientConstraint1]	[thighRoot_lt_SPACEW2]
							leg_settings_lt_CTRL.rotationSpace	2	0						[leg_lt_resultConst_GRP_orientConstraint1]	[thighHip_lt_SPACEW0, thighBody_lt_SPACEW1]
							leg_settings_lt_CTRL.rotationSpace	0	1						[leg_lt_FKC_orientConstraint1]				[thighHip_lt_SPACEW0]
							leg_settings_lt_CTRL.rotationSpace	0	0						[leg_lt_FKC_orientConstraint1]				[thighBody_lt_SPACEW1, thighRoot_lt_SPACEW2]
							leg_settings_lt_CTRL.rotationSpace	1	1						[leg_lt_FKC_orientConstraint1]				[thighBody_lt_SPACEW1]
							leg_settings_lt_CTRL.rotationSpace	1	0						[leg_lt_FKC_orientConstraint1]				[thighHip_lt_SPACEW0, thighRoot_lt_SPACEW2]
							leg_settings_lt_CTRL.rotationSpace	2	1						[leg_lt_FKC_orientConstraint1]				[thighRoot_lt_SPACEW2]
							leg_settings_lt_CTRL.rotationSpace	2	0						[leg_lt_FKC_orientConstraint1]				[thighHip_lt_SPACEW0, thighBody_lt_SPACEW1]
		;

# Update orient constraint of RESULTCONST_GRP to only driven on FK mode
	create_node				leg_lt_resultConst_orient_BLND									blendColors	;
	connect_attribute		leg_lt_resultConst_GRP_orientConstraint1.constraintRotate		leg_lt_resultConst_orient_BLND.color1	;
	set_attribute			leg_lt_resultConst_orient_BLND.color2R							0
							leg_lt_resultConst_orient_BLND.color2G							0
							leg_lt_resultConst_orient_BLND.color2B							0	;
	connect_attribute		leg_lt_resultConst_orient_BLND.outputR							leg_lt_resultConst_GRP.rotateX				force
							leg_lt_resultConst_orient_BLND.outputG							leg_lt_resultConst_GRP.rotateY				force
							leg_lt_resultConst_orient_BLND.outputB							leg_lt_resultConst_GRP.rotateZ				force
							leg_settings_lt_CTRL.ikFkBlend									leg_lt_resultConst_orient_BLND.blender	;


# RIGHT =====================================================================

# Create constraint locator: THIGH-HIP_RT_SPACE
	create_locator			thighHip_rt_SPACE	;
	move					thighHip_rt_SPACE					0.0		0.0		0.0			relative_to=thigh_rt	;
	parent					ik_hip								[thighHip_rt_SPACE]	; # todo1a - change to result_thigh_rt, if weird
	point_constraint		leg_rt_resultConst_GRP				thighHip_rt_SPACE
							leg_rt_IKC							thighHip_rt_SPACE
							leg_rt_FKC							thighHip_rt_SPACE	;

# Create space switchers: BODY and ROOT
	# Create locators
		duplicate			thighBody_rt_SPACE					thighHip_rt_SPACE
							thighRoot_rt_SPACE					thighHip_rt_SPACE	;
		parent				body_GRP|DO_NOT_TOUCH_GRP			[thighBody_rt_SPACE]
							offset_CTRL							[thighRoot_rt_SPACE]	;
	# Replace constraint with space switchers
		orient_constraint	leg_rt_resultConst_GRP				[thighHip_rt_SPACE, thighBody_rt_SPACE, thighRoot_rt_SPACE]
							leg_rt_FKC							[thighHip_rt_SPACE, thighBody_rt_SPACE, thighRoot_rt_SPACE]	;
	# Create ROTATION-SPACE and TRANSLATION-SPACE attributes to LEG_SETTINGS_RT_CTRL
		add_attribute		leg_settings_rt_CTRL				rotationSpace				enum [hip, body, root] defaultValue=0 keyable	;
	# Set driven keys for space switcher enum values
		set_driven_key		leg_settings_rt_CTRL.rotationSpace	0	1						[leg_rt_resultConst_GRP_orientConstraint1]	[thighHip_rt_SPACEW0]
							leg_settings_rt_CTRL.rotationSpace	0	0						[leg_rt_resultConst_GRP_orientConstraint1]	[thighBody_rt_SPACEW1, thighRoot_rt_SPACEW2]
							leg_settings_rt_CTRL.rotationSpace	1	1						[leg_rt_resultConst_GRP_orientConstraint1]	[thighBody_rt_SPACEW1]
							leg_settings_rt_CTRL.rotationSpace	1	0						[leg_rt_resultConst_GRP_orientConstraint1]	[thighHip_rt_SPACEW0, thighRoot_rt_SPACEW2]
							leg_settings_rt_CTRL.rotationSpace	2	1						[leg_rt_resultConst_GRP_orientConstraint1]	[thighRoot_rt_SPACEW2]
							leg_settings_rt_CTRL.rotationSpace	2	0						[leg_rt_resultConst_GRP_orientConstraint1]	[thighHip_rt_SPACEW0, thighBody_rt_SPACEW1]
							leg_settings_rt_CTRL.rotationSpace	0	1						[leg_rt_FKC_orientConstraint1]				[thighHip_rt_SPACEW0]
							leg_settings_rt_CTRL.rotationSpace	0	0						[leg_rt_FKC_orientConstraint1]				[thighBody_rt_SPACEW1, thighRoot_rt_SPACEW2]
							leg_settings_rt_CTRL.rotationSpace	1	1						[leg_rt_FKC_orientConstraint1]				[thighBody_rt_SPACEW1]
							leg_settings_rt_CTRL.rotationSpace	1	0						[leg_rt_FKC_orientConstraint1]				[thighHip_rt_SPACEW0, thighRoot_rt_SPACEW2]
							leg_settings_rt_CTRL.rotationSpace	2	1						[leg_rt_FKC_orientConstraint1]				[thighRoot_rt_SPACEW2]
							leg_settings_rt_CTRL.rotationSpace	2	0						[leg_rt_FKC_orientConstraint1]				[thighHip_rt_SPACEW0, thighBody_rt_SPACEW1]
		;

# Update orient constraint of RESULTCONST_GRP to only driven on FK mode
	create_node				leg_rt_resultConst_orient_BLND									blendColors	;
	connect_attribute		leg_rt_resultConst_GRP_orientConstraint1.constraintRotate		leg_rt_resultConst_orient_BLND.color1	;
	set_attribute			leg_rt_resultConst_orient_BLND.color2R							0
							leg_rt_resultConst_orient_BLND.color2G							0
							leg_rt_resultConst_orient_BLND.color2B							0	;
	connect_attribute		leg_rt_resultConst_orient_BLND.outputR							leg_rt_resultConst_GRP.rotateX				force
							leg_rt_resultConst_orient_BLND.outputG							leg_rt_resultConst_GRP.rotateY				force
							leg_rt_resultConst_orient_BLND.outputB							leg_rt_resultConst_GRP.rotateZ				force
							leg_settings_rt_CTRL.ikFkBlend									leg_rt_resultConst_orient_BLND.blender	;


#############################################################################
#### [ LEG ] Lock And Hide Control Channels
#############################################################################

# Lock-and-Hide channels
	set_attribute		fk_thigh_lt_CTRL		lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_calf_lt_CTRL			lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_foot_lt_CTRL			lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_ball_lt_CTRL			lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						ik_foot_lt_CTRL			lock keyable=False channelBox=False		[sx, sy, sz, v]
						ik_knee_lt_CTRL			lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v]
						ik_knee_lt_GRP			lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						leg_lt_resultConst_GRP	lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						leg_lt_IKC				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						leg_settings_lt_CTRL	lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						rig_settings			lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
	;

# Hide objects
	set_attribute		ik_thigh_lt.visibility							0
						ik_nf_thigh_lt.visibility						0
						ik_pv_thigh_lt.visibility						0
						thighHip_lt_SPACE.visibility					0
						thighBody_lt_SPACE.visibility					0
						thighRoot_lt_SPACE.visibility					0
						leg_lt_nf_length_start_LOC.visibility			0
						leg_lt_nf_length_end_LOC.visibility				0
						leg_lt_nf_length_DIST.visibility				0
						leg_lt_pv_length_start_LOC.visibility			0
						leg_lt_pv_length_end_LOC.visibility				0
						leg_lt_pv_length_DIST.visibility				0
						thighCalf_lt_pv_length_start_LOC.visibility		0
						thighCalf_lt_pv_length_end_LOC.visibility		0
						thighCalf_lt_pv_length_DIST.visibility			0
						calfFoot_lt_pv_length_start_LOC.visibility		0
						calfFoot_lt_pv_length_end_LOC.visibility		0
						calfFoot_lt_pv_length_DIST.visibility			0
						knee_lt_nf_LOC.visibility						0
						knee_lt_pv_LOC.visibility						0
						leg_lt_nf_HDL.visibility						0
						leg_lt_pv_HDL.visibility						0
						ball_lt_HDL.visibility							0
						toe_lt_HDL.visibility							0
	;


# RIGHT =====================================================================

# Lock-and-Hide channels
	set_attribute		fk_thigh_rt_CTRL		lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_calf_rt_CTRL			lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_foot_rt_CTRL			lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_ball_rt_CTRL			lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						ik_foot_rt_CTRL			lock keyable=False channelBox=False		[sx, sy, sz, v]
						ik_knee_rt_CTRL			lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v]
						ik_knee_rt_GRP			lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						leg_rt_resultConst_GRP	lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						leg_rt_IKC				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						leg_settings_rt_CTRL	lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						rig_settings			lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
	;

# Hide objects
	set_attribute		ik_thigh_rt.visibility							0
						ik_nf_thigh_rt.visibility						0
						ik_pv_thigh_rt.visibility						0
						thighHip_rt_SPACE.visibility					0
						thighBody_rt_SPACE.visibility					0
						thighRoot_rt_SPACE.visibility					0
						leg_rt_nf_length_start_LOC.visibility			0
						leg_rt_nf_length_end_LOC.visibility				0
						leg_rt_nf_length_DIST.visibility				0
						leg_rt_pv_length_start_LOC.visibility			0
						leg_rt_pv_length_end_LOC.visibility				0
						leg_rt_pv_length_DIST.visibility				0
						thighCalf_rt_pv_length_start_LOC.visibility		0
						thighCalf_rt_pv_length_end_LOC.visibility		0
						thighCalf_rt_pv_length_DIST.visibility			0
						calfFoot_rt_pv_length_start_LOC.visibility		0
						calfFoot_rt_pv_length_end_LOC.visibility		0
						calfFoot_rt_pv_length_DIST.visibility			0
						knee_rt_nf_LOC.visibility						0
						knee_rt_pv_LOC.visibility						0
						leg_rt_nf_HDL.visibility						0
						leg_rt_pv_HDL.visibility						0
						ball_rt_HDL.visibility							0
						toe_rt_HDL.visibility							0
	;


#############################################################################
#### [ FOOT ] Smart Foot Roll
#############################################################################

# Update locators: HEEL_LT_LOC, BALL_LT_LOC, TOE_LT_LOC
	set_attribute			toe_lt_LOC.rotateOrder					4	;					# Change rotation order => [yxz]
	parent					ik_foot_lt_CTRL							[heel_lt_LOC]
							heel_lt_LOC								[toe_lt_LOC, toe_lt_HDL]
							ball_lt_LOC								[knee_lt_nf_GRP, leg_lt_nf_length_end_LOC, leg_lt_pv_length_end_LOC, calfFoot_lt_pv_length_end_LOC, leg_lt_nf_HDL, leg_lt_pv_HDL, ball_lt_HDL]
							toe_lt_LOC								[ball_lt_LOC]	;

# Add ROLL related attributes to IK_FOOT_LT_CTRL
	add_attribute			ik_foot_lt_CTRL							roll					float defaultValue=0 keyable
							ik_foot_lt_CTRL							bendLimitAngle			float defaultValue=45 keyable
							ik_foot_lt_CTRL							toeStraightAngle		float defaultValue=70 keyable	;

# Setup HEEL roll
	create_node				heel_lt_rotate_CLMP						clamp	;
	set_attribute			heel_lt_rotate_CLMP.minR				-90
							heel_lt_rotate_CLMP.maxR				0	;
	connect_attribute		ik_foot_lt_CTRL.roll					heel_lt_rotate_CLMP.inputR
							heel_lt_rotate_CLMP.outputR				heel_lt_LOC.rotateX	;

# Setup TOE roll
	# Clamp roll value
		create_node			toe_lt_bendToStraight_CLMP				clamp	;
		connect_attribute	ik_foot_lt_CTRL.bendLimitAngle			toe_lt_bendToStraight_CLMP.minR
							ik_foot_lt_CTRL.toeStraightAngle		toe_lt_bendToStraight_CLMP.maxR
							ik_foot_lt_CTRL.roll					toe_lt_bendToStraight_CLMP.inputR	;
	# Rotate values to percentage mapping
		create_node			toe_lt_bendToStraightPct_RNG			setRange	;
		set_attribute		toe_lt_bendToStraightPct_RNG.minX		0
							toe_lt_bendToStraightPct_RNG.maxX		1	;
		connect_attribute	toe_lt_bendToStraight_CLMP.minR			toe_lt_bendToStraightPct_RNG.oldMinX
							toe_lt_bendToStraight_CLMP.maxR			toe_lt_bendToStraightPct_RNG.oldMaxX
							toe_lt_bendToStraight_CLMP.inputR		toe_lt_bendToStraightPct_RNG.valueX	;
	# Multiply percentage
		create_node			toe_lt_roll_MUL							multiplyDivide	;
		connect_attribute	toe_lt_bendToStraightPct_RNG.outValueX	toe_lt_roll_MUL.input1X
							toe_lt_bendToStraight_CLMP.inputR		toe_lt_roll_MUL.input2X
							toe_lt_roll_MUL.outputX					toe_lt_LOC.rotateX	;

# Setup BALL roll
	# Clamp roll value
		create_node			ball_lt_zeroToBend_CLMP					clamp	;
		set_attribute		ball_lt_zeroToBend_CLMP.minR			0	;
		connect_attribute	ik_foot_lt_CTRL.bendLimitAngle			ball_lt_zeroToBend_CLMP.maxR
							ik_foot_lt_CTRL.roll					ball_lt_zeroToBend_CLMP.inputR	;
	# Rotate values to percentage mapping
		create_node			ball_lt_zeroToBendPct_RNG				setRange	;
		set_attribute		ball_lt_zeroToBendPct_RNG.minX			0
							ball_lt_zeroToBendPct_RNG.maxX			1	;
		connect_attribute	ball_lt_zeroToBend_CLMP.minR			ball_lt_zeroToBendPct_RNG.oldMinX
							ball_lt_zeroToBend_CLMP.maxR			ball_lt_zeroToBendPct_RNG.oldMaxX
							ball_lt_zeroToBend_CLMP.inputR			ball_lt_zeroToBendPct_RNG.valueX	;
	# Invert percentage
		create_node			ball_lt_invertPcg_SUB					plusMinusAverage	;
		set_attribute		ball_lt_invertPcg_SUB.input1D[0]		1
							ball_lt_invertPcg_SUB.input1D[1]		0	;
		connect_attribute	toe_lt_bendToStraightPct_RNG.outValueX	ball_lt_invertPcg_SUB.input1D[1]	;
		set_attribute		ball_lt_invertPcg_SUB.operation			2	;
	# Roll multiplier
		create_node			ball_lt_rollMultiplier_MUL				multiplyDivide	;
		connect_attribute	ball_lt_zeroToBendPct_RNG.outValueX		ball_lt_rollMultiplier_MUL.input1X
							ball_lt_invertPcg_SUB.output1D			ball_lt_rollMultiplier_MUL.input2X	;
	# Multiply percentage
		create_node			ball_lt_roll_MUL						multiplyDivide	;
		connect_attribute	ball_lt_rollMultiplier_MUL.outputX		ball_lt_roll_MUL.input1X
							ik_foot_lt_CTRL.roll					ball_lt_roll_MUL.input2X
							ball_lt_roll_MUL.outputX				ball_lt_LOC.rotateX	;


# RIGHT =====================================================================

# Update locators: HEEL_RT_LOC, BALL_RT_LOC, TOE_RT_LOC
	set_attribute			toe_rt_LOC.rotateOrder					4	;					# Change rotation order => [yxz]
	parent					ik_foot_rt_CTRL							[heel_rt_LOC]
							heel_rt_LOC								[toe_rt_LOC, toe_rt_HDL]
							ball_rt_LOC								[knee_rt_nf_GRP, leg_rt_nf_length_end_LOC, leg_rt_pv_length_end_LOC, calfFoot_rt_pv_length_end_LOC, leg_rt_nf_HDL, leg_rt_pv_HDL, ball_rt_HDL]
							toe_rt_LOC								[ball_rt_LOC]	;

# Add ROLL related attributes to IK_FOOT_RT_CTRL
	add_attribute			ik_foot_rt_CTRL							roll					float defaultValue=0 keyable
							ik_foot_rt_CTRL							bendLimitAngle			float defaultValue=45 keyable
							ik_foot_rt_CTRL							toeStraightAngle		float defaultValue=70 keyable	;

# Setup HEEL roll
	create_node				heel_rt_rotate_CLMP						clamp	;
	set_attribute			heel_rt_rotate_CLMP.minR				-90
							heel_rt_rotate_CLMP.maxR				0	;
	connect_attribute		ik_foot_rt_CTRL.roll					heel_rt_rotate_CLMP.inputR
							heel_rt_rotate_CLMP.outputR				heel_rt_LOC.rotateX	;

# Setup TOE roll
	# Clamp roll value
		create_node			toe_rt_bendToStraight_CLMP				clamp	;
		connect_attribute	ik_foot_rt_CTRL.bendLimitAngle			toe_rt_bendToStraight_CLMP.minR
							ik_foot_rt_CTRL.toeStraightAngle		toe_rt_bendToStraight_CLMP.maxR
							ik_foot_rt_CTRL.roll					toe_rt_bendToStraight_CLMP.inputR	;
	# Rotate values to percentage mapping
		create_node			toe_rt_bendToStraightPct_RNG			setRange	;
		set_attribute		toe_rt_bendToStraightPct_RNG.minX		0
							toe_rt_bendToStraightPct_RNG.maxX		1	;
		connect_attribute	toe_rt_bendToStraight_CLMP.minR			toe_rt_bendToStraightPct_RNG.oldMinX
							toe_rt_bendToStraight_CLMP.maxR			toe_rt_bendToStraightPct_RNG.oldMaxX
							toe_rt_bendToStraight_CLMP.inputR		toe_rt_bendToStraightPct_RNG.valueX	;
	# Multiply percentage
		create_node			toe_rt_roll_MUL							multiplyDivide	;
		connect_attribute	toe_rt_bendToStraightPct_RNG.outValueX	toe_rt_roll_MUL.input1X
							toe_rt_bendToStraight_CLMP.inputR		toe_rt_roll_MUL.input2X
							toe_rt_roll_MUL.outputX					toe_rt_LOC.rotateX	;

# Setup BALL roll
	# Clamp roll value
		create_node			ball_rt_zeroToBend_CLMP					clamp	;
		set_attribute		ball_rt_zeroToBend_CLMP.minR			0	;
		connect_attribute	ik_foot_rt_CTRL.bendLimitAngle			ball_rt_zeroToBend_CLMP.maxR
							ik_foot_rt_CTRL.roll					ball_rt_zeroToBend_CLMP.inputR	;
	# Rotate values to percentage mapping
		create_node			ball_rt_zeroToBendPct_RNG				setRange	;
		set_attribute		ball_rt_zeroToBendPct_RNG.minX			0
							ball_rt_zeroToBendPct_RNG.maxX			1	;
		connect_attribute	ball_rt_zeroToBend_CLMP.minR			ball_rt_zeroToBendPct_RNG.oldMinX
							ball_rt_zeroToBend_CLMP.maxR			ball_rt_zeroToBendPct_RNG.oldMaxX
							ball_rt_zeroToBend_CLMP.inputR			ball_rt_zeroToBendPct_RNG.valueX	;
	# Invert percentage
		create_node			ball_rt_invertPcg_SUB					plusMinusAverage	;
		set_attribute		ball_rt_invertPcg_SUB.input1D[0]		1
							ball_rt_invertPcg_SUB.input1D[1]		0	;
		connect_attribute	toe_rt_bendToStraightPct_RNG.outValueX	ball_rt_invertPcg_SUB.input1D[1]	;
		set_attribute		ball_rt_invertPcg_SUB.operation			2	;
	# Roll multiplier
		create_node			ball_rt_rollMultiplier_MUL				multiplyDivide	;
		connect_attribute	ball_rt_zeroToBendPct_RNG.outValueX		ball_rt_rollMultiplier_MUL.input1X
							ball_rt_invertPcg_SUB.output1D			ball_rt_rollMultiplier_MUL.input2X	;
	# Multiply percentage
		create_node			ball_rt_roll_MUL						multiplyDivide	;
		connect_attribute	ball_rt_rollMultiplier_MUL.outputX		ball_rt_roll_MUL.input1X
							ik_foot_rt_CTRL.roll					ball_rt_roll_MUL.input2X
							ball_rt_roll_MUL.outputX				ball_rt_LOC.rotateX	;


#############################################################################
#### [ FOOT ] Foot Controls
#############################################################################

# Update locators: INNER_FOOT_LT_LOC, OUTER_FOOT_LT_LOC
	parent					heel_lt_LOC										[outer_foot_lt_LOC]
							outer_foot_lt_LOC								[inner_foot_lt_LOC]
							inner_foot_lt_LOC								[toe_lt_LOC, toe_lt_HDL]	;

# Add TILT attribute to IK_FOOT_LT_CTRL
	# Add TILT attribute
		add_attribute		ik_foot_lt_CTRL			tilt					float defaultValue=0 keyable	;
	# Set driven keys for foot locators' rotation
		set_driven_key		ik_foot_lt_CTRL.tilt	  0		  0				[inner_foot_lt_LOC]				[rotateY]	
							ik_foot_lt_CTRL.tilt	  0		  0				[outer_foot_lt_LOC]				[rotateY]	
							ik_foot_lt_CTRL.tilt	-90		-90				[inner_foot_lt_LOC]				[rotateY]	
							ik_foot_lt_CTRL.tilt	 90		 90				[outer_foot_lt_LOC]				[rotateY]	;

# Add LEAN and TOE-SPIN attributes to IK_FOOT_LT_CTRL
	# Add LEAN and TOE-SPIN attributes
		add_attribute		ik_foot_lt_CTRL			lean					float defaultValue=0 keyable
							ik_foot_lt_CTRL			toeSpin					float defaultValue=0 keyable	;
	# Make LEAN and TOE-SPIN attributes to drive BALL_LOC and TOE_LOC rotate Y and Z respectively
		connect_attribute	ik_foot_lt_CTRL.lean							ball_lt_LOC.rotateY
							ik_foot_lt_CTRL.toeSpin							toe_lt_LOC.rotateZ	;
	# Additive inverse for TOE-SPIN
		create_node			additiveInverse_toeSpin_lt_MUL					multiplyDivide	;
		set_attribute		additiveInverse_toeSpin_lt_MUL.input1X			-1	;
		connect_attribute	ik_foot_lt_CTRL.toeSpin							additiveInverse_toeSpin_lt_MUL.input2X
							additiveInverse_toeSpin_lt_MUL.outputX			toe_lt_LOC.rotateZ				force	;
		set_attribute		additiveInverse_toeSpin_lt_MUL.operation		1	;

# Add TOE-WIGGLE attribute to IK_FOOT_LT_CTRL
	# Add TOE-WIGGLE attribute
		add_attribute		ik_foot_lt_CTRL			toeWiggle				float defaultValue=0 keyable	;
		create_group		toeWiggle_lt_GRP	;
		move				toeWiggle_lt_GRP		 0.0	 0.0	0.0		[rotatePivot, scalePivot]		relative_to=ball_lt	;							
		parent				toeWiggle_lt_GRP								[toe_lt_HDL]
							toe_lt_LOC										[toeWiggle_lt_GRP]	;
	# Make TOE-WIGGLE attribute to drive TOE-WIGGLE_LT_GRP rotate X
		connect_attribute	ik_foot_lt_CTRL.toeWiggle						toeWiggle_lt_GRP.rotateX	;


# RIGHT =====================================================================

# Update locators: INNER_FOOT_RT_LOC, OUTER_FOOT_RT_LOC
	parent					heel_rt_LOC										[outer_foot_rt_LOC]
							outer_foot_rt_LOC								[inner_foot_rt_LOC]
							inner_foot_rt_LOC								[toe_rt_LOC, toe_rt_HDL]	;

# Add TILT attribute to IK_FOOT_RT_CTRL
	# Add TILT attribute
		add_attribute		ik_foot_rt_CTRL			tilt					float defaultValue=0 keyable	;
	# Set driven keys for foot locators' rotation
		set_driven_key		ik_foot_rt_CTRL.tilt	  0		  0				[inner_foot_rt_LOC]				[rotateY]	
							ik_foot_rt_CTRL.tilt	  0		  0				[outer_foot_rt_LOC]				[rotateY]	
							ik_foot_rt_CTRL.tilt	-90		 90				[inner_foot_rt_LOC]				[rotateY]	
							ik_foot_rt_CTRL.tilt	 90		-90				[outer_foot_rt_LOC]				[rotateY]	;

# Add LEAN and TOE-SPIN attributes to IK_FOOT_RT_CTRL
	# Add LEAN and TOE-SPIN attributes
		add_attribute		ik_foot_rt_CTRL			lean					float defaultValue=0 keyable
							ik_foot_rt_CTRL			toeSpin					float defaultValue=0 keyable	;
	# Make LEAN and TOE-SPIN attributes to drive BALL_LOC and TOE_LOC rotate Y and Z respectively
		connect_attribute	ik_foot_rt_CTRL.lean							ball_rt_LOC.rotateY
							ik_foot_rt_CTRL.toeSpin							toe_rt_LOC.rotateZ	;
	# Additive inverse for LEAN
		create_node			additiveInverse_lean_rt_MUL						multiplyDivide	;
		set_attribute		additiveInverse_lean_rt_MUL.input1X				-1	;
		connect_attribute	ik_foot_rt_CTRL.lean							additiveInverse_lean_rt_MUL.input2X
							additiveInverse_lean_rt_MUL.outputX				ball_rt_LOC.rotateY				force	;
		set_attribute		additiveInverse_lean_rt_MUL.operation			1	;

# Add TOE-WIGGLE attribute to IK_FOOT_RT_CTRL
	# Add TOE-WIGGLE attribute
		add_attribute		ik_foot_rt_CTRL			toeWiggle				float defaultValue=0 keyable	;
		create_group		toeWiggle_rt_GRP	;
		move				toeWiggle_rt_GRP		 0.0	 0.0	0.0		[rotatePivot, scalePivot]		relative_to=ball_rt	;							
		parent				toeWiggle_rt_GRP								[toe_rt_HDL]
							toe_rt_LOC										[toeWiggle_rt_GRP]	;
	# Make TOE-WIGGLE attribute to drive TOE-WIGGLE_RT_GRP rotate X
		connect_attribute	ik_foot_rt_CTRL.toeWiggle						toeWiggle_rt_GRP.rotateX	;


#############################################################################
#### [ FOOT ] Lock And Hide Control Channels
#############################################################################

# Hide objects
	set_attribute		heel_lt_LOC.visibility			0
						outer_foot_lt_LOC.visibility	0
						inner_foot_lt_LOC.visibility	0
						toe_lt_LOC.visibility			0
						ball_lt_LOC.visibility			0
	;


# RIGHT =====================================================================

# Hide objects
	set_attribute		heel_rt_LOC.visibility			0
						outer_foot_rt_LOC.visibility	0
						inner_foot_rt_LOC.visibility	0
						toe_rt_LOC.visibility			0
						ball_rt_LOC.visibility			0
	;


#############################################################################
#### [ ARM ] Setup
#############################################################################

# Create RESULT joint chain based on SKELETON joint chain
	create_joint		result_upperarm_lt		0.0		0.0		0.0		relative_to=upperarm_lt
						result_lowerarm_lt		0.0		0.0		0.0		relative_to=lowerarm_lt
						result_hand_lt			0.0		0.0		0.0		relative_to=hand_lt
						result_hand_end_lt		0.0		0.0		0.0		relative_to=hand_end_lt
	; #1todo: adjust this if we want to remove hand_end_lt

# Create RESULT TWIST joint chain based on SKELETON joint chain
	create_joint		result_upperarm_twist_base_lt	0.0		0.0		0.0		relative_to=upperarm_lt
						result_upperarm_twist_01_lt		0.0		0.0		0.0		relative_to=upperarm_twist_01_lt
						result_upperarm_twist_02_lt		0.0		0.0		0.0		relative_to=upperarm_twist_02_lt
						result_upperarm_twist_03_lt		0.0		0.0		0.0		relative_to=upperarm_twist_03_lt
						result_upperarm_twist_04_lt		0.0		0.0		0.0		relative_to=lowerarm_lt	;
	create_joint		result_lowerarm_twist_base_lt	0.0		0.0		0.0		relative_to=lowerarm_lt
						result_lowerarm_twist_01_lt		0.0		0.0		0.0		relative_to=lowerarm_twist_01_lt
						result_lowerarm_twist_02_lt		0.0		0.0		0.0		relative_to=lowerarm_twist_02_lt
						result_lowerarm_twist_03_lt		0.0		0.0		0.0		relative_to=lowerarm_twist_03_lt
						result_lowerarm_twist_04_lt		0.0		0.0		0.0		relative_to=hand_lt	;
	#1todo: (above) queued: do this if something not works.. recreate above as a single joint chain, include hand_lt and hand_end_lt, unparent lowerarm, and delete hand_lt

# Change RESULT joint rotation orders => [xyz]
	set_attribute		result_upperarm_lt.rotateOrder					0	# [xyz]
						result_upperarm_twist_base_lt.rotateOrder		0
						result_upperarm_twist_01_lt.rotateOrder			0
						result_upperarm_twist_02_lt.rotateOrder			0
						result_upperarm_twist_03_lt.rotateOrder			0
						result_upperarm_twist_04_lt.rotateOrder			0
						result_lowerarm_lt.rotateOrder					0
						result_lowerarm_twist_base_lt.rotateOrder		0
						result_lowerarm_twist_01_lt.rotateOrder			0
						result_lowerarm_twist_02_lt.rotateOrder			0
						result_lowerarm_twist_03_lt.rotateOrder			0
						result_lowerarm_twist_04_lt.rotateOrder			1
						result_hand_lt.rotateOrder						1	# [yzx] # todo: verify with maya's tutorial
	; # todo - bookmark - if we change the roateOrder of RESULT, should we also change the DRIVER and SKELETON's?

# Make RESULT joint chain to drive translate, rotate and scale attributes of DRIVER joint chain #1todo: recheck this
	parent_constraint		driver_upperarm_lt							result_upperarm_twist_base_lt
							driver_upperarm_twist_01_lt					result_upperarm_twist_01_lt
							driver_upperarm_twist_02_lt					result_upperarm_twist_02_lt
							driver_upperarm_twist_03_lt					result_upperarm_twist_03_lt
							driver_lowerarm_lt							result_lowerarm_twist_base_lt
							driver_lowerarm_twist_01_lt					result_lowerarm_twist_01_lt
							driver_lowerarm_twist_02_lt					result_lowerarm_twist_02_lt
							driver_lowerarm_twist_03_lt					result_lowerarm_twist_03_lt	;
	connect_attribute		result_upperarm_twist_base_lt.scale			driver_upperarm_lt.scale
							result_upperarm_twist_01_lt.scale			driver_upperarm_twist_01_lt.scale
							result_upperarm_twist_02_lt.scale			driver_upperarm_twist_02_lt.scale
							result_upperarm_twist_03_lt.scale			driver_upperarm_twist_03_lt.scale
							result_lowerarm_twist_base_lt.scale			driver_lowerarm_lt.scale
							result_lowerarm_twist_01_lt.scale			driver_lowerarm_twist_01_lt.scale
							result_lowerarm_twist_02_lt.scale			driver_lowerarm_twist_02_lt.scale
							result_lowerarm_twist_03_lt.scale			driver_lowerarm_twist_03_lt.scale	;

# Create control: ARM_SETTINGS_LT_CTRL
	create_circle			arm_settings_lt_CTRL		0.0		0.0		0.0			radius=4	;
	create_curve			arm_settings_lt_CTRL1		[0, 3, 0, 0, -3, 0]			degree=1
							arm_settings_lt_CTRL2		[3, 0, 0, -3, 0, 0]			degree=1
							arm_settings_lt_CTRL3		[0, -4, 0, 0, -7, 0]		degree=1	;
	parent					arm_settings_lt_CTRL		[arm_settings_lt_CTRL1Shape, arm_settings_lt_CTRL2Shape, arm_settings_lt_CTRL3Shape]		relative shape	;
	delete												[arm_settings_lt_CTRL1, arm_settings_lt_CTRL2, arm_settings_lt_CTRL3]	;
	move					arm_settings_lt_CTRL		0.0		 9.0	0.0			relative_to=hand_lt	;
	rotate					arm_settings_lt_CTRL		0.0		90.0	0.0			euler	;
	freeze					arm_settings_lt_CTRL	;
	parent_constraint		arm_settings_lt_CTRL		result_hand_lt	;
	parent					rig_settings				[arm_settings_lt_CTRL]	;

# Create control: IK_WRIST_LT_CTRL
	create_circle			ik_wrist_lt_CTRL			0.0		 0.0	0.0			radius=4	;
	move					ik_wrist_lt_CTRL			0.0		 0.0	0.0			relative_to=hand_lt	;
	rotate					ik_wrist_lt_CTRL			0.0		90.0	0.0			euler	;
	freeze					ik_wrist_lt_CTRL	;
	set_attribute			ik_wrist_lt_CTRL.rotateOrder				4	;		# Change rotation order => [yxz]

# Add members to their respective layers
	edit_layer				Skeleton					[result_upperarm_lt, result_upperarm_twist_base_lt, result_lowerarm_twist_base_lt]
							Controls_IK					[ik_wrist_lt_CTRL]
							Controls_Settings			[arm_settings_lt_CTRL]
	;


# RIGHT =====================================================================

# Mirror left joint chains to right
	mirror_joint		result_upperarm_lt
	;

# Create RESULT TWIST joint chain based on SKELETON joint chain
	create_joint		result_upperarm_twist_base_rt	0.0		0.0		0.0		relative_to=upperarm_rt
						result_upperarm_twist_01_rt		0.0		0.0		0.0		relative_to=upperarm_twist_01_rt
						result_upperarm_twist_02_rt		0.0		0.0		0.0		relative_to=upperarm_twist_02_rt
						result_upperarm_twist_03_rt		0.0		0.0		0.0		relative_to=upperarm_twist_03_rt
						result_upperarm_twist_04_rt		0.0		0.0		0.0		relative_to=lowerarm_rt	;
	create_joint		result_lowerarm_twist_base_rt	0.0		0.0		0.0		relative_to=lowerarm_rt
						result_lowerarm_twist_01_rt		0.0		0.0		0.0		relative_to=lowerarm_twist_01_rt
						result_lowerarm_twist_02_rt		0.0		0.0		0.0		relative_to=lowerarm_twist_02_rt
						result_lowerarm_twist_03_rt		0.0		0.0		0.0		relative_to=lowerarm_twist_03_rt
						result_lowerarm_twist_04_rt		0.0		0.0		0.0		relative_to=hand_rt	;
	#1todo: (above) queued: do this if something not works.. recreate above as a single joint chain, include hand_rt and hand_end_rt, unparent lowerarm, and delete hand_rt

# Change RESULT joint rotation orders => [xyz]
	set_attribute		result_upperarm_rt.rotateOrder					0	# [xyz]
						result_upperarm_twist_base_rt.rotateOrder		0
						result_upperarm_twist_01_rt.rotateOrder			0
						result_upperarm_twist_02_rt.rotateOrder			0
						result_upperarm_twist_03_rt.rotateOrder			0
						result_upperarm_twist_04_rt.rotateOrder			0
						result_lowerarm_rt.rotateOrder					0
						result_lowerarm_twist_base_rt.rotateOrder		0
						result_lowerarm_twist_01_rt.rotateOrder			0
						result_lowerarm_twist_02_rt.rotateOrder			0
						result_lowerarm_twist_03_rt.rotateOrder			0
						result_lowerarm_twist_04_rt.rotateOrder			1
						result_hand_rt.rotateOrder						1	# [yzx] # todo: verify with maya's tutorial
	; # todo - bookmark - if we change the roateOrder of RESULT, should we also change the DRIVER and SKELETON's?

# Make RESULT joint chain to drive translate, rotate and scale attributes of DRIVER joint chain #1todo: recheck this
	parent_constraint		driver_upperarm_rt							result_upperarm_twist_base_rt
							driver_upperarm_twist_01_rt					result_upperarm_twist_01_rt
							driver_upperarm_twist_02_rt					result_upperarm_twist_02_rt
							driver_upperarm_twist_03_rt					result_upperarm_twist_03_rt
							driver_lowerarm_rt							result_lowerarm_twist_base_rt
							driver_lowerarm_twist_01_rt					result_lowerarm_twist_01_rt
							driver_lowerarm_twist_02_rt					result_lowerarm_twist_02_rt
							driver_lowerarm_twist_03_rt					result_lowerarm_twist_03_rt	;
	connect_attribute		result_upperarm_twist_base_rt.scale			driver_upperarm_rt.scale
							result_upperarm_twist_01_rt.scale			driver_upperarm_twist_01_rt.scale
							result_upperarm_twist_02_rt.scale			driver_upperarm_twist_02_rt.scale
							result_upperarm_twist_03_rt.scale			driver_upperarm_twist_03_rt.scale
							result_lowerarm_twist_base_rt.scale			driver_lowerarm_rt.scale
							result_lowerarm_twist_01_rt.scale			driver_lowerarm_twist_01_rt.scale
							result_lowerarm_twist_02_rt.scale			driver_lowerarm_twist_02_rt.scale
							result_lowerarm_twist_03_rt.scale			driver_lowerarm_twist_03_rt.scale	;

# Create control: ARM_SETTINGS_RT_CTRL
	create_circle			arm_settings_rt_CTRL		0.0		0.0		0.0			radius=4	;
	create_curve			arm_settings_rt_CTRL1		[0, 3, 0, 0, -3, 0]			degree=1
							arm_settings_rt_CTRL2		[3, 0, 0, -3, 0, 0]			degree=1
							arm_settings_rt_CTRL3		[0, -4, 0, 0, -7, 0]		degree=1	;
	parent					arm_settings_rt_CTRL		[arm_settings_rt_CTRL1Shape, arm_settings_rt_CTRL2Shape, arm_settings_rt_CTRL3Shape]		relative shape	;
	delete												[arm_settings_rt_CTRL1, arm_settings_rt_CTRL2, arm_settings_rt_CTRL3]	;
	move					arm_settings_rt_CTRL		0.0		 9.0	0.0			relative_to=hand_rt	;
	rotate					arm_settings_rt_CTRL		0.0		90.0	0.0			euler	;
	freeze					arm_settings_rt_CTRL	;
	parent_constraint		arm_settings_rt_CTRL		result_hand_rt	;
	parent					rig_settings				[arm_settings_rt_CTRL]	;

# Create control: IK_WRIST_RT_CTRL
	create_circle			ik_wrist_rt_CTRL			0.0		 0.0	0.0			radius=4	;
	move					ik_wrist_rt_CTRL			0.0		 0.0	0.0			relative_to=hand_rt	;
	rotate					ik_wrist_rt_CTRL			0.0		90.0	0.0			euler	;
	freeze					ik_wrist_rt_CTRL	;
	set_attribute			ik_wrist_rt_CTRL.rotateOrder				4	;		# Change rotation order => [yxz]

# Add members to their respective layers
	edit_layer				Skeleton					[result_upperarm_rt, result_upperarm_twist_base_rt, result_lowerarm_twist_base_rt]
							Controls_IK					[ik_wrist_rt_CTRL]
							Controls_Settings			[arm_settings_rt_CTRL]
	;


#############################################################################
#### [ ARM ] IK and FK Setup
#############################################################################

# Create IK and FK joint chains based on RESULT joint chain
	duplicate				ik_upperarm_lt					result_upperarm_lt
							fk_upperarm_lt					result_upperarm_lt		;
	find_replace			ik_upperarm_lt					result_ ik_
							fk_upperarm_lt					result_ fk_	;

# Make IK and FK joint chain to drive translate attribute of RESULT joint chain
	create_node				upperarm_lt_ikFkTranslate_BLND			blendColors
							lowerarm_lt_ikFkTranslate_BLND			blendColors
							hand_lt_ikFkTranslate_BLND				blendColors	;
	connect_attribute		ik_upperarm_lt.translate				upperarm_lt_ikFkTranslate_BLND.color2
							ik_lowerarm_lt.translate				lowerarm_lt_ikFkTranslate_BLND.color2
							ik_hand_lt.translate					hand_lt_ikFkTranslate_BLND.color2
							fk_upperarm_lt.translate				upperarm_lt_ikFkTranslate_BLND.color1
							fk_lowerarm_lt.translate				lowerarm_lt_ikFkTranslate_BLND.color1
							fk_hand_lt.translate					hand_lt_ikFkTranslate_BLND.color1
							upperarm_lt_ikFkTranslate_BLND.output	result_upperarm_lt.translate
							lowerarm_lt_ikFkTranslate_BLND.output	result_lowerarm_lt.translate
							hand_lt_ikFkTranslate_BLND.output		result_hand_lt.translate	;

# Make IK and FK joint chain to drive rotate attribute of RESULT joint chain
	create_node				upperarm_lt_ikFkRotate_BLND				blendColors
							lowerarm_lt_ikFkRotate_BLND				blendColors
							hand_lt_ikFkRotate_BLND					blendColors	;
	connect_attribute		ik_upperarm_lt.rotate					upperarm_lt_ikFkRotate_BLND.color2
							ik_lowerarm_lt.rotate					lowerarm_lt_ikFkRotate_BLND.color2
							ik_hand_lt.rotate						hand_lt_ikFkRotate_BLND.color2
							fk_upperarm_lt.rotate					upperarm_lt_ikFkRotate_BLND.color1
							fk_lowerarm_lt.rotate					lowerarm_lt_ikFkRotate_BLND.color1
							fk_hand_lt.rotate						hand_lt_ikFkRotate_BLND.color1
							upperarm_lt_ikFkRotate_BLND.output		result_upperarm_lt.rotate
							lowerarm_lt_ikFkRotate_BLND.output		result_lowerarm_lt.rotate
							hand_lt_ikFkRotate_BLND.output			result_hand_lt.rotate	;

# Add IK-FK-BLEND attribute to ARM_SETTINGS_LT_CTRL
	add_attribute			arm_settings_lt_CTRL					ikFkBlend float niceName="IK / FK Blend" minValue=0 maxValue=1 defaultValue=0 keyable	;
	connect_attribute		arm_settings_lt_CTRL.ikFkBlend			[upperarm_lt_ikFkTranslate_BLND.blender, lowerarm_lt_ikFkTranslate_BLND.blender, hand_lt_ikFkTranslate_BLND.blender]
							arm_settings_lt_CTRL.ikFkBlend			[upperarm_lt_ikFkRotate_BLND.blender, lowerarm_lt_ikFkRotate_BLND.blender, hand_lt_ikFkRotate_BLND.blender]	;

# Add members to layer: SKELETON
	edit_layer				Skeleton								[ik_upperarm_lt]
	;


# RIGHT =====================================================================

# Create IK and FK joint chains based on RESULT joint chain
	duplicate				ik_upperarm_rt					result_upperarm_rt
							fk_upperarm_rt					result_upperarm_rt		;
	find_replace			ik_upperarm_rt					result_ ik_
							fk_upperarm_rt					result_ fk_	;

# Make IK and FK joint chain to drive translate attribute of RESULT joint chain
	create_node				upperarm_rt_ikFkTranslate_BLND			blendColors
							lowerarm_rt_ikFkTranslate_BLND			blendColors
							hand_rt_ikFkTranslate_BLND				blendColors	;
	connect_attribute		ik_upperarm_rt.translate				upperarm_rt_ikFkTranslate_BLND.color2
							ik_lowerarm_rt.translate				lowerarm_rt_ikFkTranslate_BLND.color2
							ik_hand_rt.translate					hand_rt_ikFkTranslate_BLND.color2
							fk_upperarm_rt.translate				upperarm_rt_ikFkTranslate_BLND.color1
							fk_lowerarm_rt.translate				lowerarm_rt_ikFkTranslate_BLND.color1
							fk_hand_rt.translate					hand_rt_ikFkTranslate_BLND.color1
							upperarm_rt_ikFkTranslate_BLND.output	result_upperarm_rt.translate
							lowerarm_rt_ikFkTranslate_BLND.output	result_lowerarm_rt.translate
							hand_rt_ikFkTranslate_BLND.output		result_hand_rt.translate	;

# Make IK and FK joint chain to drive rotate attribute of RESULT joint chain
	create_node				upperarm_rt_ikFkRotate_BLND				blendColors
							lowerarm_rt_ikFkRotate_BLND				blendColors
							hand_rt_ikFkRotate_BLND					blendColors	;
	connect_attribute		ik_upperarm_rt.rotate					upperarm_rt_ikFkRotate_BLND.color2
							ik_lowerarm_rt.rotate					lowerarm_rt_ikFkRotate_BLND.color2
							ik_hand_rt.rotate						hand_rt_ikFkRotate_BLND.color2
							fk_upperarm_rt.rotate					upperarm_rt_ikFkRotate_BLND.color1
							fk_lowerarm_rt.rotate					lowerarm_rt_ikFkRotate_BLND.color1
							fk_hand_rt.rotate						hand_rt_ikFkRotate_BLND.color1
							upperarm_rt_ikFkRotate_BLND.output		result_upperarm_rt.rotate
							lowerarm_rt_ikFkRotate_BLND.output		result_lowerarm_rt.rotate
							hand_rt_ikFkRotate_BLND.output			result_hand_rt.rotate	;

# Add IK-FK-BLEND attribute to ARM_SETTINGS_RT_CTRL
	add_attribute			arm_settings_rt_CTRL					ikFkBlend float niceName="IK / FK Blend" minValue=0 maxValue=1 defaultValue=0 keyable	;
	connect_attribute		arm_settings_rt_CTRL.ikFkBlend			[upperarm_rt_ikFkTranslate_BLND.blender, lowerarm_rt_ikFkTranslate_BLND.blender, hand_rt_ikFkTranslate_BLND.blender]
							arm_settings_rt_CTRL.ikFkBlend			[upperarm_rt_ikFkRotate_BLND.blender, lowerarm_rt_ikFkRotate_BLND.blender, hand_rt_ikFkRotate_BLND.blender]	;

# Add members to layer: SKELETON
	edit_layer				Skeleton								[ik_upperarm_rt]
	;


#############################################################################
#### [ ARM ] Setup ARM Twist Controls
#############################################################################

# Create ARM curves
	xform_var			_xf_upperarm				upperarm_lt		translation worldSpace
						_xf_lowerarm				lowerarm_lt		translation worldSpace
						_xf_hand					hand_lt			translation worldSpace	;
	create_curve		upperarmLowerarm_lt_CRV		[_xf_upperarm.x, _xf_upperarm.y, _xf_upperarm.z, _xf_lowerarm.x, _xf_lowerarm.y, _xf_lowerarm.z]		degree=1
						lowerarmHand_lt_CRV			[_xf_lowerarm.x, _xf_lowerarm.y, _xf_lowerarm.z, _xf_hand.x, _xf_hand.y, _xf_hand.z]					degree=1	;
	clear_vars										[_xf_upperarm, _xf_lowerarm, _xf_hand]	;
	set_attribute		upperarmLowerarm_lt_CRV.inheritsTransform	0		# TODO: messes up the joint placement
						lowerarmHand_lt_CRV.inheritsTransform		0	;

# Create ARM IK spline handles
	ik_handle			upperarmLowerarm_lt_HDL		result_upperarm_twist_base_lt		result_upperarm_twist_04_lt		curve="upperarmLowerarm_lt_CRV"
						lowerarmHand_lt_HDL			result_lowerarm_twist_base_lt		result_lowerarm_twist_04_lt		curve="lowerarmHand_lt_CRV"	;
	rename				effector1					upperarmLowerarm_lt_EFF
						effector2					lowerarmHand_lt_EFF	;

# Create ARM BIND joints
	duplicate			ik_arm_lt_bind_start		result_upperarm_twist_base_lt		parentOnly
						ik_arm_lt_bind_mid			result_upperarm_twist_04_lt			parentOnly
						ik_arm_lt_bind_end			result_lowerarm_twist_04_lt			parentOnly	;
	parent				ik_arm_lt_bind_mid			world
						ik_arm_lt_bind_end			world	;

# Add weight influence on IK JOINTS and SPINE_CRV
	bind_skin			upperarmLowerarm_lt_SKN		[ik_arm_lt_bind_start, ik_arm_lt_bind_mid, upperarmLowerarm_lt_CRV]		bindMethod=0 !heatmapFalloff !skinMethod
						lowerarmHand_lt_SKN			[ik_arm_lt_bind_mid, ik_arm_lt_bind_end, lowerarmHand_lt_CRV]			bindMethod=0 !heatmapFalloff !skinMethod
	;

# Setup ARM IK twist controls
	# UPPERARM-LOWERARM_LT_HDL
		set_attribute		upperarmLowerarm_lt_HDL.dTwistControlEnable			1
							upperarmLowerarm_lt_HDL.dWorldUpType				4						# Object Rotation Up (Start/End)
							upperarmLowerarm_lt_HDL.dWorldUpAxis				3						# Positive Z
							upperarmLowerarm_lt_HDL.dWorldUpVectorX				0
							upperarmLowerarm_lt_HDL.dWorldUpVectorY				0
							upperarmLowerarm_lt_HDL.dWorldUpVectorZ				1						# WorldUpVector: 0, 0, 1
							upperarmLowerarm_lt_HDL.dWorldUpVectorEndX			0
							upperarmLowerarm_lt_HDL.dWorldUpVectorEndY			0
							upperarmLowerarm_lt_HDL.dWorldUpVectorEndZ			1	;					# WorldUpVectorEnd: 0, 0, 1
		connect_attribute	ik_arm_lt_bind_start.worldMatrix[0]					upperarmLowerarm_lt_HDL.dWorldUpMatrix
							ik_arm_lt_bind_mid.worldMatrix[0]					upperarmLowerarm_lt_HDL.dWorldUpMatrixEnd	;
	# LOWERARM-HAND_LT_HDL
		set_attribute		lowerarmHand_lt_HDL.dTwistControlEnable				1
							lowerarmHand_lt_HDL.dWorldUpType					4						# Object Rotation Up (Start/End)
							lowerarmHand_lt_HDL.dWorldUpAxis					3						# Positive Z
							lowerarmHand_lt_HDL.dWorldUpVectorX					0
							lowerarmHand_lt_HDL.dWorldUpVectorY					0
							lowerarmHand_lt_HDL.dWorldUpVectorZ					1						# WorldUpVector: 0, 0, 1
							lowerarmHand_lt_HDL.dWorldUpVectorEndX				0
							lowerarmHand_lt_HDL.dWorldUpVectorEndY				0
							lowerarmHand_lt_HDL.dWorldUpVectorEndZ				1	;					# WorldUpVectorEnd: 0, 0, 1
		connect_attribute	ik_arm_lt_bind_mid.worldMatrix[0]					lowerarmHand_lt_HDL.dWorldUpMatrix
							ik_arm_lt_bind_end.worldMatrix[0]					lowerarmHand_lt_HDL.dWorldUpMatrixEnd	;

# Parentconst #TODO: cyclic-issue, fix or remove
	parent_constraint		ik_arm_lt_bind_start								[result_upperarm_lt] #1todo verify: pointconstraint was used instead DOUBLE CHECK!
							ik_arm_lt_bind_mid									[result_lowerarm_lt]
							ik_arm_lt_bind_end									[result_hand_lt]	; #1todo verify: should be *bind_JNT_parentConstraint1 movie @ 12:07 of part 22

# Create group: ARM_LT_TWIST_GRP #TODO removed lowerarmHand_lt_CRV due to diff hierarchy
	create_group			arm_lt_twist_GRP	;
	parent					arm_lt_twist_GRP									[upperarmLowerarm_lt_CRV, lowerarmHand_lt_CRV, upperarmLowerarm_lt_HDL, lowerarmHand_lt_HDL]	;


# Add members to their respective layers
	edit_layer				Skeleton											[ik_arm_lt_bind_start, ik_arm_lt_bind_mid, ik_arm_lt_bind_end]
	;


# RIGHT =====================================================================


# Create ARM curves
	xform_var			_xf_upperarm				upperarm_rt		translation worldSpace
						_xf_lowerarm				lowerarm_rt		translation worldSpace
						_xf_hand					hand_rt			translation worldSpace	;
	create_curve		upperarmLowerarm_rt_CRV		[_xf_upperarm.x, _xf_upperarm.y, _xf_upperarm.z, _xf_lowerarm.x, _xf_lowerarm.y, _xf_lowerarm.z]		degree=1
						lowerarmHand_rt_CRV			[_xf_lowerarm.x, _xf_lowerarm.y, _xf_lowerarm.z, _xf_hand.x, _xf_hand.y, _xf_hand.z]					degree=1	;
	clear_vars										[_xf_upperarm, _xf_lowerarm, _xf_hand]	;
	set_attribute		upperarmLowerarm_rt_CRV.inheritsTransform	0		# TODO: messes up the joint placement
						lowerarmHand_rt_CRV.inheritsTransform		0	;

# Create ARM IK spline handles
	ik_handle			upperarmLowerarm_rt_HDL		result_upperarm_twist_base_rt		result_upperarm_twist_04_rt		curve="upperarmLowerarm_rt_CRV"
						lowerarmHand_rt_HDL			result_lowerarm_twist_base_rt		result_lowerarm_twist_04_rt		curve="lowerarmHand_rt_CRV"	;
	rename				effector1					upperarmLowerarm_rt_EFF
						effector2					lowerarmHand_rt_EFF	;

# Create ARM BIND joints
	duplicate			ik_arm_rt_bind_start		result_upperarm_twist_base_rt		parentOnly
						ik_arm_rt_bind_mid			result_upperarm_twist_04_rt			parentOnly
						ik_arm_rt_bind_end			result_lowerarm_twist_04_rt			parentOnly	;
	parent				ik_arm_rt_bind_mid			world
						ik_arm_rt_bind_end			world	;

# Add weight influence on IK JOINTS and SPINE_CRV
	bind_skin			upperarmLowerarm_rt_SKN		[ik_arm_rt_bind_start, ik_arm_rt_bind_mid, upperarmLowerarm_rt_CRV]		bindMethod=0 !heatmapFalloff !skinMethod
						lowerarmHand_rt_SKN			[ik_arm_rt_bind_mid, ik_arm_rt_bind_end, lowerarmHand_rt_CRV]			bindMethod=0 !heatmapFalloff !skinMethod
	;

# Setup ARM IK twist controls
	# UPPERARM-LOWERARM_RT_HDL
		set_attribute		upperarmLowerarm_rt_HDL.dTwistControlEnable			1
							upperarmLowerarm_rt_HDL.dWorldUpType				4						# Object Rotation Up (Start/End)
							upperarmLowerarm_rt_HDL.dWorldUpAxis				3						# Positive Z
							upperarmLowerarm_rt_HDL.dWorldUpVectorX				0
							upperarmLowerarm_rt_HDL.dWorldUpVectorY				0
							upperarmLowerarm_rt_HDL.dWorldUpVectorZ				1						# WorldUpVector: 0, 0, 1
							upperarmLowerarm_rt_HDL.dWorldUpVectorEndX			0
							upperarmLowerarm_rt_HDL.dWorldUpVectorEndY			0
							upperarmLowerarm_rt_HDL.dWorldUpVectorEndZ			1	;					# WorldUpVectorEnd: 0, 0, 1
		connect_attribute	ik_arm_rt_bind_start.worldMatrix[0]					upperarmLowerarm_rt_HDL.dWorldUpMatrix
							ik_arm_rt_bind_mid.worldMatrix[0]					upperarmLowerarm_rt_HDL.dWorldUpMatrixEnd	;
	# LOWERARM-HAND_RT_HDL
		set_attribute		lowerarmHand_rt_HDL.dTwistControlEnable				1
							lowerarmHand_rt_HDL.dWorldUpType					4						# Object Rotation Up (Start/End)
							lowerarmHand_rt_HDL.dWorldUpAxis					3						# Positive Z
							lowerarmHand_rt_HDL.dWorldUpVectorX					0
							lowerarmHand_rt_HDL.dWorldUpVectorY					0
							lowerarmHand_rt_HDL.dWorldUpVectorZ					1						# WorldUpVector: 0, 0, 1
							lowerarmHand_rt_HDL.dWorldUpVectorEndX				0
							lowerarmHand_rt_HDL.dWorldUpVectorEndY				0
							lowerarmHand_rt_HDL.dWorldUpVectorEndZ				1	;					# WorldUpVectorEnd: 0, 0, 1
		connect_attribute	ik_arm_rt_bind_mid.worldMatrix[0]					lowerarmHand_rt_HDL.dWorldUpMatrix
							ik_arm_rt_bind_end.worldMatrix[0]					lowerarmHand_rt_HDL.dWorldUpMatrixEnd	;

# Parentconst #TODO: cyclic-issue, fix or remove
	parent_constraint		ik_arm_rt_bind_start								[result_upperarm_rt] #1todo verify: pointconstraint was used instead DOUBLE CHECK!
							ik_arm_rt_bind_mid									[result_lowerarm_rt]
							ik_arm_rt_bind_end									[result_hand_rt]	; #1todo verify: should be *bind_JNT_parentConstraint1 movie @ 12:07 of part 22

# Create group: ARM_RT_TWIST_GRP #TODO removed lowerarmHand_rt_CRV due to diff hierarchy
	create_group			arm_rt_twist_GRP	;
	parent					arm_rt_twist_GRP									[upperarmLowerarm_rt_CRV, lowerarmHand_rt_CRV, upperarmLowerarm_rt_HDL, lowerarmHand_rt_HDL]	;


# Add members to their respective layers
	edit_layer				Skeleton											[ik_arm_rt_bind_start, ik_arm_rt_bind_mid, ik_arm_rt_bind_end]
	;


#############################################################################
#### [ ARM ] IK Wrist Control and Stretch
#############################################################################

# Create IK spline handle: ARM_LT_HDL
	ik_handle			arm_lt_HDL			ik_upperarm_lt			ik_hand_lt			solver="ikRPsolver"	;
	rename				effector1			arm_lt_EFF	;
	parent				ik_wrist_lt_CTRL	[arm_lt_HDL]	;

# Create IK handle: HAND_LT_HDL
	ik_handle			hand_lt_HDL			ik_hand_lt				ik_hand_end_lt		solver="ikSCsolver"	;
	rename				effector1			hand_lt_EFF	;
	parent				ik_wrist_lt_CTRL	[hand_lt_HDL]	;

# Setup STRETCH joint length attributes
	# Create distance from UPPERARM_LT to HAND_LT
		create_distance			arm_lt_length							upperarm_lt		hand_lt	;
		parent					ik_wrist_lt_CTRL						[arm_lt_length_end_LOC]	;
	# Left ARM length
		set_driven_key			arm_lt_length_DISTShape.distance		{ik_lowerarm_lt.translateX}+{ik_hand_lt.translateX}			{ik_lowerarm_lt.translateX}			[ik_lowerarm_lt]		[translateX]
								arm_lt_length_DISTShape.distance		({ik_lowerarm_lt.translateX}+{ik_hand_lt.translateX})*2		{ik_lowerarm_lt.translateX}*2		[ik_lowerarm_lt]		[translateX]
								arm_lt_length_DISTShape.distance		{ik_lowerarm_lt.translateX}+{ik_hand_lt.translateX}			{ik_hand_lt.translateX}				[ik_hand_lt]			[translateX]
								arm_lt_length_DISTShape.distance		({ik_lowerarm_lt.translateX}+{ik_hand_lt.translateX})*2		{ik_hand_lt.translateX}*2			[ik_hand_lt]			[translateX]	;
		key_tangent				[translateX]							[ik_lowerarm_lt, ik_hand_lt]		inTangentType="spline" outTangentType="spline"	;
		set_infinity			[translateX]							[ik_lowerarm_lt, ik_hand_lt]		postInfinite="linear"	;
	# Normalize length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling) # todo: remove if not necessary / test later if this actually do something
		create_node				arm_lt_normalizeLength_DIV				multiplyDivide	;
		connect_attribute		arm_lt_length_DISTShape.distance		arm_lt_normalizeLength_DIV.input1X
								character_CTRL.scaleZ					arm_lt_normalizeLength_DIV.input2X	;
		set_attribute			arm_lt_normalizeLength_DIV.operation	2	;
		connect_attribute		arm_lt_normalizeLength_DIV.outputX		ik_lowerarm_lt_translateX.input	force
								arm_lt_normalizeLength_DIV.outputX		ik_hand_lt_translateX.input		force	;

# Add STRETCH attributes to IK_ARM_LT_CTRL
	# Add STRETCH attributes
		add_attribute			ik_wrist_lt_CTRL						stretch	float minValue=0 maxValue=1 defaultValue=0 keyable	;
	# Setup STRETCH blend nodes
		create_node				lowerarm_lt_stretch_BLND				blendColors
								hand_lt_stretch_BLND					blendColors	;
		connect_attribute		ik_lowerarm_lt_translateX.output		lowerarm_lt_stretch_BLND.color1R
								ik_hand_lt_translateX.output			hand_lt_stretch_BLND.color1R	;
		set_attribute			lowerarm_lt_stretch_BLND.color2R		{ik_lowerarm_lt.translateX}
								hand_lt_stretch_BLND.color2R			{ik_hand_lt.translateX}	;
		connect_attribute		lowerarm_lt_stretch_BLND.outputR		ik_lowerarm_lt.translateX		force
								hand_lt_stretch_BLND.outputR			ik_hand_lt.translateX			force
								ik_wrist_lt_CTRL.stretch				[lowerarm_lt_stretch_BLND.blender, hand_lt_stretch_BLND.blender] 	;

# Add members to layer: SKELETON
	edit_layer					Skeleton								[ik_lowerarm_lt]
	;


# RIGHT =====================================================================

# Create IK spline handle: ARM_RT_HDL
	ik_handle			arm_rt_HDL			ik_upperarm_rt			ik_hand_rt			solver="ikRPsolver"	;
	rename				effector1			arm_rt_EFF	;
	parent				ik_wrist_rt_CTRL	[arm_rt_HDL]	;

# Create IK handle: HAND_RT_HDL
	ik_handle			hand_rt_HDL			ik_hand_rt				ik_hand_end_rt		solver="ikSCsolver"	;
	rename				effector1			hand_rt_EFF	;
	parent				ik_wrist_rt_CTRL	[hand_rt_HDL]	;

# Setup STRETCH joint length attributes
	# Create distance from UPPERARM_RT to HAND_RT
		create_distance			arm_rt_length							upperarm_rt		hand_rt	;
		parent					ik_wrist_rt_CTRL						[arm_rt_length_end_LOC]	;
	# Left ARM length
		set_driven_key			arm_rt_length_DISTShape.distance		-1*({ik_lowerarm_rt.translateX}+{ik_hand_rt.translateX})		{ik_lowerarm_rt.translateX}			[ik_lowerarm_rt]		[translateX]
								arm_rt_length_DISTShape.distance		-1*({ik_lowerarm_rt.translateX}+{ik_hand_rt.translateX})*2		{ik_lowerarm_rt.translateX}*2		[ik_lowerarm_rt]		[translateX]
								arm_rt_length_DISTShape.distance		-1*({ik_lowerarm_rt.translateX}+{ik_hand_rt.translateX})		{ik_hand_rt.translateX}				[ik_hand_rt]			[translateX]
								arm_rt_length_DISTShape.distance		-1*({ik_lowerarm_rt.translateX}+{ik_hand_rt.translateX})*2		{ik_hand_rt.translateX}*2			[ik_hand_rt]			[translateX]	;
		key_tangent				[translateX]							[ik_lowerarm_rt, ik_hand_rt]		inTangentType="spline" outTangentType="spline"	;
		set_infinity			[translateX]							[ik_lowerarm_rt, ik_hand_rt]		postInfinite="linear"	;
	# Normalize length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling) # todo: remove if not necessary / test later if this actually do something
		create_node				arm_rt_normalizeLength_DIV				multiplyDivide	;
		connect_attribute		arm_rt_length_DISTShape.distance		arm_rt_normalizeLength_DIV.input1X
								character_CTRL.scaleZ					arm_rt_normalizeLength_DIV.input2X	;
		set_attribute			arm_rt_normalizeLength_DIV.operation	2	;
		connect_attribute		arm_rt_normalizeLength_DIV.outputX		ik_lowerarm_rt_translateX.input	force
								arm_rt_normalizeLength_DIV.outputX		ik_hand_rt_translateX.input		force	;

# Add STRETCH attributes to IK_ARM_RT_CTRL
	# Add STRETCH attributes
		add_attribute			ik_wrist_rt_CTRL						stretch	float minValue=0 maxValue=1 defaultValue=0 keyable	;
	# Setup STRETCH blend nodes
		create_node				lowerarm_rt_stretch_BLND				blendColors
								hand_rt_stretch_BLND					blendColors	;
		connect_attribute		ik_lowerarm_rt_translateX.output		lowerarm_rt_stretch_BLND.color1R
								ik_hand_rt_translateX.output			hand_rt_stretch_BLND.color1R	;
		set_attribute			lowerarm_rt_stretch_BLND.color2R		{ik_lowerarm_rt.translateX}
								hand_rt_stretch_BLND.color2R			{ik_hand_rt.translateX}	;
		connect_attribute		lowerarm_rt_stretch_BLND.outputR		ik_lowerarm_rt.translateX		force
								hand_rt_stretch_BLND.outputR			ik_hand_rt.translateX			force
								ik_wrist_rt_CTRL.stretch				[lowerarm_rt_stretch_BLND.blender, hand_rt_stretch_BLND.blender] 	;

# Add members to layer: SKELETON
	edit_layer					Skeleton								[ik_lowerarm_rt]
	;


#############################################################################
#### [ ARM ] IK Elbow Control and Snap
#############################################################################

# Create pole vector constraint: ELBOW_LT_PVC
	create_locator		elbow_lt_LOC	;
	move				elbow_lt_LOC		0.0		20.0	0.0		relative_to=lowerarm_lt	;
	xform_ref			elbow_lt_LOC								translation worldSpace	;
	pole_constraint		elbow_lt_PVC		elbow_lt_LOC			arm_lt_HDL	;

# Create control: IK_ELBOW_LT_CTRL
	create_curve		ik_elbow_lt_CTRL							[0.00, 4.24, 0.00, 4.24, 0.00, 0.00, 0.00, -4.24, 0.00, -4.24, 0.00, 0.00, 0.00, 4.24, 0.00, 0.00, 0.00, 7.07, 0.00, -4.24, 0.00, -4.24, 0.00, 0.00, 0.00, 0.00, 7.07, 4.24, 0.00, 0.00]	degree=1	;
	move				ik_elbow_lt_CTRL							  0.0	0.0		0.0			relative_to=elbow_lt_LOC	;
	rotate				ik_elbow_lt_CTRL							-90.0	0.0		0.0			euler	;
	freeze				ik_elbow_lt_CTRL	;
	parent				ik_elbow_lt_CTRL							[elbow_lt_LOC]	;

# Create distance from UPPERARM_LT to LOWERARM_LT and LOWERARM_LT to HAND_LT
	create_distance		upperarmLowerarm_lt_length					upperarm_lt					elbow_lt_LOC
						lowerarmHand_lt_length						elbow_lt_LOC				hand_lt	;
	parent				ik_elbow_lt_CTRL							[upperarmLowerarm_lt_length_end_LOC, lowerarmHand_lt_length_start_LOC]
						ik_wrist_lt_CTRL							[lowerarmHand_lt_length_end_LOC]	;

# Create blend between uniform and non-uniform scaling for IK_UPPERARM_LT length
	create_node			upperarm_lt_length_BLND								blendColors	;
	connect_attribute	upperarmLowerarm_lt_length_DISTShape.distance		upperarm_lt_length_BLND.color1R
						ik_lowerarm_lt_translateX.output					upperarm_lt_length_BLND.color2R
						upperarm_lt_length_BLND.outputR						lowerarm_lt_stretch_BLND.color1R			force	;

# Create blend between uniform and non-uniform scaling for IK_LOWERARM_LT length
	create_node			lowerarm_lt_length_BLND								blendColors	;
	connect_attribute	lowerarmHand_lt_length_DISTShape.distance			lowerarm_lt_length_BLND.color1R
						ik_hand_lt_translateX.output						lowerarm_lt_length_BLND.color2R
						lowerarm_lt_length_BLND.outputR						hand_lt_stretch_BLND.color1R				force	;

# Normalize UPPERARM-LOWERARM_LT_LENGTH with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
	create_node			upperarm_lt_normalizeLength_DIV						multiplyDivide	;
	connect_attribute	upperarmLowerarm_lt_length_DISTShape.distance		upperarm_lt_normalizeLength_DIV.input1X
						character_CTRL.scaleZ								upperarm_lt_normalizeLength_DIV.input2X	;
	set_attribute		upperarm_lt_normalizeLength_DIV.operation			2	;
	connect_attribute	upperarm_lt_normalizeLength_DIV.outputX				upperarm_lt_length_BLND.color1R	force	;

# Normalize LOWERARM-HAND_LT_LENGTH length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
	create_node			lowerarm_lt_normalizeLength_DIV						multiplyDivide	;
	connect_attribute	lowerarmHand_lt_length_DISTShape.distance			lowerarm_lt_normalizeLength_DIV.input1X
						character_CTRL.scaleZ								lowerarm_lt_normalizeLength_DIV.input2X	;
	set_attribute		lowerarm_lt_normalizeLength_DIV.operation			2	;
	connect_attribute	lowerarm_lt_normalizeLength_DIV.outputX				lowerarm_lt_length_BLND.color1R				force	;

# Add ELBOW-SNAP attribute to IK_ELBOW_LT_CTRL
	add_attribute		ik_elbow_lt_CTRL				elbowSnap float minValue=0 maxValue=1 defaultValue=0 keyable	;
	connect_attribute	ik_elbow_lt_CTRL.elbowSnap		[upperarm_lt_length_BLND.blender, lowerarm_lt_length_BLND.blender]	;

# Add members to layer: CONTROLS_IK
	edit_layer			Controls_IK						[ik_elbow_lt_CTRL]
	;


# RIGHT =====================================================================

# Create pole vector constraint: ELBOW_RT_PVC
	create_locator		elbow_rt_LOC	;
	move				elbow_rt_LOC		0.0		20.0	0.0		relative_to=lowerarm_rt	;
	xform_ref			elbow_rt_LOC								translation worldSpace	;
	pole_constraint		elbow_rt_PVC		elbow_rt_LOC			arm_rt_HDL	;

# Create control: IK_ELBOW_RT_CTRL
	create_curve		ik_elbow_rt_CTRL							[0.00, 4.24, 0.00, 4.24, 0.00, 0.00, 0.00, -4.24, 0.00, -4.24, 0.00, 0.00, 0.00, 4.24, 0.00, 0.00, 0.00, 7.07, 0.00, -4.24, 0.00, -4.24, 0.00, 0.00, 0.00, 0.00, 7.07, 4.24, 0.00, 0.00]	degree=1	;
	move				ik_elbow_rt_CTRL							  0.0	0.0		0.0			relative_to=elbow_rt_LOC	;
	rotate				ik_elbow_rt_CTRL							-90.0	0.0		0.0			euler	;
	freeze				ik_elbow_rt_CTRL	;
	parent				ik_elbow_rt_CTRL							[elbow_rt_LOC]	;

# Create distance from UPPERARM_RT to LOWERARM_RT and LOWERARM_RT to HAND_RT
	create_distance		upperarmLowerarm_rt_length					upperarm_rt					elbow_rt_LOC
						lowerarmHand_rt_length						elbow_rt_LOC				hand_rt	;
	parent				ik_elbow_rt_CTRL							[upperarmLowerarm_rt_length_end_LOC, lowerarmHand_rt_length_start_LOC]
						ik_wrist_rt_CTRL							[lowerarmHand_rt_length_end_LOC]	;

# Create blend between uniform and non-uniform scaling for IK_UPPERARM_RT length
	create_node			upperarm_rt_length_BLND								blendColors	;
	connect_attribute	upperarmLowerarm_rt_length_DISTShape.distance		upperarm_rt_length_BLND.color1R
						ik_lowerarm_rt_translateX.output					upperarm_rt_length_BLND.color2R
						upperarm_rt_length_BLND.outputR						lowerarm_rt_stretch_BLND.color1R			force	;

# Create blend between uniform and non-uniform scaling for IK_LOWERARM_RT length
	create_node			lowerarm_rt_length_BLND								blendColors	;
	connect_attribute	lowerarmHand_rt_length_DISTShape.distance			lowerarm_rt_length_BLND.color1R
						ik_hand_rt_translateX.output						lowerarm_rt_length_BLND.color2R
						lowerarm_rt_length_BLND.outputR						hand_rt_stretch_BLND.color1R				force	;

# Normalize UPPERARM-LOWERARM_RT_LENGTH with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
	create_node			upperarm_rt_normalizeLength_DIV						multiplyDivide	;
	connect_attribute	upperarmLowerarm_rt_length_DISTShape.distance		upperarm_rt_normalizeLength_DIV.input1X
						character_CTRL.scaleZ								upperarm_rt_normalizeLength_DIV.input2X	;
	set_attribute		upperarm_rt_normalizeLength_DIV.operation			2	;
	connect_attribute	upperarm_rt_normalizeLength_DIV.outputX				upperarm_rt_length_BLND.color1R	force	;

# Normalize LOWERARM-HAND_RT_LENGTH length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
	create_node			lowerarm_rt_normalizeLength_DIV						multiplyDivide	;
	connect_attribute	lowerarmHand_rt_length_DISTShape.distance			lowerarm_rt_normalizeLength_DIV.input1X
						character_CTRL.scaleZ								lowerarm_rt_normalizeLength_DIV.input2X	;
	set_attribute		lowerarm_rt_normalizeLength_DIV.operation			2	;
	connect_attribute	lowerarm_rt_normalizeLength_DIV.outputX				lowerarm_rt_length_BLND.color1R				force	;

# Additive inverse for UPPERARM-LOWERARM_RT_LENGTH
	create_node			additiveInverse_upperarmLowerarm_rt_length_MUL				multiplyDivide	;
	set_attribute		additiveInverse_upperarmLowerarm_rt_length_MUL.input1X		-1	;
	connect_attribute	upperarmLowerarm_rt_length_DISTShape.distance				additiveInverse_upperarmLowerarm_rt_length_MUL.input2X
						additiveInverse_upperarmLowerarm_rt_length_MUL.outputX		upperarm_rt_length_BLND.color1R		force	;
	set_attribute		additiveInverse_upperarmLowerarm_rt_length_MUL.operation	1	;

# Additive inverse for LOWERARM-HAND_RT_LENGTH
	create_node			additiveInverse_lowerarmHand_rt_length_MUL					multiplyDivide	;
	set_attribute		additiveInverse_lowerarmHand_rt_length_MUL.input1X			-1	;
	connect_attribute	lowerarmHand_rt_length_DISTShape.distance					additiveInverse_lowerarmHand_rt_length_MUL.input2X
						additiveInverse_lowerarmHand_rt_length_MUL.outputX			lowerarm_rt_length_BLND.color1R		force	;
	set_attribute		additiveInverse_lowerarmHand_rt_length_MUL.operation		1	;

# Add ELBOW-SNAP attribute to IK_ELBOW_RT_CTRL
	add_attribute		ik_elbow_rt_CTRL				elbowSnap float minValue=0 maxValue=1 defaultValue=0 keyable	;
	connect_attribute	ik_elbow_rt_CTRL.elbowSnap		[upperarm_rt_length_BLND.blender, lowerarm_rt_length_BLND.blender]	;

# Add members to layer: CONTROLS_IK
	edit_layer			Controls_IK						[ik_elbow_rt_CTRL]
	;


#############################################################################
#### [ ARM ] FK Controls and Stretch
#############################################################################

# Create FK controls:
	# Left UPPERARM FK control
		create_circle		fk_upperarm_lt_CTRL_nurb		0.0		 0.0	0.0					radius=6	;
		parent				fk_upperarm_lt					[fk_upperarm_lt_CTRL_nurbShape]		relative shape	;
		rename				fk_upperarm_lt_CTRL_nurbShape	fk_upperarm_ltShape	;
		rotate				fk_upperarm_ltShape.cv[0:7]		0.0		90.0	0.0					euler worldSpace	;
		move				fk_upperarm_ltShape.cv[0:7]		6.0		 0.0	0.0					relative	;
		delete				fk_upperarm_lt_CTRL_nurb	;
		rename				fk_upperarm_lt					fk_upperarm_lt_CTRL	;
	# Left LOWERARM FK control
		create_circle		fk_lowerarm_lt_CTRL_nurb		0.0		 0.0	0.0					radius=5	;
		parent				fk_lowerarm_lt					[fk_lowerarm_lt_CTRL_nurbShape]		relative shape	;
		rename				fk_lowerarm_lt_CTRL_nurbShape	fk_lowerarm_ltShape	;
		rotate				fk_lowerarm_ltShape.cv[0:7]		0.0		90.0	0.0					euler worldSpace	;
		delete				fk_lowerarm_lt_CTRL_nurb	;
		rename				fk_lowerarm_lt					fk_lowerarm_lt_CTRL	;
	# Left HAND FK control
		create_circle		fk_hand_lt_CTRL_nurb			0.0		 0.0	0.0					radius=4	;
		parent				fk_hand_lt						[fk_hand_lt_CTRL_nurbShape]			relative shape	;
		rename				fk_hand_lt_CTRL_nurbShape		fk_hand_ltShape	;
		rotate				fk_hand_ltShape.cv[0:7]			0.0		90.0	0.0					euler worldSpace	;
		delete				fk_hand_lt_CTRL_nurb	;
		rename				fk_hand_lt						fk_hand_lt_CTRL	;

# Setup STRETCH joint length attributes:
	# Left UPPERARM length
		add_attribute		fk_upperarm_lt_CTRL				length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		fk_upperarm_lt_CTRL.length		-	-		[fk_lowerarm_lt_CTRL]	[translateX]
							fk_upperarm_lt_CTRL.length		0	0		[fk_lowerarm_lt_CTRL]	[translateX]	;
		key_tangent			[translateX]								[fk_lowerarm_lt_CTRL]	inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]								[fk_lowerarm_lt_CTRL]	postInfinite="linear"	;
	# Left LOWERARM length
		add_attribute		fk_lowerarm_lt_CTRL				length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		fk_lowerarm_lt_CTRL.length		-	-		[fk_hand_lt_CTRL]		[translateX]
							fk_lowerarm_lt_CTRL.length		0	0		[fk_hand_lt_CTRL]		[translateX]	;
		key_tangent			[translateX]								[fk_hand_lt_CTRL]		inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]								[fk_hand_lt_CTRL]		postInfinite="linear"	;
#1todo: in PART 23 - upperarmLowerarm_lt_CRV drives 4 segmented JNT (last joint is excluded) arm scaleX (curveInfo + normalizeDiv)

# Apply STRETCH on UPPERARM-LOWERARM TWIST joint chain
	# Compute stretch percentage
		create_node			upperarmLowerarm_lt_CRV_INF							curveInfo
							upperarmLowerarm_lt_stretchPct_DIV					multiplyDivide	;
		connect_attribute	upperarmLowerarm_lt_CRVShape.worldSpace[0]			upperarmLowerarm_lt_CRV_INF.inputCurve
							upperarmLowerarm_lt_CRV_INF.arcLength				upperarmLowerarm_lt_stretchPct_DIV.input1X	;
		set_attribute		upperarmLowerarm_lt_stretchPct_DIV.input2X			{upperarmLowerarm_lt_CRV_INF.arcLength}
							upperarmLowerarm_lt_stretchPct_DIV.operation		2	;
	# Normalize curve length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
		create_node			upperarmLowerarm_lt_normalizeLength_DIV				multiplyDivide	;
		connect_attribute	upperarmLowerarm_lt_CRV_INF.arcLength				upperarmLowerarm_lt_normalizeLength_DIV.input1X
							character_CTRL.scaleZ								upperarmLowerarm_lt_normalizeLength_DIV.input2X	;
		set_attribute		upperarmLowerarm_lt_normalizeLength_DIV.operation	2	;
		connect_attribute	upperarmLowerarm_lt_normalizeLength_DIV.outputX		upperarmLowerarm_lt_stretchPct_DIV.input1X		force	;
	# Apply stretch percentage to joints' X scale
		connect_attribute	upperarmLowerarm_lt_stretchPct_DIV.outputX			[result_upperarm_twist_01_lt.scaleX, result_upperarm_twist_02_lt.scaleX, result_upperarm_twist_03_lt.scaleX]	;

# Apply STRETCH on LOWERARM-HAND TWIST joint chain
	# Compute stretch percentage
		create_node			lowerarmHand_lt_CRV_INF								curveInfo
							lowerarmHand_lt_stretchPct_DIV						multiplyDivide	;
		connect_attribute	lowerarmHand_lt_CRVShape.worldSpace[0]				lowerarmHand_lt_CRV_INF.inputCurve
							lowerarmHand_lt_CRV_INF.arcLength					lowerarmHand_lt_stretchPct_DIV.input1X	;
		set_attribute		lowerarmHand_lt_stretchPct_DIV.input2X				{lowerarmHand_lt_CRV_INF.arcLength}
							lowerarmHand_lt_stretchPct_DIV.operation			2	;
	# Normalize curve length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
		create_node			lowerarmHand_lt_normalizeLength_DIV					multiplyDivide	;
		connect_attribute	lowerarmHand_lt_CRV_INF.arcLength					lowerarmHand_lt_normalizeLength_DIV.input1X
							character_CTRL.scaleZ								lowerarmHand_lt_normalizeLength_DIV.input2X	;
		set_attribute		lowerarmHand_lt_normalizeLength_DIV.operation		2	;
		connect_attribute	lowerarmHand_lt_normalizeLength_DIV.outputX			lowerarmHand_lt_stretchPct_DIV.input1X		force	;
	# Apply stretch percentage to joints' X scale
		connect_attribute	lowerarmHand_lt_stretchPct_DIV.outputX				[result_lowerarm_twist_01_lt.scaleX, result_lowerarm_twist_02_lt.scaleX, result_lowerarm_twist_03_lt.scaleX]	;

# Add to layer: CONTROLS_FK
	edit_layer				Controls_FK											[fk_upperarm_lt_CTRL, fk_lowerarm_lt_CTRL, fk_hand_lt_CTRL]
	;


# RIGHT =====================================================================

# Create FK controls:
	# Left UPPERARM FK control
		create_circle		fk_upperarm_rt_CTRL_nurb		 0.0	 0.0	0.0					radius=6	;
		parent				fk_upperarm_rt					[fk_upperarm_rt_CTRL_nurbShape]		relative shape	;
		rename				fk_upperarm_rt_CTRL_nurbShape	fk_upperarm_rtShape	;
		rotate				fk_upperarm_rtShape.cv[0:7]		 0.0	90.0	0.0					euler worldSpace	;
		move				fk_upperarm_rtShape.cv[0:7]		-6.0	 0.0	0.0					relative	;
		delete				fk_upperarm_rt_CTRL_nurb	;
		rename				fk_upperarm_rt					fk_upperarm_rt_CTRL	;
	# Left LOWERARM FK control
		create_circle		fk_lowerarm_rt_CTRL_nurb		 0.0	 0.0	0.0					radius=5	;
		parent				fk_lowerarm_rt					[fk_lowerarm_rt_CTRL_nurbShape]		relative shape	;
		rename				fk_lowerarm_rt_CTRL_nurbShape	fk_lowerarm_rtShape	;
		rotate				fk_lowerarm_rtShape.cv[0:7]		 0.0	90.0	0.0					euler worldSpace	;
		delete				fk_lowerarm_rt_CTRL_nurb	;
		rename				fk_lowerarm_rt					fk_lowerarm_rt_CTRL	;
	# Left HAND FK control
		create_circle		fk_hand_rt_CTRL_nurb			 0.0	 0.0	0.0					radius=4	;
		parent				fk_hand_rt						[fk_hand_rt_CTRL_nurbShape]			relative shape	;
		rename				fk_hand_rt_CTRL_nurbShape		fk_hand_rtShape	;
		rotate				fk_hand_rtShape.cv[0:7]			 0.0	90.0	0.0					euler worldSpace	;
		delete				fk_hand_rt_CTRL_nurb	;
		rename				fk_hand_rt						fk_hand_rt_CTRL	;

# Setup STRETCH joint length attributes:
	# Left UPPERARM length
		add_attribute		fk_upperarm_rt_CTRL				length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		fk_upperarm_rt_CTRL.length		-	-		[fk_lowerarm_rt_CTRL]	[translateX]
							fk_upperarm_rt_CTRL.length		0	0		[fk_lowerarm_rt_CTRL]	[translateX]	;
		key_tangent			[translateX]								[fk_lowerarm_rt_CTRL]	inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]								[fk_lowerarm_rt_CTRL]	postInfinite="linear"	;
	# Left LOWERARM length
		add_attribute		fk_lowerarm_rt_CTRL				length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		fk_lowerarm_rt_CTRL.length		-	-		[fk_hand_rt_CTRL]		[translateX]
							fk_lowerarm_rt_CTRL.length		0	0		[fk_hand_rt_CTRL]		[translateX]	;
		key_tangent			[translateX]								[fk_hand_rt_CTRL]		inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]								[fk_hand_rt_CTRL]		postInfinite="linear"	;
#1todo: in PART 23 - upperarmLowerarm_rt_CRV drives 4 segmented JNT (last joint is excluded) arm scaleX (curveInfo + normalizeDiv)

# Apply STRETCH on UPPERARM-LOWERARM TWIST joint chain
	# Compute stretch percentage
		create_node			upperarmLowerarm_rt_CRV_INF							curveInfo
							upperarmLowerarm_rt_stretchPct_DIV					multiplyDivide	;
		connect_attribute	upperarmLowerarm_rt_CRVShape.worldSpace[0]			upperarmLowerarm_rt_CRV_INF.inputCurve
							upperarmLowerarm_rt_CRV_INF.arcLength				upperarmLowerarm_rt_stretchPct_DIV.input1X	;
		set_attribute		upperarmLowerarm_rt_stretchPct_DIV.input2X			{upperarmLowerarm_rt_CRV_INF.arcLength}
							upperarmLowerarm_rt_stretchPct_DIV.operation		2	;
	# Normalize curve length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
		create_node			upperarmLowerarm_rt_normalizeLength_DIV				multiplyDivide	;
		connect_attribute	upperarmLowerarm_rt_CRV_INF.arcLength				upperarmLowerarm_rt_normalizeLength_DIV.input1X
							character_CTRL.scaleZ								upperarmLowerarm_rt_normalizeLength_DIV.input2X	;
		set_attribute		upperarmLowerarm_rt_normalizeLength_DIV.operation	2	;
		connect_attribute	upperarmLowerarm_rt_normalizeLength_DIV.outputX		upperarmLowerarm_rt_stretchPct_DIV.input1X		force	;
	# Apply stretch percentage to joints' X scale
		connect_attribute	upperarmLowerarm_rt_stretchPct_DIV.outputX			[result_upperarm_twist_01_rt.scaleX, result_upperarm_twist_02_rt.scaleX, result_upperarm_twist_03_rt.scaleX]	;

# Apply STRETCH on LOWERARM-HAND TWIST joint chain
	# Compute stretch percentage
		create_node			lowerarmHand_rt_CRV_INF								curveInfo
							lowerarmHand_rt_stretchPct_DIV						multiplyDivide	;
		connect_attribute	lowerarmHand_rt_CRVShape.worldSpace[0]				lowerarmHand_rt_CRV_INF.inputCurve
							lowerarmHand_rt_CRV_INF.arcLength					lowerarmHand_rt_stretchPct_DIV.input1X	;
		set_attribute		lowerarmHand_rt_stretchPct_DIV.input2X				{lowerarmHand_rt_CRV_INF.arcLength}
							lowerarmHand_rt_stretchPct_DIV.operation			2	;
	# Normalize curve length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling)
		create_node			lowerarmHand_rt_normalizeLength_DIV					multiplyDivide	;
		connect_attribute	lowerarmHand_rt_CRV_INF.arcLength					lowerarmHand_rt_normalizeLength_DIV.input1X
							character_CTRL.scaleZ								lowerarmHand_rt_normalizeLength_DIV.input2X	;
		set_attribute		lowerarmHand_rt_normalizeLength_DIV.operation		2	;
		connect_attribute	lowerarmHand_rt_normalizeLength_DIV.outputX			lowerarmHand_rt_stretchPct_DIV.input1X		force	;
	# Apply stretch percentage to joints' X scale
		connect_attribute	lowerarmHand_rt_stretchPct_DIV.outputX				[result_lowerarm_twist_01_rt.scaleX, result_lowerarm_twist_02_rt.scaleX, result_lowerarm_twist_03_rt.scaleX]	;

# Add to layer: CONTROLS_FK
	edit_layer				Controls_FK											[fk_upperarm_rt_CTRL, fk_lowerarm_rt_CTRL, fk_hand_rt_CTRL]
	;


#############################################################################
#### [ ARM ] IK / FK Hybrid Elbow
#############################################################################

# Create IK and FK joint chains based on RESULT joint chain
	duplicate			fk_elbow_lowerarm_lt_CTRL					fk_lowerarm_lt_CTRL	;
	find_replace		fk_elbow_lowerarm_lt_CTRL|fk_hand_lt_CTRL	fk_ fk_elbow_	;
	parent				ik_elbow_lt_CTRL							[fk_elbow_lowerarm_lt_CTRL]	;
	move				fk_elbow_lowerarm_lt_CTRL					0.0		0.0		0.0				relative_to=elbow_lt_LOC	;

# Create group: ARM_LT_IKC # todo - missing hand_HDL, do we need one?
	create_group		arm_lt_IKC	; # todo - missing rotate on hand for IK and IK/FK hybrid
	move				arm_lt_IKC		0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=hand_lt	;
	rotate				arm_lt_IKC																	copy_from=hand_lt	;
	parent				arm_lt_IKC									[arm_lt_HDL, hand_lt_HDL, arm_lt_length_end_LOC, lowerarmHand_lt_length_end_LOC]	;
	parent_constraint	arm_lt_IKC									[ik_wrist_lt_CTRL]
						arm_lt_IKC									[fk_elbow_hand_lt_CTRL]			!maintainOffset	;

# Add FK-ELBOW-BLEND attribute to IK_ELBOW_LT_CTRL
	# Add FK-ELBOW-BLEND attribute
		add_attribute		ik_elbow_lt_CTRL						fkElbowBlend					float niceName="FK Elbow Blend" minValue=0 maxValue=1 defaultValue=0 keyable	;
	# Set driven keys for IK / FK Hybrid Elbow selection
		set_driven_key		ik_elbow_lt_CTRL.fkElbowBlend			0	0		[arm_lt_IKC_parentConstraint1]		[fk_elbow_hand_lt_CTRLW1]
							ik_elbow_lt_CTRL.fkElbowBlend			0	1		[arm_lt_IKC_parentConstraint1]		[ik_wrist_lt_CTRLW0]
							ik_elbow_lt_CTRL.fkElbowBlend			1	0		[arm_lt_IKC_parentConstraint1]		[ik_wrist_lt_CTRLW0]
							ik_elbow_lt_CTRL.fkElbowBlend			1	1		[arm_lt_IKC_parentConstraint1]		[fk_elbow_hand_lt_CTRLW1]	;

# Setup STRETCH joint length attributes:
	# Left LOWERARM length
		set_driven_key		fk_elbow_lowerarm_lt_CTRL.length		-	-		[fk_elbow_hand_lt_CTRL]				[translateX]
							fk_elbow_lowerarm_lt_CTRL.length		0	0		[fk_elbow_hand_lt_CTRL]				[translateX]	;
		key_tangent			[translateX]										[fk_elbow_hand_lt_CTRL]				inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]										[fk_elbow_hand_lt_CTRL]				postInfinite="linear"	;

# Add members to their respective layers
	edit_layer				Controls_FK											[fk_elbow_lowerarm_lt_CTRL, fk_elbow_hand_lt_CTRL]
	;


# RIGHT =====================================================================

# Create IK and FK joint chains based on RESULT joint chain
	duplicate			fk_elbow_lowerarm_rt_CTRL					fk_lowerarm_rt_CTRL	;
	find_replace		fk_elbow_lowerarm_rt_CTRL|fk_hand_rt_CTRL	fk_ fk_elbow_	;
	parent				ik_elbow_rt_CTRL							[fk_elbow_lowerarm_rt_CTRL]	;
	move				fk_elbow_lowerarm_rt_CTRL					0.0		0.0		0.0				relative_to=elbow_rt_LOC	;

# Create group: ARM_RT_IKC # todo - missing hand_HDL, do we need one?
	create_group		arm_rt_IKC	;
	move				arm_rt_IKC				0.0		0.0		0.0		[rotatePivot, scalePivot]	relative_to=hand_rt	;
	rotate				arm_rt_IKC																	copy_from=hand_rt	;
	parent				arm_rt_IKC										[arm_rt_HDL, hand_rt_HDL, arm_rt_length_end_LOC, lowerarmHand_rt_length_end_LOC]	;
	parent_constraint	arm_rt_IKC										[ik_wrist_rt_CTRL]
						arm_rt_IKC										[fk_elbow_hand_rt_CTRL]		!maintainOffset	;

# Add FK-ELBOW-BLEND attribute to IK_ELBOW_RT_CTRL
	# Add FK-ELBOW-BLEND attribute
		add_attribute		ik_elbow_rt_CTRL						fkElbowBlend					float niceName="FK Elbow Blend" minValue=0 maxValue=1 defaultValue=0 keyable	;
	# Set driven keys for IK / FK Hybrid Elbow selection
		set_driven_key		ik_elbow_rt_CTRL.fkElbowBlend			0	0		[arm_rt_IKC_parentConstraint1]		[fk_elbow_hand_rt_CTRLW1]
							ik_elbow_rt_CTRL.fkElbowBlend			0	1		[arm_rt_IKC_parentConstraint1]		[ik_wrist_rt_CTRLW0]
							ik_elbow_rt_CTRL.fkElbowBlend			1	0		[arm_rt_IKC_parentConstraint1]		[ik_wrist_rt_CTRLW0]
							ik_elbow_rt_CTRL.fkElbowBlend			1	1		[arm_rt_IKC_parentConstraint1]		[fk_elbow_hand_rt_CTRLW1]	;

# Setup STRETCH joint length attributes:
	# Left LOWERARM length
		set_driven_key		fk_elbow_lowerarm_rt_CTRL.length		-	-		[fk_elbow_hand_rt_CTRL]				[translateX]
							fk_elbow_lowerarm_rt_CTRL.length		0	0		[fk_elbow_hand_rt_CTRL]				[translateX]	;
		key_tangent			[translateX]										[fk_elbow_hand_rt_CTRL]				inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]										[fk_elbow_hand_rt_CTRL]				postInfinite="linear"	;

# Add members to their respective layers
	edit_layer				Controls_FK											[fk_elbow_lowerarm_rt_CTRL, fk_elbow_hand_rt_CTRL]
	;


#############################################################################
#### [ ARM ] Visibility
#############################################################################

# Create visibility group: IK_WRIST_LT_CTRL_VIS
	create_group		ik_wrist_lt_CTRL_VIS	;
	parent				ik_wrist_lt_CTRL_VIS					[ik_wrist_lt_CTRL]	;

# Add FK Elbow visibility attribute to IK_ELBOW_LT_CTRL
	add_attribute		ik_elbow_lt_CTRL						fkElbowVisibility	bool niceName="FK Elbow Visibility" keyable	;
	connect_attribute	ik_elbow_lt_CTRL.fkElbowVisibility		fk_elbow_lowerarm_lt_CTRL.visibility	;

# Add IK / FK visibility attributes to ARM_SETTINGS_LT_CTRL
	add_attribute		arm_settings_lt_CTRL					ikVisibility		bool niceName="IK Visibility" keyable
						arm_settings_lt_CTRL					fkVisibility		bool niceName="FK Visibility" keyable	;
	connect_attribute	arm_settings_lt_CTRL.ikVisibility		ik_wrist_lt_CTRL_VIS.visibility
						arm_settings_lt_CTRL.fkVisibility		fk_upperarm_lt_CTRL.visibility	;

# Drive FK-ELBOW and IK_WRIST_LT_CTRL visibility based on FK Elbow selection
	set_driven_key		ik_elbow_lt_CTRL.fkElbowBlend			0		0			[ik_elbow_lt_CTRL]		[fkElbowVisibility]
						ik_elbow_lt_CTRL.fkElbowBlend			0.001	1			[ik_elbow_lt_CTRL]		[fkElbowVisibility]
						ik_elbow_lt_CTRL.fkElbowBlend			1		1			[ik_elbow_lt_CTRL]		[fkElbowVisibility]
						ik_elbow_lt_CTRL.fkElbowBlend			0		1			[ik_wrist_lt_CTRL]		[visibility]
						ik_elbow_lt_CTRL.fkElbowBlend			0.999	1			[ik_wrist_lt_CTRL]		[visibility]
						ik_elbow_lt_CTRL.fkElbowBlend			1		0			[ik_wrist_lt_CTRL]		[visibility]	;

# Drive IK / FK control visibility based on IK / FK selection
	set_driven_key		arm_settings_lt_CTRL.ikFkBlend			0		1			[ik_elbow_lt_CTRL]		[visibility]
						arm_settings_lt_CTRL.ikFkBlend			0.999	1			[ik_elbow_lt_CTRL]		[visibility]
						arm_settings_lt_CTRL.ikFkBlend			1		0			[ik_elbow_lt_CTRL]		[visibility]
						arm_settings_lt_CTRL.ikFkBlend			0		1			[arm_settings_lt_CTRL]		[ikVisibility]
						arm_settings_lt_CTRL.ikFkBlend			0.999	1			[arm_settings_lt_CTRL]		[ikVisibility]
						arm_settings_lt_CTRL.ikFkBlend			1		0			[arm_settings_lt_CTRL]		[ikVisibility]
						arm_settings_lt_CTRL.ikFkBlend			0		0			[arm_settings_lt_CTRL]		[fkVisibility]
						arm_settings_lt_CTRL.ikFkBlend			0.001	1			[arm_settings_lt_CTRL]		[fkVisibility]
						arm_settings_lt_CTRL.ikFkBlend			1		1			[arm_settings_lt_CTRL]		[fkVisibility]	;


# RIGHT =====================================================================

# Create visibility group: IK_WRIST_RT_CTRL_VIS
	create_group		ik_wrist_rt_CTRL_VIS	;
	parent				ik_wrist_rt_CTRL_VIS					[ik_wrist_rt_CTRL]	;

# Add FK Elbow visibility attribute to IK_ELBOW_RT_CTRL
	add_attribute		ik_elbow_rt_CTRL						fkElbowVisibility	bool niceName="FK Elbow Visibility" keyable	;
	connect_attribute	ik_elbow_rt_CTRL.fkElbowVisibility		fk_elbow_lowerarm_rt_CTRL.visibility	;

# Add IK / FK visibility attributes to ARM_SETTINGS_RT_CTRL
	add_attribute		arm_settings_rt_CTRL					ikVisibility		bool niceName="IK Visibility" keyable
						arm_settings_rt_CTRL					fkVisibility		bool niceName="FK Visibility" keyable	;
	connect_attribute	arm_settings_rt_CTRL.ikVisibility		ik_wrist_rt_CTRL_VIS.visibility
						arm_settings_rt_CTRL.fkVisibility		fk_upperarm_rt_CTRL.visibility	;

# Drive FK-ELBOW and IK_WRIST_RT_CTRL visibility based on FK Elbow selection
	set_driven_key		ik_elbow_rt_CTRL.fkElbowBlend			0		0			[ik_elbow_rt_CTRL]		[fkElbowVisibility]
						ik_elbow_rt_CTRL.fkElbowBlend			0.001	1			[ik_elbow_rt_CTRL]		[fkElbowVisibility]
						ik_elbow_rt_CTRL.fkElbowBlend			1		1			[ik_elbow_rt_CTRL]		[fkElbowVisibility]
						ik_elbow_rt_CTRL.fkElbowBlend			0		1			[ik_wrist_rt_CTRL]		[visibility]
						ik_elbow_rt_CTRL.fkElbowBlend			0.999	1			[ik_wrist_rt_CTRL]		[visibility]
						ik_elbow_rt_CTRL.fkElbowBlend			1		0			[ik_wrist_rt_CTRL]		[visibility]	;

# Drive IK / FK control visibility based on IK / FK selection
	set_driven_key		arm_settings_rt_CTRL.ikFkBlend			0		1			[ik_elbow_rt_CTRL]		[visibility]
						arm_settings_rt_CTRL.ikFkBlend			0.999	1			[ik_elbow_rt_CTRL]		[visibility]
						arm_settings_rt_CTRL.ikFkBlend			1		0			[ik_elbow_rt_CTRL]		[visibility]
						arm_settings_rt_CTRL.ikFkBlend			0		1			[arm_settings_rt_CTRL]		[ikVisibility]
						arm_settings_rt_CTRL.ikFkBlend			0.999	1			[arm_settings_rt_CTRL]		[ikVisibility]
						arm_settings_rt_CTRL.ikFkBlend			1		0			[arm_settings_rt_CTRL]		[ikVisibility]
						arm_settings_rt_CTRL.ikFkBlend			0		0			[arm_settings_rt_CTRL]		[fkVisibility]
						arm_settings_rt_CTRL.ikFkBlend			0.001	1			[arm_settings_rt_CTRL]		[fkVisibility]
						arm_settings_rt_CTRL.ikFkBlend			1		1			[arm_settings_rt_CTRL]		[fkVisibility]	;


#############################################################################
#### [ SHOULDER ] Setup
#############################################################################

# Create RESULT joint chain based on SKELETON joint chain
	create_joint			result_clavicle_lt			0.0		0.0		0.0			relative_to=clavicle_lt
							result_clavicle_end_lt		0.0		0.0		0.0			relative_to=upperarm_lt
	;

# Make RESULT joint chain to drive translate, rotate and scale attributes of DRIVER joint chain
	parent_constraint		driver_clavicle_lt			result_clavicle_lt	;
	connect_attribute		result_clavicle_lt.scale	driver_clavicle_lt.scale	;

# Add members to layer: SKELETON
	edit_layer				Skeleton					[result_clavicle_lt]
	;


# RIGHT =====================================================================

# Mirror left joint chain to right
	mirror_joint			result_clavicle_lt
	;

# Make RESULT joint chain to drive translate, rotate and scale attributes of DRIVER joint chain
	parent_constraint		driver_clavicle_rt			result_clavicle_rt	;
	connect_attribute		result_clavicle_rt.scale	driver_clavicle_rt.scale	;

# Add members to layer: SKELETON
	edit_layer				Skeleton					[result_clavicle_rt]
	;


#############################################################################
#### [ SHOULDER ] Translation-based Shoulder and Control
#############################################################################

# Create IK spline handle: SHOULDER_LT_HDL
	ik_handle			shoulder_lt_HDL			result_clavicle_lt			result_clavicle_end_lt		solver="ikSCsolver"	;
	rename				effector1				shoulder_lt_EFF	;

# Create locator: SHOULDER_LT_LOC
	create_locator		shoulder_lt_LOC	;
	move				shoulder_lt_LOC			0.0		0.0		0.0			relative_to=upperarm_lt	;
	parent				shoulder_lt_LOC			[shoulder_lt_HDL]	;

# Setup STRETCH joint length attribute:
	# Create distance from CLAVICLE_LT to UPPERARM_LT
		create_distance			shoulder_lt_length							clavicle_lt			upperarm_lt	;
		parent					shoulder_lt_LOC								[shoulder_lt_length_end_LOC]	;
	# Left SHOULDER length
		set_driven_key			shoulder_lt_length_DISTShape.distance		{result_clavicle_end_lt.translateX}		{result_clavicle_end_lt.translateX}		[result_clavicle_end_lt]		[translateX]
								shoulder_lt_length_DISTShape.distance		{result_clavicle_end_lt.translateX}*2	{result_clavicle_end_lt.translateX}*2	[result_clavicle_end_lt]		[translateX]	;
		key_tangent				[translateX]								[result_clavicle_end_lt]				inTangentType="spline" outTangentType="spline"	;
		set_infinity			[translateX]								[result_clavicle_end_lt]				postInfinite="linear"	;
	# Normalize length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling) # todo does this fix? try remove then scale root and see if it messes up. If not, then remove this
		create_node				shoulder_lt_normalizeLength_DIV				multiplyDivide	;
		connect_attribute		shoulder_lt_length_DISTShape.distance		shoulder_lt_normalizeLength_DIV.input1X
								character_CTRL.scaleZ						shoulder_lt_normalizeLength_DIV.input2X	;
		set_attribute			shoulder_lt_normalizeLength_DIV.operation	2	;
		connect_attribute		shoulder_lt_normalizeLength_DIV.outputX		result_clavicle_end_lt_translateX.input	force	;

# Create control: IK_SHOULDER_LT_CTRL
	create_curve		ik_shoulder_lt_CTRL									[0.00, 4.24, 0.00, 4.24, 0.00, 0.00, 0.00, -4.24, 0.00, -4.24, 0.00, 0.00, 0.00, 4.24, 0.00, 0.00, 0.00, 7.07, 0.00, -4.24, 0.00, -4.24, 0.00, 0.00, 0.00, 0.00, 7.07, 4.24, 0.00, 0.00]	degree=1	;
	move				ik_shoulder_lt_CTRL									0.0		0.0		10.0		relative_to=upperarm_lt	;
	scale				ik_shoulder_lt_CTRL									0.5		0.5		0.5	;
	freeze				ik_shoulder_lt_CTRL	;
	move				ik_shoulder_lt_CTRL									0.0		0.0		 0.0		relative_to=upperarm_lt		[rotatePivot, scalePivot];
	parent				ik_shoulder_lt_CTRL									[shoulder_lt_LOC]	;

# Add to layer: CONTROLS_IK
	edit_layer			Controls_IK											[ik_shoulder_lt_CTRL]
	;


# RIGHT =====================================================================

# Create IK spline handle: SHOULDER_RT_HDL
	ik_handle			shoulder_rt_HDL			result_clavicle_rt			result_clavicle_end_rt		solver="ikSCsolver"	;
	rename				effector1				shoulder_rt_EFF	;

# Create locator: SHOULDER_RT_LOC
	create_locator		shoulder_rt_LOC	;
	move				shoulder_rt_LOC			0.0		0.0		0.0			relative_to=upperarm_rt	;
	parent				shoulder_rt_LOC			[shoulder_rt_HDL]	;

# Setup STRETCH joint length attribute:
	# Create distance from CLAVICLE_RT to UPPERARM_RT
		create_distance			shoulder_rt_length							clavicle_rt			upperarm_rt	;
		parent					shoulder_rt_LOC								[shoulder_rt_length_end_LOC]	;
	# Right SHOULDER length
		set_driven_key			shoulder_rt_length_DISTShape.distance		{result_clavicle_end_rt.translateX}		-1*{result_clavicle_end_rt.translateX}		[result_clavicle_end_rt]		[translateX]
								shoulder_rt_length_DISTShape.distance		{result_clavicle_end_rt.translateX}*2	-1*{result_clavicle_end_rt.translateX}*2	[result_clavicle_end_rt]		[translateX]	;
		key_tangent				[translateX]								[result_clavicle_end_rt]				inTangentType="spline" outTangentType="spline"	;
		set_infinity			[translateX]								[result_clavicle_end_rt]				postInfinite="linear"	;
	# Normalize length with CHARACTER_CTRL scale Z value (fixes mesh and skeleton scaling) # todo does this fix? try remove then scale root and see if it messes up. If not, then remove this
		create_node				shoulder_rt_normalizeLength_DIV				multiplyDivide	;
		connect_attribute		shoulder_rt_length_DISTShape.distance		shoulder_rt_normalizeLength_DIV.input1X
								character_CTRL.scaleZ						shoulder_rt_normalizeLength_DIV.input2X	;
		set_attribute			shoulder_rt_normalizeLength_DIV.operation	2	;
		connect_attribute		shoulder_rt_normalizeLength_DIV.outputX		result_clavicle_end_rt_translateX.input	force	;

# Create control: IK_SHOULDER_RT_CTRL
	create_curve		ik_shoulder_rt_CTRL									[0.00, 4.24, 0.00, 4.24, 0.00, 0.00, 0.00, -4.24, 0.00, -4.24, 0.00, 0.00, 0.00, 4.24, 0.00, 0.00, 0.00, 7.07, 0.00, -4.24, 0.00, -4.24, 0.00, 0.00, 0.00, 0.00, 7.07, 4.24, 0.00, 0.00]	degree=1	;
	move				ik_shoulder_rt_CTRL									0.0		0.0		10.0		relative_to=upperarm_rt	;
	scale				ik_shoulder_rt_CTRL									0.5		0.5		0.5	;
	freeze				ik_shoulder_rt_CTRL	;
	move				ik_shoulder_rt_CTRL									0.0		0.0		 0.0		relative_to=upperarm_rt		[rotatePivot, scalePivot];
	parent				ik_shoulder_rt_CTRL									[shoulder_rt_LOC]	;

# Add to layer: CONTROLS_IK
	edit_layer			Controls_IK											[ik_shoulder_rt_CTRL]
	;


#############################################################################
#### [ SHOULDER ] Group and Controls
#############################################################################

# Create group: SHOULDER_LT_GRP
	create_group			shoulder_lt_GRP	;
	move					shoulder_lt_GRP			0.0		0.0		0.0			relative_to=spine_03	;
	parent					shoulder_lt_GRP			[ik_shoulder_lt_CTRL]
							arm_sys_GRP				[shoulder_lt_GRP]	;
	parent_constraint		shoulder_lt_GRP			result_spine_03	;	# todo - changed to result_spine_03 from ik_shoulder # todo1: why? use ik_shoulder later

# Create group: DO_NOT_TOUCH_GRP
	create_group			DO_NOT_TOUCH_GRP	;
	parent					|DO_NOT_TOUCH_GRP		[result_clavicle_lt, shoulder_lt_length_start_LOC, shoulder_lt_length_DIST]
							shoulder_lt_GRP			[|DO_NOT_TOUCH_GRP]	;


# RIGHT =====================================================================

# Create group: SHOULDER_RT_GRP
	create_group			shoulder_rt_GRP	;
	move					shoulder_rt_GRP			0.0		0.0		0.0			relative_to=spine_03	;
	parent					shoulder_rt_GRP			[ik_shoulder_rt_CTRL]
							arm_sys_GRP				[shoulder_rt_GRP]	;
	parent_constraint		shoulder_rt_GRP			result_spine_03	;	# todo - changed to result_spine_03 from ik_shoulder # todo1: why? use ik_shoulder later

# Create group: DO_NOT_TOUCH_GRP
	create_group			DO_NOT_TOUCH_GRP	;
	parent					|DO_NOT_TOUCH_GRP		[result_clavicle_rt, shoulder_rt_length_start_LOC, shoulder_rt_length_DIST]
							shoulder_rt_GRP			[|DO_NOT_TOUCH_GRP]	;


#############################################################################
#### [ SHOULDER ] Head and Shoulder Constraints
#############################################################################

# Create group: HEAD-SHOULDER_GRP
	create_group			headShoulder_GRP	;
	parent					headShoulder_GRP				[headShoulder_SPACE, neckShoulder_CONST]
							body_GRP|DO_NOT_TOUCH_GRP		[headShoulder_GRP]	;

# Recreate SHOULDER_LT_GRP and SHOULDER_RT_GRP parent constraints
	delete					[shoulder_lt_GRP_parentConstraint1, shoulder_rt_GRP_parentConstraint1]	;
	parent_constraint		shoulder_lt_GRP					[headShoulder_GRP]
							shoulder_rt_GRP					[headShoulder_GRP]	;

# Create constraint locator: SPINE_TIP_LOC
	create_locator			spine_tip_LOC	;
	move					spine_tip_LOC					0.0		0.0		0.0			relative_to=spine_03	;
	parent					body_GRP|DO_NOT_TOUCH_GRP		[spine_tip_LOC]	;
	point_constraint		spine_tip_LOC					result_spine_03	;
	orient_constraint		spine_tip_LOC					ik_shoulder_CTRL	;

# Parent constraint HEAD-SHOULDER_GRP with IK_SHOULDER and SPINE_TIP_LOC
	parent_constraint		headShoulder_GRP				ik_shoulder
							headShoulder_GRP				spine_tip_LOC
	;

# Set driven keys for HEAD-SHOULDER_GRP parent constraint
	set_driven_key			ik_shoulder_CTRL.stretch		0	0	[headShoulder_GRP_parentConstraint1]	[ik_shoulderW0]
							ik_shoulder_CTRL.stretch		0	1	[headShoulder_GRP_parentConstraint1]	[spine_tip_LOCW1]
							ik_shoulder_CTRL.stretch		1	1	[headShoulder_GRP_parentConstraint1]	[ik_shoulderW0]
							ik_shoulder_CTRL.stretch		1	0	[headShoulder_GRP_parentConstraint1]	[spine_tip_LOCW1]
	;


#############################################################################
#### [ SHOULDER ] Visibility
#############################################################################

# Add SHOULDER visibility attribute to ARM_SETTINGS_LT_CTRL
	add_attribute		arm_settings_lt_CTRL						shoulderVisibility bool defaultValue=1 keyable	;
	connect_attribute	arm_settings_lt_CTRL.shoulderVisibility		ik_shoulder_lt_CTRL.visibility	;


# RIGHT =====================================================================

# Add SHOULDER visibility attribute to ARM_SETTINGS_RT_CTRL
	add_attribute		arm_settings_rt_CTRL						shoulderVisibility bool defaultValue=1 keyable	;
	connect_attribute	arm_settings_rt_CTRL.shoulderVisibility		ik_shoulder_rt_CTRL.visibility	;


#############################################################################
#### [ SHOULDER ] Lock And Hide Control Channels
#############################################################################

# Lock-and-Hide channels
	set_attribute		ik_shoulder_lt_CTRL		lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v]
	;

# Hide objects
	set_attribute		shoulder_lt_LOC.visibility					0
						shoulder_lt_length_start_LOC.visibility		0
						shoulder_lt_length_end_LOC.visibility		0
						shoulder_lt_length_DIST.visibility			0
						shoulder_lt_HDL.visibility					0
	;


# RIGHT =====================================================================

# Lock-and-Hide channels
	set_attribute		ik_shoulder_rt_CTRL		lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v]
	;

# Hide objects
	set_attribute		shoulder_rt_LOC.visibility					0
						shoulder_rt_length_start_LOC.visibility		0
						shoulder_rt_length_end_LOC.visibility		0
						shoulder_rt_length_DIST.visibility			0
						shoulder_rt_HDL.visibility					0
	;


#############################################################################
#### [ ARM ] Group and Space Constraint
#############################################################################

# Create group: ARM_LT_GRP
	create_group		arm_lt_GRP	;
	parent				arm_lt_GRP						[fk_upperarm_lt_CTRL, ik_wrist_lt_CTRL_VIS, ik_elbow_lt_CTRL]
						arm_sys_GRP						[arm_lt_GRP]	;

# Create group: DO_NOT_TOUCH_GRP
	create_group		DO_NOT_TOUCH_GRP	;
	parent				|DO_NOT_TOUCH_GRP				[result_upperarm_twist_base_lt, result_lowerarm_twist_base_lt, ik_arm_lt_bind_start, ik_arm_lt_bind_mid, ik_arm_lt_bind_end, arm_lt_twist_GRP, arm_lt_IKC, arm_lt_length_DIST, upperarmLowerarm_lt_length_DIST, lowerarmHand_lt_length_DIST]
						arm_lt_GRP						[|DO_NOT_TOUCH_GRP]	;

# Create group: ARM_GIMBAL_LT_RESULT-CONST_GRP
	create_group		arm_gimbal_lt_resultConst_GRP	;
	parent				arm_gimbal_lt_resultConst_GRP	[result_upperarm_lt]
						arm_lt_GRP|DO_NOT_TOUCH_GRP		[arm_gimbal_lt_resultConst_GRP]	;
	move				arm_gimbal_lt_resultConst_GRP	0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=upperarm_lt	;

# Create group: ARM_BASE_LT_IKC
	create_group		arm_base_lt_IKC	;
	parent				arm_base_lt_IKC					[ik_upperarm_lt, upperarmLowerarm_lt_length_start_LOC, arm_lt_length_start_LOC]
						arm_lt_GRP|DO_NOT_TOUCH_GRP		[arm_base_lt_IKC]	;
	move				arm_base_lt_IKC					0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=upperarm_lt	;

# Create constraint locator: ARM-SHOULDER_LT_SPACE
	create_locator		armShoulder_lt_SPACE	;
	move				armShoulder_lt_SPACE			0.0		0.0		0.0			relative_to=upperarm_lt	;
	parent				result_clavicle_end_lt			[armShoulder_lt_SPACE]	;
	point_constraint	arm_gimbal_lt_resultConst_GRP	armShoulder_lt_SPACE
						arm_base_lt_IKC					armShoulder_lt_SPACE	;


# RIGHT =====================================================================

# Create group: ARM_RT_GRP
	create_group		arm_rt_GRP	;
	parent				arm_rt_GRP						[fk_upperarm_rt_CTRL, ik_wrist_rt_CTRL_VIS, ik_elbow_rt_CTRL]
						arm_sys_GRP						[arm_rt_GRP]	;

# Create group: DO_NOT_TOUCH_GRP
	create_group		DO_NOT_TOUCH_GRP	;
	parent				|DO_NOT_TOUCH_GRP				[result_upperarm_twist_base_rt, result_lowerarm_twist_base_rt, ik_arm_rt_bind_start, ik_arm_rt_bind_mid, ik_arm_rt_bind_end, arm_rt_twist_GRP, arm_rt_IKC, arm_rt_length_DIST, upperarmLowerarm_rt_length_DIST, lowerarmHand_rt_length_DIST]
						arm_rt_GRP						[|DO_NOT_TOUCH_GRP]	;

# Create group: ARM_GIMBAL_RT_RESULT-CONST_GRP
	create_group		arm_gimbal_rt_resultConst_GRP	;
	parent				arm_gimbal_rt_resultConst_GRP	[result_upperarm_rt]
						arm_rt_GRP|DO_NOT_TOUCH_GRP		[arm_gimbal_rt_resultConst_GRP]	;
	move				arm_gimbal_rt_resultConst_GRP	0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=upperarm_rt	;

# Create group: ARM_BASE_RT_IKC
	create_group		arm_base_rt_IKC	;
	parent				arm_base_rt_IKC					[ik_upperarm_rt, upperarmLowerarm_rt_length_start_LOC, arm_rt_length_start_LOC]
						arm_rt_GRP|DO_NOT_TOUCH_GRP		[arm_base_rt_IKC]	;
	move				arm_base_rt_IKC					0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=upperarm_rt	;

# Create constraint locator: ARM-SHOULDER_RT_SPACE
	create_locator		armShoulder_rt_SPACE	;
	move				armShoulder_rt_SPACE			0.0		0.0		0.0			relative_to=upperarm_rt	;
	parent				result_clavicle_end_rt			[armShoulder_rt_SPACE]	;
	point_constraint	arm_gimbal_rt_resultConst_GRP	armShoulder_rt_SPACE
						arm_base_rt_IKC					armShoulder_rt_SPACE	;


#############################################################################
#### [ ARM ] FK Gimbal Rotate Control
#############################################################################

# Create control shape for ARM_GIMBAL_LT_CTRL
	create_circle		arm_gimbal_lt_CTRL					 0.0	 0.0	0.0			radius=7
						arm_gimbal_lt_CTRL1					-7.0	 0.0	0.0			radius=1.2	;
	parent				arm_gimbal_lt_CTRL					[arm_gimbal_lt_CTRL1Shape]	relative shape	;
	delete				arm_gimbal_lt_CTRL1	;
	move				arm_gimbal_lt_CTRL					 0.0	 0.0	0.0			relative_to=upperarm_lt	;
	rotate				arm_gimbal_lt_CTRL					 0.0	90.0	0.0			euler	;
	freeze				arm_gimbal_lt_CTRL	;
	parent				arm_lt_GRP							[arm_gimbal_lt_CTRL]
						arm_gimbal_lt_CTRL					[fk_upperarm_lt_CTRL]	;

# Create group: ARM_GIMBAL_LT_RESULT_GRP
	create_group		arm_gimbal_lt_result_GRP	;
	parent				arm_gimbal_lt_result_GRP			[result_upperarm_lt]
						arm_gimbal_lt_resultConst_GRP		[arm_gimbal_lt_result_GRP]	;
	move				arm_gimbal_lt_result_GRP			0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=upperarm_lt	;

# Make ARM_GIMBAL_LT_CTRL to drive rotate attribute of ARM_LT_RESULT-GIMBAL_GRP
	create_node			arm_gimbal_lt_BLND					blendColors	;
	connect_attribute	arm_gimbal_lt_CTRL.rotate			arm_gimbal_lt_BLND.color1	;
	set_attribute		arm_gimbal_lt_BLND.color2R			0
						arm_gimbal_lt_BLND.color2G			0
						arm_gimbal_lt_BLND.color2B			0	;
	connect_attribute	arm_gimbal_lt_BLND.output			arm_gimbal_lt_result_GRP.rotate
						arm_settings_lt_CTRL.ikFkBlend		arm_gimbal_lt_BLND.blender	;

# Drive ARM_GIMBAL_LT_CTRL visibility via ARM_SETTINGS_LT_CTRL' FK visibility
	connect_attribute	arm_settings_lt_CTRL.fkVisibility	arm_gimbal_lt_CTRL.visibility	;

# Create group: ARM_LT_FKC
	create_group		arm_lt_FKC	;
	parent				arm_lt_FKC							[arm_gimbal_lt_CTRL]
						arm_lt_GRP							[arm_lt_FKC]	;
	move				arm_lt_FKC							0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=upperarm_lt	;
	point_constraint	arm_lt_FKC							armShoulder_lt_SPACE	;

# Add to layer: CONTROLS_FK
	edit_layer			Controls_Special					[arm_gimbal_lt_CTRL]
	;


# RIGHT =====================================================================

# Create control shape for ARM_GIMBAL_RT_CTRL
	create_circle		arm_gimbal_rt_CTRL					 0.0	 0.0	0.0			radius=7
						arm_gimbal_rt_CTRL1					-7.0	 0.0	0.0			radius=1.2	;
	parent				arm_gimbal_rt_CTRL					[arm_gimbal_rt_CTRL1Shape]	relative shape	;
	delete				arm_gimbal_rt_CTRL1	;
	move				arm_gimbal_rt_CTRL					 0.0	 0.0	0.0			relative_to=upperarm_rt	;
	rotate				arm_gimbal_rt_CTRL					 0.0	90.0	0.0			euler	;
	freeze				arm_gimbal_rt_CTRL	;
	parent				arm_rt_GRP							[arm_gimbal_rt_CTRL]
						arm_gimbal_rt_CTRL					[fk_upperarm_rt_CTRL]	;

# Create group: ARM_GIMBAL_RT_RESULT_GRP
	create_group		arm_gimbal_rt_result_GRP	;
	parent				arm_gimbal_rt_result_GRP			[result_upperarm_rt]
						arm_gimbal_rt_resultConst_GRP		[arm_gimbal_rt_result_GRP]	;
	move				arm_gimbal_rt_result_GRP			0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=upperarm_rt	;

# Make ARM_GIMBAL_RT_CTRL to drive rotate attribute of ARM_RT_RESULT-GIMBAL_GRP
	create_node			arm_gimbal_rt_BLND					blendColors	;
	connect_attribute	arm_gimbal_rt_CTRL.rotate			arm_gimbal_rt_BLND.color1	;
	set_attribute		arm_gimbal_rt_BLND.color2R			0
						arm_gimbal_rt_BLND.color2G			0
						arm_gimbal_rt_BLND.color2B			0	;
	connect_attribute	arm_gimbal_rt_BLND.output			arm_gimbal_rt_result_GRP.rotate
						arm_settings_rt_CTRL.ikFkBlend		arm_gimbal_rt_BLND.blender	;

# Drive ARM_GIMBAL_RT_CTRL visibility via ARM_SETTINGS_RT_CTRL' FK visibility
	connect_attribute	arm_settings_rt_CTRL.fkVisibility	arm_gimbal_rt_CTRL.visibility	;

# Create group: ARM_RT_FKC
	create_group		arm_rt_FKC	;
	parent				arm_rt_FKC							[arm_gimbal_rt_CTRL]
						arm_rt_GRP							[arm_rt_FKC]	;
	move				arm_rt_FKC							0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=upperarm_rt	;
	point_constraint	arm_rt_FKC							armShoulder_rt_SPACE	;

# Add to layer: CONTROLS_FK
	edit_layer			Controls_Special					[arm_gimbal_rt_CTRL]
	;


#############################################################################
#### [ ARM ] Space Switchers
#############################################################################

# Create space switchers: BODY and ROOT
	# Create locators
		duplicate			upperarmBody_lt_SPACE				armShoulder_lt_SPACE
							upperarmRoot_lt_SPACE				armShoulder_lt_SPACE	;
		parent				body_GRP|DO_NOT_TOUCH_GRP			[upperarmBody_lt_SPACE]
							offset_CTRL							[upperarmRoot_lt_SPACE]	;
	# Replace constraint with space switchers
		orient_constraint	arm_gimbal_lt_resultConst_GRP		[armShoulder_lt_SPACE, upperarmBody_lt_SPACE, upperarmRoot_lt_SPACE]
							arm_lt_FKC							[armShoulder_lt_SPACE, upperarmBody_lt_SPACE, upperarmRoot_lt_SPACE]	;
	# Create ROTATION-SPACE and TRANSLATION-SPACE attributes to ARM_SETTINGS_LT_CTRL
		add_attribute		arm_settings_lt_CTRL				rotationSpace			enum [shoulder, body, root] defaultValue=0 keyable	;
	# Set driven keys for space switcher enum values
		set_driven_key		arm_settings_lt_CTRL.rotationSpace	0	1		[arm_gimbal_lt_resultConst_GRP_orientConstraint1]	[armShoulder_lt_SPACEW0]
							arm_settings_lt_CTRL.rotationSpace	0	0		[arm_gimbal_lt_resultConst_GRP_orientConstraint1]	[upperarmBody_lt_SPACEW1, upperarmRoot_lt_SPACEW2]
							arm_settings_lt_CTRL.rotationSpace	1	1		[arm_gimbal_lt_resultConst_GRP_orientConstraint1]	[upperarmBody_lt_SPACEW1]
							arm_settings_lt_CTRL.rotationSpace	1	0		[arm_gimbal_lt_resultConst_GRP_orientConstraint1]	[armShoulder_lt_SPACEW0, upperarmRoot_lt_SPACEW2]
							arm_settings_lt_CTRL.rotationSpace	2	1		[arm_gimbal_lt_resultConst_GRP_orientConstraint1]	[upperarmRoot_lt_SPACEW2]
							arm_settings_lt_CTRL.rotationSpace	2	0		[arm_gimbal_lt_resultConst_GRP_orientConstraint1]	[armShoulder_lt_SPACEW0, upperarmBody_lt_SPACEW1]
							arm_settings_lt_CTRL.rotationSpace	0	1		[arm_lt_FKC_orientConstraint1]						[armShoulder_lt_SPACEW0]
							arm_settings_lt_CTRL.rotationSpace	0	0		[arm_lt_FKC_orientConstraint1]						[upperarmBody_lt_SPACEW1, upperarmRoot_lt_SPACEW2]
							arm_settings_lt_CTRL.rotationSpace	1	1		[arm_lt_FKC_orientConstraint1]						[upperarmBody_lt_SPACEW1]
							arm_settings_lt_CTRL.rotationSpace	1	0		[arm_lt_FKC_orientConstraint1]						[armShoulder_lt_SPACEW0, upperarmRoot_lt_SPACEW2]
							arm_settings_lt_CTRL.rotationSpace	2	1		[arm_lt_FKC_orientConstraint1]						[upperarmRoot_lt_SPACEW2]
							arm_settings_lt_CTRL.rotationSpace	2	0		[arm_lt_FKC_orientConstraint1]						[armShoulder_lt_SPACEW0, upperarmBody_lt_SPACEW1]	;

# Update orient constraint of RESULTCONST_GRP to only be driven on FK mode
	create_node				arm_lt_resultConst_orient_BLND										blendColors	;
	connect_attribute		arm_gimbal_lt_resultConst_GRP_orientConstraint1.constraintRotate	arm_lt_resultConst_orient_BLND.color1	;
	set_attribute			arm_lt_resultConst_orient_BLND.color2R								0
							arm_lt_resultConst_orient_BLND.color2G								0
							arm_lt_resultConst_orient_BLND.color2B								0	;
	connect_attribute		arm_lt_resultConst_orient_BLND.outputR								arm_gimbal_lt_resultConst_GRP.rotateX			force
							arm_lt_resultConst_orient_BLND.outputG								arm_gimbal_lt_resultConst_GRP.rotateY			force
							arm_lt_resultConst_orient_BLND.outputB								arm_gimbal_lt_resultConst_GRP.rotateZ			force
							arm_settings_lt_CTRL.ikFkBlend										arm_lt_resultConst_orient_BLND.blender	;


# RIGHT =====================================================================

# Create space switchers: BODY and ROOT
	# Create locators
		duplicate			upperarmBody_rt_SPACE				armShoulder_rt_SPACE
							upperarmRoot_rt_SPACE				armShoulder_rt_SPACE	;
		parent				body_GRP|DO_NOT_TOUCH_GRP			[upperarmBody_rt_SPACE]
							offset_CTRL							[upperarmRoot_rt_SPACE]	;
	# Replace constraint with space switchers
		orient_constraint	arm_gimbal_rt_resultConst_GRP		[armShoulder_rt_SPACE, upperarmBody_rt_SPACE, upperarmRoot_rt_SPACE]
							arm_rt_FKC							[armShoulder_rt_SPACE, upperarmBody_rt_SPACE, upperarmRoot_rt_SPACE]	;
	# Create ROTATION-SPACE and TRANSLATION-SPACE attributes to ARM_SETTINGS_RT_CTRL
		add_attribute		arm_settings_rt_CTRL				rotationSpace			enum [shoulder, body, root] defaultValue=0 keyable	;
	# Set driven keys for space switcher enum values
		set_driven_key		arm_settings_rt_CTRL.rotationSpace	0	1		[arm_gimbal_rt_resultConst_GRP_orientConstraint1]	[armShoulder_rt_SPACEW0]
							arm_settings_rt_CTRL.rotationSpace	0	0		[arm_gimbal_rt_resultConst_GRP_orientConstraint1]	[upperarmBody_rt_SPACEW1, upperarmRoot_rt_SPACEW2]
							arm_settings_rt_CTRL.rotationSpace	1	1		[arm_gimbal_rt_resultConst_GRP_orientConstraint1]	[upperarmBody_rt_SPACEW1]
							arm_settings_rt_CTRL.rotationSpace	1	0		[arm_gimbal_rt_resultConst_GRP_orientConstraint1]	[armShoulder_rt_SPACEW0, upperarmRoot_rt_SPACEW2]
							arm_settings_rt_CTRL.rotationSpace	2	1		[arm_gimbal_rt_resultConst_GRP_orientConstraint1]	[upperarmRoot_rt_SPACEW2]
							arm_settings_rt_CTRL.rotationSpace	2	0		[arm_gimbal_rt_resultConst_GRP_orientConstraint1]	[armShoulder_rt_SPACEW0, upperarmBody_rt_SPACEW1]
							arm_settings_rt_CTRL.rotationSpace	0	1		[arm_rt_FKC_orientConstraint1]						[armShoulder_rt_SPACEW0]
							arm_settings_rt_CTRL.rotationSpace	0	0		[arm_rt_FKC_orientConstraint1]						[upperarmBody_rt_SPACEW1, upperarmRoot_rt_SPACEW2]
							arm_settings_rt_CTRL.rotationSpace	1	1		[arm_rt_FKC_orientConstraint1]						[upperarmBody_rt_SPACEW1]
							arm_settings_rt_CTRL.rotationSpace	1	0		[arm_rt_FKC_orientConstraint1]						[armShoulder_rt_SPACEW0, upperarmRoot_rt_SPACEW2]
							arm_settings_rt_CTRL.rotationSpace	2	1		[arm_rt_FKC_orientConstraint1]						[upperarmRoot_rt_SPACEW2]
							arm_settings_rt_CTRL.rotationSpace	2	0		[arm_rt_FKC_orientConstraint1]						[armShoulder_rt_SPACEW0, upperarmBody_rt_SPACEW1]	;

# Update orient constraint of RESULTCONST_GRP to only be driven on FK mode
	create_node				arm_rt_resultConst_orient_BLND										blendColors	;
	connect_attribute		arm_gimbal_rt_resultConst_GRP_orientConstraint1.constraintRotate	arm_rt_resultConst_orient_BLND.color1	;
	set_attribute			arm_rt_resultConst_orient_BLND.color2R								0
							arm_rt_resultConst_orient_BLND.color2G								0
							arm_rt_resultConst_orient_BLND.color2B								0	;
	connect_attribute		arm_rt_resultConst_orient_BLND.outputR								arm_gimbal_rt_resultConst_GRP.rotateX			force
							arm_rt_resultConst_orient_BLND.outputG								arm_gimbal_rt_resultConst_GRP.rotateY			force
							arm_rt_resultConst_orient_BLND.outputB								arm_gimbal_rt_resultConst_GRP.rotateZ			force
							arm_settings_rt_CTRL.ikFkBlend										arm_rt_resultConst_orient_BLND.blender	;


#############################################################################
#### [ ARM ] Lock And Hide Control Channels
#############################################################################

# Lock-and-Hide channels
	set_attribute		ik_wrist_lt_CTRL_VIS		lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						ik_wrist_lt_CTRL			lock keyable=False channelBox=False		[sx, sy, sz, v]
						ik_elbow_lt_CTRL			lock keyable=False channelBox=False		[sx, sy, sz, v]
						arm_gimbal_lt_CTRL			lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v]
						fk_upperarm_lt_CTRL			lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_lowerarm_lt_CTRL			lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_hand_lt_CTRL				lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_elbow_lowerarm_lt_CTRL	lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_elbow_hand_lt_CTRL		lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						arm_lt_FKC					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						arm_settings_lt_CTRL		lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
	;

# Hide objects
	set_attribute		arm_lt_twist_GRP.visibility							0 #1todo validate this
						armShoulder_lt_SPACE.visibility						0
						upperarmBody_lt_SPACE.visibility					0
						upperarmRoot_lt_SPACE.visibility					0
						upperarmLowerarm_lt_length_end_LOC.visibility		0
						upperarmLowerarm_lt_length_start_LOC.visibility		0
						upperarmLowerarm_lt_length_DIST.visibility			0
						lowerarmHand_lt_length_start_LOC.visibility			0
						lowerarmHand_lt_length_end_LOC.visibility			0
						lowerarmHand_lt_length_DIST.visibility				0
						elbow_lt_LOC.visibility								0
						arm_lt_length_start_LOC.visibility					0
						arm_lt_length_end_LOC.visibility					0
						arm_lt_length_DIST.visibility						0
						arm_lt_HDL.visibility								0
						hand_lt_HDL.visibility								0
	;


# RIGHT =====================================================================

# Lock-and-Hide channels
	set_attribute		ik_wrist_rt_CTRL_VIS		lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						ik_wrist_rt_CTRL			lock keyable=False channelBox=False		[sx, sy, sz, v]
						ik_elbow_rt_CTRL			lock keyable=False channelBox=False		[sx, sy, sz, v]
						arm_gimbal_rt_CTRL			lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v]
						fk_upperarm_rt_CTRL			lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_lowerarm_rt_CTRL			lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_hand_rt_CTRL				lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_elbow_lowerarm_rt_CTRL	lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_elbow_hand_rt_CTRL		lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						arm_rt_FKC					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						arm_settings_rt_CTRL		lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
	;

# Hide objects
	set_attribute		arm_rt_twist_GRP.visibility							0 #1todo validate this
						armShoulder_rt_SPACE.visibility						0
						upperarmBody_rt_SPACE.visibility					0
						upperarmRoot_rt_SPACE.visibility					0
						upperarmLowerarm_rt_length_end_LOC.visibility		0
						upperarmLowerarm_rt_length_start_LOC.visibility		0
						upperarmLowerarm_rt_length_DIST.visibility			0
						lowerarmHand_rt_length_start_LOC.visibility			0
						lowerarmHand_rt_length_end_LOC.visibility			0
						lowerarmHand_rt_length_DIST.visibility				0
						elbow_rt_LOC.visibility								0
						arm_rt_length_start_LOC.visibility					0
						arm_rt_length_end_LOC.visibility					0
						arm_rt_length_DIST.visibility						0
						arm_rt_HDL.visibility								0
						hand_rt_HDL.visibility								0
	;


#############################################################################
#### [ HAND ] Setup
#############################################################################

# Create RESULT joint chain based on SKELETON joint chain
	create_joint		result_pinky_base_lt		0.0		0.0		0.0		relative_to=pinky_base_lt
						result_pinky_01_lt			0.0		0.0		0.0		relative_to=pinky_01_lt
						result_pinky_02_lt			0.0		0.0		0.0		relative_to=pinky_02_lt
						result_pinky_03_lt			0.0		0.0		0.0		relative_to=pinky_03_lt
						result_pinky_04_lt			0.0		0.0		0.0		relative_to=pinky_04_lt	;
	create_joint		result_ring_base_lt			0.0		0.0		0.0		relative_to=ring_base_lt
						result_ring_01_lt			0.0		0.0		0.0		relative_to=ring_01_lt
						result_ring_02_lt			0.0		0.0		0.0		relative_to=ring_02_lt
						result_ring_03_lt			0.0		0.0		0.0		relative_to=ring_03_lt
						result_ring_04_lt			0.0		0.0		0.0		relative_to=ring_04_lt	;
	create_joint		result_middle_base_lt		0.0		0.0		0.0		relative_to=middle_base_lt
						result_middle_01_lt			0.0		0.0		0.0		relative_to=middle_01_lt
						result_middle_02_lt			0.0		0.0		0.0		relative_to=middle_02_lt
						result_middle_03_lt			0.0		0.0		0.0		relative_to=middle_03_lt
						result_middle_04_lt			0.0		0.0		0.0		relative_to=middle_04_lt	;
	create_joint		result_index_base_lt		0.0		0.0		0.0		relative_to=index_base_lt
						result_index_01_lt			0.0		0.0		0.0		relative_to=index_01_lt
						result_index_02_lt			0.0		0.0		0.0		relative_to=index_02_lt
						result_index_03_lt			0.0		0.0		0.0		relative_to=index_03_lt
						result_index_04_lt			0.0		0.0		0.0		relative_to=index_04_lt	;
	create_joint		result_thumb_base_lt		0.0		0.0		0.0		relative_to=thumb_base_lt
						result_thumb_01_lt			0.0		0.0		0.0		relative_to=thumb_01_lt
						result_thumb_02_lt			0.0		0.0		0.0		relative_to=thumb_02_lt
						result_thumb_03_lt			0.0		0.0		0.0		relative_to=thumb_03_lt	;
	create_joint		result_hand_base_lt			0.0		0.0		0.0		relative_to=hand_lt
						result_hand_base_end_lt		0.0		0.0		0.0		relative_to=hand_end_lt	;
	parent				result_hand_base_lt			[result_pinky_base_lt, result_ring_base_lt, result_middle_base_lt, result_index_base_lt, result_thumb_base_lt]	;
	delete				result_hand_base_end_lt	;

# Change RESULT joint rotation orders => [xyz] # TODO support batch in set_attribute for fingers
	set_attribute		result_pinky_base_lt.rotateOrder		1
						result_pinky_01_lt.rotateOrder			1
						result_pinky_02_lt.rotateOrder			1
						result_pinky_03_lt.rotateOrder			1
						result_pinky_04_lt.rotateOrder			1
						result_ring_base_lt.rotateOrder			1
						result_ring_01_lt.rotateOrder			1
						result_ring_02_lt.rotateOrder			1
						result_ring_03_lt.rotateOrder			1
						result_ring_04_lt.rotateOrder			1
						result_middle_base_lt.rotateOrder		1
						result_middle_01_lt.rotateOrder			1
						result_middle_02_lt.rotateOrder			1
						result_middle_03_lt.rotateOrder			1
						result_middle_04_lt.rotateOrder			1
						result_index_base_lt.rotateOrder		1
						result_index_01_lt.rotateOrder			1
						result_index_02_lt.rotateOrder			1
						result_index_03_lt.rotateOrder			1
						result_index_04_lt.rotateOrder			1
						result_thumb_base_lt.rotateOrder		1
						result_thumb_01_lt.rotateOrder			1
						result_thumb_02_lt.rotateOrder			1
						result_thumb_03_lt.rotateOrder			1
	;

# Create THUMB orbit joint # todo - what's orbit for? we need?
	duplicate			result_thumb_orbit_lt								result_thumb_base_lt			parentOnly	;
	parent				result_thumb_base_lt								[result_thumb_orbit_lt]
						result_thumb_orbit_lt								[result_thumb_01_lt]	;

# Re-orient THUMB joint chain
	set_attribute		result_thumb_orbit_lt.rotateX						 53.7
						result_thumb_01_lt.rotateY							 13.6
						result_thumb_01_lt.rotateZ							-12.0
						result_thumb_02_lt.rotateY							  5.5
						result_thumb_02_lt.rotateZ							 -4.5	;
	freeze				result_thumb_orbit_lt								!translate !scale
						result_thumb_01_lt									!translate !scale
						result_thumb_02_lt									!translate !scale	;

# Make RESULT joint chain to drive translate, rotate and scale attributes of DRIVER joint chain
	parent_constraint						driver_hand_lt				result_hand_base_lt
						pinky_base_lt		driver_<0>					result_<0>				batch
						pinky_base_lt		driver_<0>					result_<0>				batch
						ring_base_lt		driver_<0>					result_<0>				batch
						middle_base_lt		driver_<0>					result_<0>				batch
						index_base_lt		driver_<0>					result_<0>				batch
						thumb_base_lt		driver_<0>					result_<0>				batch	;
	connect_attribute						result_hand_base_lt.scale	driver_hand_lt.scale
						pinky_base_lt		result_<0>					driver_<0>				batch		[scale]
						ring_base_lt		result_<0>					driver_<0>				batch		[scale]
						middle_base_lt		result_<0>					driver_<0>				batch		[scale]
						index_base_lt		result_<0>					driver_<0>				batch		[scale]
						thumb_base_lt		result_<0>					driver_<0>				batch		[scale]	;

# Create ORIENT joint chain for RESULT joint chain:
	# Left PINKY orient joint chain
		duplicate		orient_pinky_01_lt		result_pinky_01_lt	;
		find_replace	orient_pinky_01_lt		result_ orient_	;
		parent			orient_pinky_01_lt		[result_pinky_01_lt]
						result_pinky_01_lt		[orient_pinky_02_lt]
						orient_pinky_02_lt		[result_pinky_02_lt]
						result_pinky_02_lt		[orient_pinky_03_lt]
						orient_pinky_03_lt		[result_pinky_03_lt]
						result_pinky_03_lt		[orient_pinky_04_lt]	;
	# Left RING orient joint chain
		duplicate		orient_ring_01_lt		result_ring_01_lt	;
		find_replace	orient_ring_01_lt		result_ orient_	;
		parent			orient_ring_01_lt		[result_ring_01_lt]
						result_ring_01_lt		[orient_ring_02_lt]
						orient_ring_02_lt		[result_ring_02_lt]
						result_ring_02_lt		[orient_ring_03_lt]
						orient_ring_03_lt		[result_ring_03_lt]
						result_ring_03_lt		[orient_ring_04_lt]	;
	# Left MIDDLE orient joint chain
		duplicate		orient_middle_01_lt		result_middle_01_lt	;
		find_replace	orient_middle_01_lt		result_ orient_	;
		parent			orient_middle_01_lt		[result_middle_01_lt]
						result_middle_01_lt		[orient_middle_02_lt]
						orient_middle_02_lt		[result_middle_02_lt]
						result_middle_02_lt		[orient_middle_03_lt]
						orient_middle_03_lt		[result_middle_03_lt]
						result_middle_03_lt		[orient_middle_04_lt]	;
	# Left INDEX orient joint chain
		duplicate		orient_index_01_lt		result_index_01_lt	;
		find_replace	orient_index_01_lt		result_ orient_	;
		parent			orient_index_01_lt		[result_index_01_lt]
						result_index_01_lt		[orient_index_02_lt]
						orient_index_02_lt		[result_index_02_lt]
						result_index_02_lt		[orient_index_03_lt]
						orient_index_03_lt		[result_index_03_lt]
						result_index_03_lt		[orient_index_04_lt]	;
	# Left THUMB orient joint chain
		duplicate		orient_thumb_orbit_lt	result_thumb_orbit_lt	;
		find_replace	orient_thumb_orbit_lt	result_ orient_	;
		parent			orient_thumb_orbit_lt	[result_thumb_orbit_lt]
						result_thumb_orbit_lt	[orient_thumb_01_lt]
						orient_thumb_01_lt		[result_thumb_01_lt]
						result_thumb_01_lt		[orient_thumb_02_lt]
						orient_thumb_02_lt		[result_thumb_02_lt]
						result_thumb_02_lt		[orient_thumb_03_lt]	;

# TODO support batch in set_attribute for fingers

# Add members to layer: SKELETON
	edit_layer			Skeleton				[result_hand_base_lt]
	;


# RIGHT =====================================================================

# Mirror left joint chain to right
	mirror_joint		result_hand_base_lt
	;

# Make RESULT joint chain to drive translate, rotate and scale attributes of DRIVER joint chain
	parent_constraint						driver_hand_rt				result_hand_base_rt
						pinky_base_rt		driver_<0>					result_<0>				batch
						pinky_base_rt		driver_<0>					result_<0>				batch
						ring_base_rt		driver_<0>					result_<0>				batch
						middle_base_rt		driver_<0>					result_<0>				batch
						index_base_rt		driver_<0>					result_<0>				batch
						thumb_base_rt		driver_<0>					result_<0>				batch	;
	connect_attribute						result_hand_base_rt.scale	driver_hand_rt.scale
						pinky_base_rt		result_<0>					driver_<0>				batch		[scale]
						ring_base_rt		result_<0>					driver_<0>				batch		[scale]
						middle_base_rt		result_<0>					driver_<0>				batch		[scale]
						index_base_rt		result_<0>					driver_<0>				batch		[scale]
						thumb_base_rt		result_<0>					driver_<0>				batch		[scale]	;

# Add members to layer: SKELETON
	edit_layer			Skeleton			[result_hand_base_rt]
	;


#############################################################################
#### [ HAND ] FK Setup
#############################################################################

# Create FK / COMPOUND joint chain based on RESULT / ORIENT joint chain
	duplicate			hand_base_lt_CTRL		result_hand_base_lt	;
	find_replace		hand_base_lt_CTRL		result_			fk_
						hand_base_lt_CTRL		orient_			compound_	;

# Make FK joint chain to drive translate, rotate and scale attributes of SKELETON joint chain
	connect_attribute	pinky_base_lt		fk_<0>			result_<0>		batch		[rotate]
						ring_base_lt		fk_<0>			result_<0>		batch		[rotate]
						middle_base_lt		fk_<0>			result_<0>		batch		[rotate]
						index_base_lt		fk_<0>			result_<0>		batch		[rotate]
						thumb_base_lt		fk_<0>			result_<0>		batch		[rotate]
						pinky_01_lt			compound_<0>	orient_<0>		batch		[translate, rotate]
						ring_01_lt			compound_<0>	orient_<0>		batch		[translate, rotate]
						middle_01_lt		compound_<0>	orient_<0>		batch		[translate, rotate]
						index_01_lt			compound_<0>	orient_<0>		batch		[translate, rotate]
						thumb_01_lt			compound_<0>	orient_<0>		batch		[translate, rotate]	;
	connect_attribute	fk_thumb_orbit_lt.rotate			result_thumb_orbit_lt.rotate
						compound_thumb_orbit_lt.translate	orient_thumb_orbit_lt.translate
						compound_thumb_orbit_lt.rotate		orient_thumb_orbit_lt.rotate
						hand_base_lt_CTRL.rotate			result_hand_base_lt.rotate
						hand_base_lt_CTRL.translate			result_hand_base_lt.translate	;

# Rename FK base joints as COMPOUND base joints
	rename				fk_pinky_base_lt					compound_pinky_base_lt
						fk_ring_base_lt						compound_ring_base_lt
						fk_middle_base_lt					compound_middle_base_lt
						fk_index_base_lt					compound_index_base_lt
						fk_thumb_base_lt					compound_thumb_base_lt	;

# Remove member from layer: SKELETON
	edit_layer			Controls_FK							[hand_base_lt_CTRL]
	;


# RIGHT =====================================================================

# Create FK / COMPOUND joint chain based on RESULT / ORIENT joint chain
	duplicate			hand_base_rt_CTRL		result_hand_base_rt	;
	find_replace		hand_base_rt_CTRL		result_			fk_
						hand_base_rt_CTRL		orient_			compound_	;

# Make FK joint chain to drive translate, rotate and scale attributes of SKELETON joint chain
	connect_attribute	pinky_base_rt		fk_<0>			result_<0>		batch		[rotate]
						ring_base_rt		fk_<0>			result_<0>		batch		[rotate]
						middle_base_rt		fk_<0>			result_<0>		batch		[rotate]
						index_base_rt		fk_<0>			result_<0>		batch		[rotate]
						thumb_base_rt		fk_<0>			result_<0>		batch		[rotate]
						pinky_01_rt			compound_<0>	orient_<0>		batch		[translate, rotate]
						ring_01_rt			compound_<0>	orient_<0>		batch		[translate, rotate]
						middle_01_rt		compound_<0>	orient_<0>		batch		[translate, rotate]
						index_01_rt			compound_<0>	orient_<0>		batch		[translate, rotate]
						thumb_01_rt			compound_<0>	orient_<0>		batch		[translate, rotate]	;
	connect_attribute	fk_thumb_orbit_rt.rotate			result_thumb_orbit_rt.rotate
						compound_thumb_orbit_rt.translate	orient_thumb_orbit_rt.translate
						compound_thumb_orbit_rt.rotate		orient_thumb_orbit_rt.rotate
						hand_base_rt_CTRL.rotate			result_hand_base_rt.rotate
						hand_base_rt_CTRL.translate			result_hand_base_rt.translate	;

# Rename FK base joints as COMPOUND base joints
	rename				fk_pinky_base_rt					compound_pinky_base_rt
						fk_ring_base_rt						compound_ring_base_rt
						fk_middle_base_rt					compound_middle_base_rt
						fk_index_base_rt					compound_index_base_rt
						fk_thumb_base_rt					compound_thumb_base_rt	;

# Remove member from layer: SKELETON
	edit_layer			Controls_FK							[hand_base_rt_CTRL]
	;


#############################################################################
#### [ HAND ] FK and COMPOUND Control Setup
#############################################################################

# Create FK controls: Left PINKY
	# Left PINKY_01 FK control
		create_circle	fk_pinky_01_lt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_pinky_01_lt						[fk_pinky_01_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_pinky_01_lt_CTRL_nurbShape		fk_pinky_01_ltShape	;
		rotate			fk_pinky_01_ltShape.cv[0:7]			0.0		90.0	{compound_pinky_01_lt.rotateZ}		euler	;
		move			fk_pinky_01_ltShape.cv[0:7]			0.9		 0.4	 0.0								relative	;
		delete			fk_pinky_01_lt_CTRL_nurb	;
		rename			fk_pinky_01_lt						fk_pinky_01_lt_CTRL	;
	# Left PINKY_02 FK control
		create_circle	fk_pinky_02_lt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_pinky_02_lt						[fk_pinky_02_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_pinky_02_lt_CTRL_nurbShape		fk_pinky_02_ltShape	;
		rotate			fk_pinky_02_ltShape.cv[0:7]			0.0		90.0	{compound_pinky_02_lt.rotateZ}		euler	;
		delete			fk_pinky_02_lt_CTRL_nurb	;
		rename			fk_pinky_02_lt						fk_pinky_02_lt_CTRL	;
	# Left PINKY_03 FK control
		create_circle	fk_pinky_03_lt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_pinky_03_lt						[fk_pinky_03_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_pinky_03_lt_CTRL_nurbShape		fk_pinky_03_ltShape	;
		rotate			fk_pinky_03_ltShape.cv[0:7]			0.0		90.0	{compound_pinky_03_lt.rotateZ}		euler	;
		delete			fk_pinky_03_lt_CTRL_nurb	;
		rename			fk_pinky_03_lt						fk_pinky_03_lt_CTRL	;

# Create FK controls: Left RING
	# Left RING_01 FK control
		create_circle	fk_ring_01_lt_CTRL_nurb				0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_ring_01_lt						[fk_ring_01_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_ring_01_lt_CTRL_nurbShape		fk_ring_01_ltShape	;
		rotate			fk_ring_01_ltShape.cv[0:7]			0.0		90.0	{compound_ring_01_lt.rotateZ}		euler	;
		move			fk_ring_01_ltShape.cv[0:7]			1.2		 0.3	 0.0								relative	;
		delete			fk_ring_01_lt_CTRL_nurb	;
		rename			fk_ring_01_lt						fk_ring_01_lt_CTRL	;
	# Left RING_02 FK control
		create_circle	fk_ring_02_lt_CTRL_nurb				0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_ring_02_lt						[fk_ring_02_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_ring_02_lt_CTRL_nurbShape		fk_ring_02_ltShape	;
		rotate			fk_ring_02_ltShape.cv[0:7]			0.0		90.0	{compound_ring_02_lt.rotateZ}		euler	;
		delete			fk_ring_02_lt_CTRL_nurb	;
		rename			fk_ring_02_lt						fk_ring_02_lt_CTRL	;
	# Left RING_03 FK control
		create_circle	fk_ring_03_lt_CTRL_nurb				0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_ring_03_lt						[fk_ring_03_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_ring_03_lt_CTRL_nurbShape		fk_ring_03_ltShape	;
		rotate			fk_ring_03_ltShape.cv[0:7]			0.0		90.0	{compound_ring_03_lt.rotateZ}		euler	;
		delete			fk_ring_03_lt_CTRL_nurb	;
		rename			fk_ring_03_lt						fk_ring_03_lt_CTRL	;

# Create FK controls: Left MIDDLE
	# Left MIDDLE_01 FK control
		create_circle	fk_middle_01_lt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_middle_01_lt						[fk_middle_01_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_middle_01_lt_CTRL_nurbShape		fk_middle_01_ltShape	;
		rotate			fk_middle_01_ltShape.cv[0:7]		0.0		90.0	{compound_middle_01_lt.rotateZ}		euler	;
		move			fk_middle_01_ltShape.cv[0:7]		1.1		 0.0	 0.0								relative	;
		delete			fk_middle_01_lt_CTRL_nurb	;
		rename			fk_middle_01_lt						fk_middle_01_lt_CTRL	;
	# Left MIDDLE_02 FK control
		create_circle	fk_middle_02_lt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_middle_02_lt						[fk_middle_02_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_middle_02_lt_CTRL_nurbShape		fk_middle_02_ltShape	;
		rotate			fk_middle_02_ltShape.cv[0:7]		0.0		90.0	{compound_middle_02_lt.rotateZ}		euler	;
		delete			fk_middle_02_lt_CTRL_nurb	;
		rename			fk_middle_02_lt						fk_middle_02_lt_CTRL	;
	# Left MIDDLE_03 FK control
		create_circle	fk_middle_03_lt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_middle_03_lt						[fk_middle_03_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_middle_03_lt_CTRL_nurbShape		fk_middle_03_ltShape	;
		rotate			fk_middle_03_ltShape.cv[0:7]		0.0		90.0	{compound_middle_03_lt.rotateZ}		euler	;
		delete			fk_middle_03_lt_CTRL_nurb	;
		rename			fk_middle_03_lt						fk_middle_03_lt_CTRL	;

# Create FK controls: Left INDEX
	# Left INDEX_01 FK control
		create_circle	fk_index_01_lt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_index_01_lt						[fk_index_01_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_index_01_lt_CTRL_nurbShape		fk_index_01_ltShape	;
		rotate			fk_index_01_ltShape.cv[0:7]			0.0		90.0	{compound_index_01_lt.rotateZ}		euler	;
		move			fk_index_01_ltShape.cv[0:7]			1.0		-0.2	 0.0								relative	;
		delete			fk_index_01_lt_CTRL_nurb	;
		rename			fk_index_01_lt						fk_index_01_lt_CTRL	;
	# Left INDEX_02 FK control
		create_circle	fk_index_02_lt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_index_02_lt						[fk_index_02_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_index_02_lt_CTRL_nurbShape		fk_index_02_ltShape	;
		rotate			fk_index_02_ltShape.cv[0:7]			0.0		90.0	{compound_index_02_lt.rotateZ}		euler	;
		delete			fk_index_02_lt_CTRL_nurb	;
		rename			fk_index_02_lt						fk_index_02_lt_CTRL	;
	# Left INDEX_03 FK control
		create_circle	fk_index_03_lt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_index_03_lt						[fk_index_03_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_index_03_lt_CTRL_nurbShape		fk_index_03_ltShape	;
		rotate			fk_index_03_ltShape.cv[0:7]			0.0		90.0	{compound_index_03_lt.rotateZ}		euler	;
		delete			fk_index_03_lt_CTRL_nurb	;
		rename			fk_index_03_lt						fk_index_03_lt_CTRL	;

# Create FK controls: Left THUMB
	# Left THUMB_ORBIT FK control
		create_circle	fk_thumb_orbit_lt_CTRL_nurb			0.0		 0.0	 0.0								radius=2	;
		parent			fk_thumb_orbit_lt					[fk_thumb_orbit_lt_CTRL_nurbShape]					relative shape	;
		rename			fk_thumb_orbit_lt_CTRL_nurbShape	fk_thumb_orbit_ltShape	;
		rotate			fk_thumb_orbit_ltShape.cv[0:7]		0.0		90.0	{compound_thumb_orbit_lt.rotateZ}	euler	;
		delete			fk_thumb_orbit_lt_CTRL_nurb	;
		rename			fk_thumb_orbit_lt					fk_thumb_orbit_lt_CTRL	;
	# Left THUMB_01 FK control
		create_circle	fk_thumb_01_lt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.5	;
		parent			fk_thumb_01_lt						[fk_thumb_01_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_thumb_01_lt_CTRL_nurbShape		fk_thumb_01_ltShape	;
		rotate			fk_thumb_01_ltShape.cv[0:7]			0.0		90.0	{compound_thumb_01_lt.rotateZ}		euler	;
		move			fk_thumb_01_ltShape.cv[0:7]			1.1		-1.0	-0.5								relative	;
		delete			fk_thumb_01_lt_CTRL_nurb	;
		rename			fk_thumb_01_lt						fk_thumb_01_lt_CTRL	;
	# Left THUMB_02 FK control
		create_circle	fk_thumb_02_lt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_thumb_02_lt						[fk_thumb_02_lt_CTRL_nurbShape]						relative shape	;
		rename			fk_thumb_02_lt_CTRL_nurbShape		fk_thumb_02_ltShape	;
		rotate			fk_thumb_02_ltShape.cv[0:7]			0.0		90.0	{compound_thumb_02_lt.rotateZ}		euler	;
		delete			fk_thumb_02_lt_CTRL_nurb	;
		rename			fk_thumb_02_lt						fk_thumb_02_lt_CTRL	;

# Create COMPOUND controls
	# Left PINKY_LT_CTRL control
		create_circle	pinky_lt_CTRL			 0.0	 0.0	0.0		radius=0.9	;
		rotate			pinky_lt_CTRL			 0.0	90.0	0.0		euler worldSpace	;
		move			pinky_lt_CTRL			-1.0	 0.0	4.0		relative_to=pinky_01_lt	;
		freeze			pinky_lt_CTRL	;
	# Left RING_LT_CTRL control
		create_circle	ring_lt_CTRL			 0.0	-2.0	0.0		radius=0.9	;
		rotate			ring_lt_CTRL			 0.0	90.0	0.0		euler worldSpace	;
		move			ring_lt_CTRL			-1.0	 0.0	4.0		relative_to=pinky_01_lt	;
		center_pivot	ring_lt_CTRL	;
		freeze			ring_lt_CTRL	;
	# Left MIDDLE_LT_CTRL control
		create_circle	middle_lt_CTRL			 0.0	-4.0	0.0		radius=0.9	;
		rotate			middle_lt_CTRL			 0.0	90.0	0.0		euler worldSpace	;
		move			middle_lt_CTRL			-1.0	 0.0	4.0		relative_to=pinky_01_lt	;
		center_pivot	middle_lt_CTRL	;
		freeze			middle_lt_CTRL	;
	# Left INDEX_LT_CTRL control
		create_circle	index_lt_CTRL			 0.0	-6.0	0.0		radius=0.9	;
		rotate			index_lt_CTRL			 0.0	90.0	0.0		euler worldSpace	;
		move			index_lt_CTRL			-1.0	 0.0	4.0		relative_to=pinky_01_lt	;
		center_pivot	index_lt_CTRL	;
		freeze			index_lt_CTRL	;
	# Left THUMB_LT_CTRL control
		create_circle	thumb_lt_CTRL			 0.0	 0.0	0.0		radius=0.9	;
		rotate			thumb_lt_CTRL			 0.0	90.0			{compound_thumb_base_lt.jointOrientZ}		euler ;
		move			thumb_lt_CTRL			 0.0	 0.0	4.0		relative_to=thumb_01_lt	;
		center_pivot	thumb_lt_CTRL	;
		freeze			thumb_lt_CTRL	;

# Add members to their respective layers
	edit_layer			Controls_FK				[fk_pinky_01_lt_CTRL, fk_pinky_02_lt_CTRL, fk_pinky_03_lt_CTRL]
						Controls_FK				[fk_ring_01_lt_CTRL, fk_ring_02_lt_CTRL, fk_ring_03_lt_CTRL]
						Controls_FK				[fk_middle_01_lt_CTRL, fk_middle_02_lt_CTRL, fk_middle_03_lt_CTRL]
						Controls_FK				[fk_index_01_lt_CTRL, fk_index_02_lt_CTRL, fk_index_03_lt_CTRL]
						Controls_FK				[fk_thumb_orbit_lt_CTRL, fk_thumb_01_lt_CTRL, fk_thumb_02_lt_CTRL]
	;


# RIGHT =====================================================================

# Create FK controls: Left PINKY
	# Left PINKY_01 FK control
		create_circle	fk_pinky_01_rt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_pinky_01_rt						[fk_pinky_01_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_pinky_01_rt_CTRL_nurbShape		fk_pinky_01_rtShape	;
		rotate			fk_pinky_01_rtShape.cv[0:7]			0.0		90.0	{compound_pinky_01_rt.rotateZ}		euler	;
		move			fk_pinky_01_rtShape.cv[0:7]			0.9		 0.4	 0.0								relative	;
		delete			fk_pinky_01_rt_CTRL_nurb	;
		rename			fk_pinky_01_rt						fk_pinky_01_rt_CTRL	;
	# Left PINKY_02 FK control
		create_circle	fk_pinky_02_rt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_pinky_02_rt						[fk_pinky_02_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_pinky_02_rt_CTRL_nurbShape		fk_pinky_02_rtShape	;
		rotate			fk_pinky_02_rtShape.cv[0:7]			0.0		90.0	{compound_pinky_02_rt.rotateZ}		euler	;
		delete			fk_pinky_02_rt_CTRL_nurb	;
		rename			fk_pinky_02_rt						fk_pinky_02_rt_CTRL	;
	# Left PINKY_03 FK control
		create_circle	fk_pinky_03_rt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_pinky_03_rt						[fk_pinky_03_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_pinky_03_rt_CTRL_nurbShape		fk_pinky_03_rtShape	;
		rotate			fk_pinky_03_rtShape.cv[0:7]			0.0		90.0	{compound_pinky_03_rt.rotateZ}		euler	;
		delete			fk_pinky_03_rt_CTRL_nurb	;
		rename			fk_pinky_03_rt						fk_pinky_03_rt_CTRL	;

# Create FK controls: Left RING
	# Left RING_01 FK control
		create_circle	fk_ring_01_rt_CTRL_nurb				0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_ring_01_rt						[fk_ring_01_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_ring_01_rt_CTRL_nurbShape		fk_ring_01_rtShape	;
		rotate			fk_ring_01_rtShape.cv[0:7]			0.0		90.0	{compound_ring_01_rt.rotateZ}		euler	;
		move			fk_ring_01_rtShape.cv[0:7]			1.2		 0.3	 0.0								relative	;
		delete			fk_ring_01_rt_CTRL_nurb	;
		rename			fk_ring_01_rt						fk_ring_01_rt_CTRL	;
	# Left RING_02 FK control
		create_circle	fk_ring_02_rt_CTRL_nurb				0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_ring_02_rt						[fk_ring_02_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_ring_02_rt_CTRL_nurbShape		fk_ring_02_rtShape	;
		rotate			fk_ring_02_rtShape.cv[0:7]			0.0		90.0	{compound_ring_02_rt.rotateZ}		euler	;
		delete			fk_ring_02_rt_CTRL_nurb	;
		rename			fk_ring_02_rt						fk_ring_02_rt_CTRL	;
	# Left RING_03 FK control
		create_circle	fk_ring_03_rt_CTRL_nurb				0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_ring_03_rt						[fk_ring_03_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_ring_03_rt_CTRL_nurbShape		fk_ring_03_rtShape	;
		rotate			fk_ring_03_rtShape.cv[0:7]			0.0		90.0	{compound_ring_03_rt.rotateZ}		euler	;
		delete			fk_ring_03_rt_CTRL_nurb	;
		rename			fk_ring_03_rt						fk_ring_03_rt_CTRL	;

# Create FK controls: Left MIDDLE
	# Left MIDDLE_01 FK control
		create_circle	fk_middle_01_rt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_middle_01_rt						[fk_middle_01_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_middle_01_rt_CTRL_nurbShape		fk_middle_01_rtShape	;
		rotate			fk_middle_01_rtShape.cv[0:7]		0.0		90.0	{compound_middle_01_rt.rotateZ}		euler	;
		move			fk_middle_01_rtShape.cv[0:7]		1.1		 0.0	 0.0								relative	;
		delete			fk_middle_01_rt_CTRL_nurb	;
		rename			fk_middle_01_rt						fk_middle_01_rt_CTRL	;
	# Left MIDDLE_02 FK control
		create_circle	fk_middle_02_rt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_middle_02_rt						[fk_middle_02_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_middle_02_rt_CTRL_nurbShape		fk_middle_02_rtShape	;
		rotate			fk_middle_02_rtShape.cv[0:7]		0.0		90.0	{compound_middle_02_rt.rotateZ}		euler	;
		delete			fk_middle_02_rt_CTRL_nurb	;
		rename			fk_middle_02_rt						fk_middle_02_rt_CTRL	;
	# Left MIDDLE_03 FK control
		create_circle	fk_middle_03_rt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_middle_03_rt						[fk_middle_03_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_middle_03_rt_CTRL_nurbShape		fk_middle_03_rtShape	;
		rotate			fk_middle_03_rtShape.cv[0:7]		0.0		90.0	{compound_middle_03_rt.rotateZ}		euler	;
		delete			fk_middle_03_rt_CTRL_nurb	;
		rename			fk_middle_03_rt						fk_middle_03_rt_CTRL	;

# Create FK controls: Left INDEX
	# Left INDEX_01 FK control
		create_circle	fk_index_01_rt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_index_01_rt						[fk_index_01_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_index_01_rt_CTRL_nurbShape		fk_index_01_rtShape	;
		rotate			fk_index_01_rtShape.cv[0:7]			0.0		90.0	{compound_index_01_rt.rotateZ}		euler	;
		move			fk_index_01_rtShape.cv[0:7]			1.0		-0.2	 0.0								relative	;
		delete			fk_index_01_rt_CTRL_nurb	;
		rename			fk_index_01_rt						fk_index_01_rt_CTRL	;
	# Left INDEX_02 FK control
		create_circle	fk_index_02_rt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_index_02_rt						[fk_index_02_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_index_02_rt_CTRL_nurbShape		fk_index_02_rtShape	;
		rotate			fk_index_02_rtShape.cv[0:7]			0.0		90.0	{compound_index_02_rt.rotateZ}		euler	;
		delete			fk_index_02_rt_CTRL_nurb	;
		rename			fk_index_02_rt						fk_index_02_rt_CTRL	;
	# Left INDEX_03 FK control
		create_circle	fk_index_03_rt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_index_03_rt						[fk_index_03_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_index_03_rt_CTRL_nurbShape		fk_index_03_rtShape	;
		rotate			fk_index_03_rtShape.cv[0:7]			0.0		90.0	{compound_index_03_rt.rotateZ}		euler	;
		delete			fk_index_03_rt_CTRL_nurb	;
		rename			fk_index_03_rt						fk_index_03_rt_CTRL	;

# Create FK controls: Left THUMB
	# Left THUMB_ORBIT FK control
		create_circle	fk_thumb_orbit_rt_CTRL_nurb			0.0		 0.0	 0.0								radius=2	;
		parent			fk_thumb_orbit_rt					[fk_thumb_orbit_rt_CTRL_nurbShape]					relative shape	;
		rename			fk_thumb_orbit_rt_CTRL_nurbShape	fk_thumb_orbit_rtShape	;
		rotate			fk_thumb_orbit_rtShape.cv[0:7]		0.0		90.0	{compound_thumb_orbit_rt.rotateZ}	euler	;
		delete			fk_thumb_orbit_rt_CTRL_nurb	;
		rename			fk_thumb_orbit_rt					fk_thumb_orbit_rt_CTRL	;
	# Left THUMB_01 FK control
		create_circle	fk_thumb_01_rt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.5	;
		parent			fk_thumb_01_rt						[fk_thumb_01_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_thumb_01_rt_CTRL_nurbShape		fk_thumb_01_rtShape	;
		rotate			fk_thumb_01_rtShape.cv[0:7]			0.0		90.0	{compound_thumb_01_rt.rotateZ}		euler	;
		move			fk_thumb_01_rtShape.cv[0:7]			1.1		-1.0	-0.5								relative	;
		delete			fk_thumb_01_rt_CTRL_nurb	;
		rename			fk_thumb_01_rt						fk_thumb_01_rt_CTRL	;
	# Left THUMB_02 FK control
		create_circle	fk_thumb_02_rt_CTRL_nurb			0.0		 0.0	 0.0								radius=1.2	;
		parent			fk_thumb_02_rt						[fk_thumb_02_rt_CTRL_nurbShape]						relative shape	;
		rename			fk_thumb_02_rt_CTRL_nurbShape		fk_thumb_02_rtShape	;
		rotate			fk_thumb_02_rtShape.cv[0:7]			0.0		90.0	{compound_thumb_02_rt.rotateZ}		euler	;
		delete			fk_thumb_02_rt_CTRL_nurb	;
		rename			fk_thumb_02_rt						fk_thumb_02_rt_CTRL	;

# Create COMPOUND controls
	# Left PINKY_RT_CTRL control
		create_circle	pinky_rt_CTRL			 0.0	 0.0	0.0		radius=0.9	;
		rotate			pinky_rt_CTRL			 0.0	90.0	0.0		euler worldSpace	;
		move			pinky_rt_CTRL			-1.0	 0.0	4.0		relative_to=pinky_01_rt	;
		freeze			pinky_rt_CTRL	;
	# Left RING_RT_CTRL control
		create_circle	ring_rt_CTRL			 0.0	-2.0	0.0		radius=0.9	;
		rotate			ring_rt_CTRL			 0.0	90.0	0.0		euler worldSpace	;
		move			ring_rt_CTRL			-1.0	 0.0	4.0		relative_to=pinky_01_rt	;
		center_pivot	ring_rt_CTRL	;
		freeze			ring_rt_CTRL	;
	# Left MIDDLE_RT_CTRL control
		create_circle	middle_rt_CTRL			 0.0	-4.0	0.0		radius=0.9	;
		rotate			middle_rt_CTRL			 0.0	90.0	0.0		euler worldSpace	;
		move			middle_rt_CTRL			-1.0	 0.0	4.0		relative_to=pinky_01_rt	;
		center_pivot	middle_rt_CTRL	;
		freeze			middle_rt_CTRL	;
	# Left INDEX_RT_CTRL control
		create_circle	index_rt_CTRL			 0.0	-6.0	0.0		radius=0.9	;
		rotate			index_rt_CTRL			 0.0	90.0	0.0		euler worldSpace	;
		move			index_rt_CTRL			-1.0	 0.0	4.0		relative_to=pinky_01_rt	;
		center_pivot	index_rt_CTRL	;
		freeze			index_rt_CTRL	;
	# Left THUMB_RT_CTRL control
		create_circle	thumb_rt_CTRL			 0.0	 0.0	0.0		radius=0.9	;
		rotate			thumb_rt_CTRL			 0.0	90.0			{compound_thumb_base_rt.jointOrientZ}		euler ;
		move			thumb_rt_CTRL			 0.0	 0.0	4.0		relative_to=thumb_01_rt	;
		center_pivot	thumb_rt_CTRL	;
		freeze			thumb_rt_CTRL	;

# Add members to their respective layers
	edit_layer			Controls_FK				[fk_pinky_01_rt_CTRL, fk_pinky_02_rt_CTRL, fk_pinky_03_rt_CTRL]
						Controls_FK				[fk_ring_01_rt_CTRL, fk_ring_02_rt_CTRL, fk_ring_03_rt_CTRL]
						Controls_FK				[fk_middle_01_rt_CTRL, fk_middle_02_rt_CTRL, fk_middle_03_rt_CTRL]
						Controls_FK				[fk_index_01_rt_CTRL, fk_index_02_rt_CTRL, fk_index_03_rt_CTRL]
						Controls_FK				[fk_thumb_orbit_rt_CTRL, fk_thumb_01_rt_CTRL, fk_thumb_02_rt_CTRL]
	;


#############################################################################
#### [ HAND ] FK Stretch
#############################################################################

# Setup STRETCH joint length attributes:
	# Left PINKY length
		add_attribute		pinky_lt_CTRL						length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		pinky_lt_CTRL.length	-	-		[compound_pinky_02_lt, compound_pinky_03_lt, compound_pinky_04_lt]			[translateX]
							pinky_lt_CTRL.length	0	0		[compound_pinky_02_lt, compound_pinky_03_lt, compound_pinky_04_lt]			[translateX]	;
		key_tangent			[translateX]						[compound_pinky_02_lt, compound_pinky_03_lt, compound_pinky_04_lt]			inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]						[compound_pinky_02_lt, compound_pinky_03_lt, compound_pinky_04_lt]			postInfinite="linear"	;
	# Left RING length
		add_attribute		ring_lt_CTRL						length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		ring_lt_CTRL.length		-	-		[compound_ring_02_lt, compound_ring_03_lt, compound_ring_04_lt]				[translateX]
							ring_lt_CTRL.length		0	0		[compound_ring_02_lt, compound_ring_03_lt, compound_ring_04_lt]				[translateX]	;
		key_tangent			[translateX]						[compound_ring_02_lt, compound_ring_03_lt, compound_ring_04_lt]				inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]						[compound_ring_02_lt, compound_ring_03_lt, compound_ring_04_lt]				postInfinite="linear"	;
	# Left MIDDLE length
		add_attribute		middle_lt_CTRL						length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		middle_lt_CTRL.length		-	-	[compound_middle_02_lt, compound_middle_03_lt, compound_middle_04_lt]		[translateX]
							middle_lt_CTRL.length		0	0	[compound_middle_02_lt, compound_middle_03_lt, compound_middle_04_lt]		[translateX]	;
		key_tangent			[translateX]						[compound_middle_02_lt, compound_middle_03_lt, compound_middle_04_lt]		inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]						[compound_middle_02_lt, compound_middle_03_lt, compound_middle_04_lt]		postInfinite="linear"	;
	# Left INDEX length
		add_attribute		index_lt_CTRL						length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		index_lt_CTRL.length		-	-	[compound_index_02_lt, compound_index_03_lt, compound_index_04_lt]			[translateX]
							index_lt_CTRL.length		0	0	[compound_index_02_lt, compound_index_03_lt, compound_index_04_lt]			[translateX]	;
		key_tangent			[translateX]						[compound_index_02_lt, compound_index_03_lt, compound_index_04_lt]			inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]						[compound_index_02_lt, compound_index_03_lt, compound_index_04_lt]			postInfinite="linear"	;
	# Left THUMB length
		add_attribute		thumb_lt_CTRL						length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		thumb_lt_CTRL.length		-	-	[compound_thumb_01_lt, compound_thumb_02_lt, compound_thumb_03_lt]			[translateX]
							thumb_lt_CTRL.length		0	0	[compound_thumb_01_lt, compound_thumb_02_lt, compound_thumb_03_lt]			[translateX]	;
		key_tangent			[translateX]						[compound_thumb_01_lt, compound_thumb_02_lt, compound_thumb_03_lt]			inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]						[compound_thumb_01_lt, compound_thumb_02_lt, compound_thumb_03_lt]			postInfinite="linear"	;


# RIGHT =====================================================================

# Setup STRETCH joint length attributes:
	# Left PINKY length
		add_attribute		pinky_rt_CTRL						length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		pinky_rt_CTRL.length	-	-		[compound_pinky_02_rt, compound_pinky_03_rt, compound_pinky_04_rt]			[translateX]
							pinky_rt_CTRL.length	0	0		[compound_pinky_02_rt, compound_pinky_03_rt, compound_pinky_04_rt]			[translateX]	;
		key_tangent			[translateX]						[compound_pinky_02_rt, compound_pinky_03_rt, compound_pinky_04_rt]			inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]						[compound_pinky_02_rt, compound_pinky_03_rt, compound_pinky_04_rt]			postInfinite="linear"	;
	# Left RING length
		add_attribute		ring_rt_CTRL						length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		ring_rt_CTRL.length		-	-		[compound_ring_02_rt, compound_ring_03_rt, compound_ring_04_rt]				[translateX]
							ring_rt_CTRL.length		0	0		[compound_ring_02_rt, compound_ring_03_rt, compound_ring_04_rt]				[translateX]	;
		key_tangent			[translateX]						[compound_ring_02_rt, compound_ring_03_rt, compound_ring_04_rt]				inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]						[compound_ring_02_rt, compound_ring_03_rt, compound_ring_04_rt]				postInfinite="linear"	;
	# Left MIDDLE length
		add_attribute		middle_rt_CTRL						length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		middle_rt_CTRL.length		-	-	[compound_middle_02_rt, compound_middle_03_rt, compound_middle_04_rt]		[translateX]
							middle_rt_CTRL.length		0	0	[compound_middle_02_rt, compound_middle_03_rt, compound_middle_04_rt]		[translateX]	;
		key_tangent			[translateX]						[compound_middle_02_rt, compound_middle_03_rt, compound_middle_04_rt]		inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]						[compound_middle_02_rt, compound_middle_03_rt, compound_middle_04_rt]		postInfinite="linear"	;
	# Left INDEX length
		add_attribute		index_rt_CTRL						length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		index_rt_CTRL.length		-	-	[compound_index_02_rt, compound_index_03_rt, compound_index_04_rt]			[translateX]
							index_rt_CTRL.length		0	0	[compound_index_02_rt, compound_index_03_rt, compound_index_04_rt]			[translateX]	;
		key_tangent			[translateX]						[compound_index_02_rt, compound_index_03_rt, compound_index_04_rt]			inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]						[compound_index_02_rt, compound_index_03_rt, compound_index_04_rt]			postInfinite="linear"	;
	# Left THUMB length
		add_attribute		thumb_rt_CTRL						length float minValue=0 defaultValue=1 keyable	;
		set_driven_key		thumb_rt_CTRL.length		-	-	[compound_thumb_01_rt, compound_thumb_02_rt, compound_thumb_03_rt]			[translateX]
							thumb_rt_CTRL.length		0	0	[compound_thumb_01_rt, compound_thumb_02_rt, compound_thumb_03_rt]			[translateX]	;
		key_tangent			[translateX]						[compound_thumb_01_rt, compound_thumb_02_rt, compound_thumb_03_rt]			inTangentType="spline" outTangentType="spline"	;
		set_infinity		[translateX]						[compound_thumb_01_rt, compound_thumb_02_rt, compound_thumb_03_rt]			postInfinite="linear"	;


#############################################################################
#### [ HAND ] Individual COMPOUND Controls
#############################################################################

# Add CURL attribute to COMPOUND joint controls
	# Add CURL attribute
		add_attribute	pinky_lt_CTRL			curl			float minValue=-10 maxValue=10 defaultValue=0 keyable
						ring_lt_CTRL			curl			float minValue=-10 maxValue=10 defaultValue=0 keyable
						middle_lt_CTRL			curl			float minValue=-10 maxValue=10 defaultValue=0 keyable
						index_lt_CTRL			curl			float minValue=-10 maxValue=10 defaultValue=0 keyable
						thumb_lt_CTRL			curl			float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make CURL attribute to drive rotation of COMPOUND joints
		set_driven_key	pinky_lt_CTRL.curl		---		---		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateY]
						ring_lt_CTRL.curl		---		---		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateY]
						middle_lt_CTRL.curl		---		---		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateY]
						index_lt_CTRL.curl		---		---		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateY]
						thumb_lt_CTRL.curl		---		---		[compound_thumb_01_lt, compound_thumb_02_lt]							[rotateY]
						pinky_lt_CTRL.curl		 10		 90		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateY]
						ring_lt_CTRL.curl		 10		 90		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateY]
						middle_lt_CTRL.curl		 10		 90		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateY]
						index_lt_CTRL.curl		 10		 90		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateY]
						thumb_lt_CTRL.curl		 10		 56		[compound_thumb_01_lt, compound_thumb_02_lt]							[rotateY]
						pinky_lt_CTRL.curl		-10		-15		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateY]
						ring_lt_CTRL.curl		-10		-15		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateY]
						middle_lt_CTRL.curl		-10		-15		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateY]
						index_lt_CTRL.curl		-10		-15		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateY]
						thumb_lt_CTRL.curl		-10		-49		[compound_thumb_01_lt]													[rotateY]
						thumb_lt_CTRL.curl		-10		-13		[compound_thumb_02_lt]													[rotateY]	;

# Add SCRUNCH attribute to COMPOUND joint controls
	# Add SCRUNCH attribute
		add_attribute	pinky_lt_CTRL			scrunch			float minValue=-10 maxValue=10 defaultValue=0 keyable
						ring_lt_CTRL			scrunch			float minValue=-10 maxValue=10 defaultValue=0 keyable
						middle_lt_CTRL			scrunch			float minValue=-10 maxValue=10 defaultValue=0 keyable
						index_lt_CTRL			scrunch			float minValue=-10 maxValue=10 defaultValue=0 keyable
						thumb_lt_CTRL			scrunch			float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make SCRUNCH attribute to drive rotation of COMPOUND joints
		set_driven_key	pinky_lt_CTRL.scrunch	---		---		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateY]
						ring_lt_CTRL.scrunch	---		---		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateY]
						middle_lt_CTRL.scrunch	---		---		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateY]
						index_lt_CTRL.scrunch	---		---		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateY]
						thumb_lt_CTRL.scrunch	---		---		[compound_thumb_orbit_lt, compound_thumb_01_lt, compound_thumb_02_lt]	[rotateY]
						thumb_lt_CTRL.scrunch	---		---		[compound_thumb_orbit_lt]												[rotateX]
						pinky_lt_CTRL.scrunch	 10		-42		[compound_pinky_01_lt]													[rotateY]
						ring_lt_CTRL.scrunch	 10		-42		[compound_ring_01_lt]													[rotateY]
						middle_lt_CTRL.scrunch	 10		-42		[compound_middle_01_lt]													[rotateY]
						index_lt_CTRL.scrunch	 10		-42		[compound_index_01_lt]													[rotateY]
						thumb_lt_CTRL.scrunch	 10		-48		[compound_thumb_orbit_lt]												[rotateX]
						thumb_lt_CTRL.scrunch	 10		  1		[compound_thumb_orbit_lt]												[rotateY]
						pinky_lt_CTRL.scrunch	 10		120		[compound_pinky_02_lt]													[rotateY]
						ring_lt_CTRL.scrunch	 10		120		[compound_ring_02_lt]													[rotateY]
						middle_lt_CTRL.scrunch	 10		120		[compound_middle_02_lt]													[rotateY]
						index_lt_CTRL.scrunch	 10		120		[compound_index_02_lt]													[rotateY]
						thumb_lt_CTRL.scrunch	 10		-55		[compound_thumb_01_lt]													[rotateY]
						pinky_lt_CTRL.scrunch	 10		 55		[compound_pinky_03_lt]													[rotateY]
						ring_lt_CTRL.scrunch	 10		 55		[compound_ring_03_lt]													[rotateY]
						middle_lt_CTRL.scrunch	 10		 55		[compound_middle_03_lt]													[rotateY]
						index_lt_CTRL.scrunch	 10		 55		[compound_index_03_lt]													[rotateY]
						thumb_lt_CTRL.scrunch	 10		 86		[compound_thumb_02_lt]													[rotateY]
						pinky_lt_CTRL.scrunch	-10		 13		[compound_pinky_01_lt]													[rotateY]
						ring_lt_CTRL.scrunch	-10		 13		[compound_ring_01_lt]													[rotateY]
						middle_lt_CTRL.scrunch	-10		 13		[compound_middle_01_lt]													[rotateY]
						index_lt_CTRL.scrunch	-10		 13		[compound_index_01_lt]													[rotateY]
						thumb_lt_CTRL.scrunch	-10		-53		[compound_thumb_orbit_lt]												[rotateX]
						thumb_lt_CTRL.scrunch	-10		-10		[compound_thumb_orbit_lt]												[rotateY]
						pinky_lt_CTRL.scrunch	-10		-12		[compound_pinky_02_lt]													[rotateY]
						ring_lt_CTRL.scrunch	-10		-12		[compound_ring_02_lt]													[rotateY]
						middle_lt_CTRL.scrunch	-10		-12		[compound_middle_02_lt]													[rotateY]
						index_lt_CTRL.scrunch	-10		-12		[compound_index_02_lt]													[rotateY]
						thumb_lt_CTRL.scrunch	-10		  7		[compound_thumb_01_lt]													[rotateY]
						pinky_lt_CTRL.scrunch	-10		-11		[compound_pinky_03_lt]													[rotateY]
						ring_lt_CTRL.scrunch	-10		-11		[compound_ring_03_lt]													[rotateY]
						middle_lt_CTRL.scrunch	-10		-11		[compound_middle_03_lt]													[rotateY]
						index_lt_CTRL.scrunch	-10		-11		[compound_index_03_lt]													[rotateY]
						thumb_lt_CTRL.scrunch	-10		-14		[compound_thumb_02_lt]													[rotateY]	;

# Add LEAN attribute to COMPOUND joint controls
	# Add LEAN attribute
		add_attribute	pinky_lt_CTRL			lean			float minValue=-10 maxValue=10 defaultValue=0 keyable
						ring_lt_CTRL			lean			float minValue=-10 maxValue=10 defaultValue=0 keyable
						middle_lt_CTRL			lean			float minValue=-10 maxValue=10 defaultValue=0 keyable
						index_lt_CTRL			lean			float minValue=-10 maxValue=10 defaultValue=0 keyable
						thumb_lt_CTRL			lean			float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make LEAN attribute to drive rotation of COMPOUND joints
		set_driven_key	pinky_lt_CTRL.lean		---		---		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateZ]
						ring_lt_CTRL.lean		---		---		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateZ]
						middle_lt_CTRL.lean		---		---		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateZ]
						index_lt_CTRL.lean		---		---		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateZ]
						thumb_lt_CTRL.lean		---		---		[compound_thumb_orbit_lt, compound_thumb_01_lt, compound_thumb_02_lt]	[rotateZ]
						pinky_lt_CTRL.lean		 10		 25		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateZ]
						ring_lt_CTRL.lean		 10		 25		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateZ]
						middle_lt_CTRL.lean		 10		 25		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateZ]
						index_lt_CTRL.lean		 10		 25		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateZ]
						thumb_lt_CTRL.lean		 10		 26		[compound_thumb_orbit_lt, compound_thumb_01_lt, compound_thumb_02_lt]	[rotateZ]
						pinky_lt_CTRL.lean		-10		-25		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateZ]
						ring_lt_CTRL.lean		-10		-25		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateZ]
						middle_lt_CTRL.lean		-10		-25		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateZ]
						index_lt_CTRL.lean		-10		-25		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateZ]
						thumb_lt_CTRL.lean		-10		-29		[compound_thumb_orbit_lt, compound_thumb_01_lt, compound_thumb_02_lt]	[rotateZ]	;

# Add RELAX attribute to COMPOUND joint controls
	# Add RELAX attribute
		add_attribute	pinky_lt_CTRL			relax			float minValue=0 maxValue=10 defaultValue=0 keyable
						ring_lt_CTRL			relax			float minValue=0 maxValue=10 defaultValue=0 keyable
						middle_lt_CTRL			relax			float minValue=0 maxValue=10 defaultValue=0 keyable
						index_lt_CTRL			relax			float minValue=0 maxValue=10 defaultValue=0 keyable
						thumb_lt_CTRL			relax			float minValue=0 maxValue=10 defaultValue=0 keyable	;
	# Make RELAX attribute to drive rotation of COMPOUND joints
		set_driven_key	pinky_lt_CTRL.relax		---		---		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateY]
						ring_lt_CTRL.relax		---		---		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateY]
						middle_lt_CTRL.relax	---		---		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateY]
						index_lt_CTRL.relax		---		---		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateY]
						thumb_lt_CTRL.relax		---		---		[compound_thumb_orbit_lt, compound_thumb_01_lt, compound_thumb_02_lt]	[rotateY]
						pinky_lt_CTRL.relax		 10		 34		[compound_pinky_01_lt]													[rotateY]
						ring_lt_CTRL.relax		 10		 28		[compound_ring_01_lt]													[rotateY]
						middle_lt_CTRL.relax	 10		 23		[compound_middle_01_lt]													[rotateY]
						index_lt_CTRL.relax		 10		 16		[compound_index_01_lt]													[rotateY]
						thumb_lt_CTRL.relax		 10		 18		[compound_thumb_orbit_lt]												[rotateY]
						pinky_lt_CTRL.relax		 10		 15		[compound_pinky_02_lt]													[rotateY]
						ring_lt_CTRL.relax		 10		 15		[compound_ring_02_lt]													[rotateY]
						middle_lt_CTRL.relax	 10		 15		[compound_middle_02_lt]													[rotateY]
						index_lt_CTRL.relax		 10		 10		[compound_index_02_lt]													[rotateY]
						thumb_lt_CTRL.relax		 10		 14		[compound_thumb_01_lt]													[rotateY]
						pinky_lt_CTRL.relax		 10		 15		[compound_pinky_03_lt]													[rotateY]
						ring_lt_CTRL.relax		 10		 15		[compound_ring_03_lt]													[rotateY]
						middle_lt_CTRL.relax	 10		 15		[compound_middle_03_lt]													[rotateY]
						index_lt_CTRL.relax		 10		 18		[compound_index_03_lt]													[rotateY]
						thumb_lt_CTRL.relax		 10		 21		[compound_thumb_02_lt]													[rotateY]
						pinky_lt_CTRL.relax		-10		 16		[compound_pinky_01_lt]													[rotateY]
						ring_lt_CTRL.relax		-10		 19		[compound_ring_01_lt]													[rotateY]
						middle_lt_CTRL.relax	-10		 21		[compound_middle_01_lt]													[rotateY]
						index_lt_CTRL.relax		-10		 23		[compound_index_01_lt]													[rotateY]
						pinky_lt_CTRL.relax		-10		 15		[compound_pinky_02_lt]													[rotateY]
						ring_lt_CTRL.relax		-10		 15		[compound_ring_02_lt]													[rotateY]
						middle_lt_CTRL.relax	-10		 15		[compound_middle_02_lt]													[rotateY]
						index_lt_CTRL.relax		-10		 15		[compound_index_02_lt]													[rotateY]
						pinky_lt_CTRL.relax		-10		 15		[compound_pinky_03_lt]													[rotateY]
						ring_lt_CTRL.relax		-10		 15		[compound_ring_03_lt]													[rotateY]
						middle_lt_CTRL.relax	-10		 15		[compound_middle_03_lt]													[rotateY]
						index_lt_CTRL.relax		-10		 15		[compound_index_03_lt]													[rotateY]	;

# Add members to layer: CONTROLS
	edit_layer			Controls								[pinky_lt_CTRL, ring_lt_CTRL, middle_lt_CTRL, index_lt_CTRL, thumb_lt_CTRL]
	;


# RIGHT =====================================================================

# Add CURL attribute to COMPOUND joint controls
	# Add CURL attribute
		add_attribute	pinky_rt_CTRL			curl			float minValue=-10 maxValue=10 defaultValue=0 keyable
						ring_rt_CTRL			curl			float minValue=-10 maxValue=10 defaultValue=0 keyable
						middle_rt_CTRL			curl			float minValue=-10 maxValue=10 defaultValue=0 keyable
						index_rt_CTRL			curl			float minValue=-10 maxValue=10 defaultValue=0 keyable
						thumb_rt_CTRL			curl			float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make CURL attribute to drive rotation of COMPOUND joints
		set_driven_key	pinky_rt_CTRL.curl		---		---		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateY]
						ring_rt_CTRL.curl		---		---		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateY]
						middle_rt_CTRL.curl		---		---		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateY]
						index_rt_CTRL.curl		---		---		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateY]
						thumb_rt_CTRL.curl		---		---		[compound_thumb_01_rt, compound_thumb_02_rt]							[rotateY]
						pinky_rt_CTRL.curl		 10		 90		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateY]
						ring_rt_CTRL.curl		 10		 90		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateY]
						middle_rt_CTRL.curl		 10		 90		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateY]
						index_rt_CTRL.curl		 10		 90		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateY]
						thumb_rt_CTRL.curl		 10		 56		[compound_thumb_01_rt, compound_thumb_02_rt]							[rotateY]
						pinky_rt_CTRL.curl		-10		-15		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateY]
						ring_rt_CTRL.curl		-10		-15		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateY]
						middle_rt_CTRL.curl		-10		-15		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateY]
						index_rt_CTRL.curl		-10		-15		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateY]
						thumb_rt_CTRL.curl		-10		-49		[compound_thumb_01_rt]													[rotateY]
						thumb_rt_CTRL.curl		-10		-13		[compound_thumb_02_rt]													[rotateY]	;

# Add SCRUNCH attribute to COMPOUND joint controls
	# Add SCRUNCH attribute
		add_attribute	pinky_rt_CTRL			scrunch			float minValue=-10 maxValue=10 defaultValue=0 keyable
						ring_rt_CTRL			scrunch			float minValue=-10 maxValue=10 defaultValue=0 keyable
						middle_rt_CTRL			scrunch			float minValue=-10 maxValue=10 defaultValue=0 keyable
						index_rt_CTRL			scrunch			float minValue=-10 maxValue=10 defaultValue=0 keyable
						thumb_rt_CTRL			scrunch			float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make SCRUNCH attribute to drive rotation of COMPOUND joints
		set_driven_key	pinky_rt_CTRL.scrunch	---		---		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateY]
						ring_rt_CTRL.scrunch	---		---		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateY]
						middle_rt_CTRL.scrunch	---		---		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateY]
						index_rt_CTRL.scrunch	---		---		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateY]
						thumb_rt_CTRL.scrunch	---		---		[compound_thumb_orbit_rt, compound_thumb_01_rt, compound_thumb_02_rt]	[rotateY]
						thumb_rt_CTRL.scrunch	---		---		[compound_thumb_orbit_rt]												[rotateX]
						pinky_rt_CTRL.scrunch	 10		-42		[compound_pinky_01_rt]													[rotateY]
						ring_rt_CTRL.scrunch	 10		-42		[compound_ring_01_rt]													[rotateY]
						middle_rt_CTRL.scrunch	 10		-42		[compound_middle_01_rt]													[rotateY]
						index_rt_CTRL.scrunch	 10		-42		[compound_index_01_rt]													[rotateY]
						thumb_rt_CTRL.scrunch	 10		-48		[compound_thumb_orbit_rt]												[rotateX]
						thumb_rt_CTRL.scrunch	 10		  1		[compound_thumb_orbit_rt]												[rotateY]
						pinky_rt_CTRL.scrunch	 10		120		[compound_pinky_02_rt]													[rotateY]
						ring_rt_CTRL.scrunch	 10		120		[compound_ring_02_rt]													[rotateY]
						middle_rt_CTRL.scrunch	 10		120		[compound_middle_02_rt]													[rotateY]
						index_rt_CTRL.scrunch	 10		120		[compound_index_02_rt]													[rotateY]
						thumb_rt_CTRL.scrunch	 10		-55		[compound_thumb_01_rt]													[rotateY]
						pinky_rt_CTRL.scrunch	 10		 55		[compound_pinky_03_rt]													[rotateY]
						ring_rt_CTRL.scrunch	 10		 55		[compound_ring_03_rt]													[rotateY]
						middle_rt_CTRL.scrunch	 10		 55		[compound_middle_03_rt]													[rotateY]
						index_rt_CTRL.scrunch	 10		 55		[compound_index_03_rt]													[rotateY]
						thumb_rt_CTRL.scrunch	 10		 86		[compound_thumb_02_rt]													[rotateY]
						pinky_rt_CTRL.scrunch	-10		 13		[compound_pinky_01_rt]													[rotateY]
						ring_rt_CTRL.scrunch	-10		 13		[compound_ring_01_rt]													[rotateY]
						middle_rt_CTRL.scrunch	-10		 13		[compound_middle_01_rt]													[rotateY]
						index_rt_CTRL.scrunch	-10		 13		[compound_index_01_rt]													[rotateY]
						thumb_rt_CTRL.scrunch	-10		-53		[compound_thumb_orbit_rt]												[rotateX]
						thumb_rt_CTRL.scrunch	-10		-10		[compound_thumb_orbit_rt]												[rotateY]
						pinky_rt_CTRL.scrunch	-10		-12		[compound_pinky_02_rt]													[rotateY]
						ring_rt_CTRL.scrunch	-10		-12		[compound_ring_02_rt]													[rotateY]
						middle_rt_CTRL.scrunch	-10		-12		[compound_middle_02_rt]													[rotateY]
						index_rt_CTRL.scrunch	-10		-12		[compound_index_02_rt]													[rotateY]
						thumb_rt_CTRL.scrunch	-10		  7		[compound_thumb_01_rt]													[rotateY]
						pinky_rt_CTRL.scrunch	-10		-11		[compound_pinky_03_rt]													[rotateY]
						ring_rt_CTRL.scrunch	-10		-11		[compound_ring_03_rt]													[rotateY]
						middle_rt_CTRL.scrunch	-10		-11		[compound_middle_03_rt]													[rotateY]
						index_rt_CTRL.scrunch	-10		-11		[compound_index_03_rt]													[rotateY]
						thumb_rt_CTRL.scrunch	-10		-14		[compound_thumb_02_rt]													[rotateY]	;

# Add LEAN attribute to COMPOUND joint controls
	# Add LEAN attribute
		add_attribute	pinky_rt_CTRL			lean			float minValue=-10 maxValue=10 defaultValue=0 keyable
						ring_rt_CTRL			lean			float minValue=-10 maxValue=10 defaultValue=0 keyable
						middle_rt_CTRL			lean			float minValue=-10 maxValue=10 defaultValue=0 keyable
						index_rt_CTRL			lean			float minValue=-10 maxValue=10 defaultValue=0 keyable
						thumb_rt_CTRL			lean			float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make LEAN attribute to drive rotation of COMPOUND joints
		set_driven_key	pinky_rt_CTRL.lean		---		---		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateZ]
						ring_rt_CTRL.lean		---		---		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateZ]
						middle_rt_CTRL.lean		---		---		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateZ]
						index_rt_CTRL.lean		---		---		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateZ]
						thumb_rt_CTRL.lean		---		---		[compound_thumb_orbit_rt, compound_thumb_01_rt, compound_thumb_02_rt]	[rotateZ]
						pinky_rt_CTRL.lean		 10		 25		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateZ]
						ring_rt_CTRL.lean		 10		 25		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateZ]
						middle_rt_CTRL.lean		 10		 25		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateZ]
						index_rt_CTRL.lean		 10		 25		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateZ]
						thumb_rt_CTRL.lean		 10		 26		[compound_thumb_orbit_rt, compound_thumb_01_rt, compound_thumb_02_rt]	[rotateZ]
						pinky_rt_CTRL.lean		-10		-25		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateZ]
						ring_rt_CTRL.lean		-10		-25		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateZ]
						middle_rt_CTRL.lean		-10		-25		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateZ]
						index_rt_CTRL.lean		-10		-25		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateZ]
						thumb_rt_CTRL.lean		-10		-29		[compound_thumb_orbit_rt, compound_thumb_01_rt, compound_thumb_02_rt]	[rotateZ]	;

# Add RELAX attribute to COMPOUND joint controls
	# Add RELAX attribute
		add_attribute	pinky_rt_CTRL			relax			float minValue=0 maxValue=10 defaultValue=0 keyable
						ring_rt_CTRL			relax			float minValue=0 maxValue=10 defaultValue=0 keyable
						middle_rt_CTRL			relax			float minValue=0 maxValue=10 defaultValue=0 keyable
						index_rt_CTRL			relax			float minValue=0 maxValue=10 defaultValue=0 keyable
						thumb_rt_CTRL			relax			float minValue=0 maxValue=10 defaultValue=0 keyable	;
	# Make RELAX attribute to drive rotation of COMPOUND joints
		set_driven_key	pinky_rt_CTRL.relax		---		---		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateY]
						ring_rt_CTRL.relax		---		---		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateY]
						middle_rt_CTRL.relax	---		---		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateY]
						index_rt_CTRL.relax		---		---		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateY]
						thumb_rt_CTRL.relax		---		---		[compound_thumb_orbit_rt, compound_thumb_01_rt, compound_thumb_02_rt]	[rotateY]
						pinky_rt_CTRL.relax		 10		 34		[compound_pinky_01_rt]													[rotateY]
						ring_rt_CTRL.relax		 10		 28		[compound_ring_01_rt]													[rotateY]
						middle_rt_CTRL.relax	 10		 23		[compound_middle_01_rt]													[rotateY]
						index_rt_CTRL.relax		 10		 16		[compound_index_01_rt]													[rotateY]
						thumb_rt_CTRL.relax		 10		 18		[compound_thumb_orbit_rt]												[rotateY]
						pinky_rt_CTRL.relax		 10		 15		[compound_pinky_02_rt]													[rotateY]
						ring_rt_CTRL.relax		 10		 15		[compound_ring_02_rt]													[rotateY]
						middle_rt_CTRL.relax	 10		 15		[compound_middle_02_rt]													[rotateY]
						index_rt_CTRL.relax		 10		 10		[compound_index_02_rt]													[rotateY]
						thumb_rt_CTRL.relax		 10		 14		[compound_thumb_01_rt]													[rotateY]
						pinky_rt_CTRL.relax		 10		 15		[compound_pinky_03_rt]													[rotateY]
						ring_rt_CTRL.relax		 10		 15		[compound_ring_03_rt]													[rotateY]
						middle_rt_CTRL.relax	 10		 15		[compound_middle_03_rt]													[rotateY]
						index_rt_CTRL.relax		 10		 18		[compound_index_03_rt]													[rotateY]
						thumb_rt_CTRL.relax		 10		 21		[compound_thumb_02_rt]													[rotateY]
						pinky_rt_CTRL.relax		-10		 16		[compound_pinky_01_rt]													[rotateY]
						ring_rt_CTRL.relax		-10		 19		[compound_ring_01_rt]													[rotateY]
						middle_rt_CTRL.relax	-10		 21		[compound_middle_01_rt]													[rotateY]
						index_rt_CTRL.relax		-10		 23		[compound_index_01_rt]													[rotateY]
						pinky_rt_CTRL.relax		-10		 15		[compound_pinky_02_rt]													[rotateY]
						ring_rt_CTRL.relax		-10		 15		[compound_ring_02_rt]													[rotateY]
						middle_rt_CTRL.relax	-10		 15		[compound_middle_02_rt]													[rotateY]
						index_rt_CTRL.relax		-10		 15		[compound_index_02_rt]													[rotateY]
						pinky_rt_CTRL.relax		-10		 15		[compound_pinky_03_rt]													[rotateY]
						ring_rt_CTRL.relax		-10		 15		[compound_ring_03_rt]													[rotateY]
						middle_rt_CTRL.relax	-10		 15		[compound_middle_03_rt]													[rotateY]
						index_rt_CTRL.relax		-10		 15		[compound_index_03_rt]													[rotateY]	;

# Add members to layer: CONTROLS
	edit_layer			Controls								[pinky_rt_CTRL, ring_rt_CTRL, middle_rt_CTRL, index_rt_CTRL, thumb_rt_CTRL]
	;


#############################################################################
#### [ HAND ] COMPOUND GROUP Controls
#############################################################################

# Create controls
	# Left COMPOUND Hand control
		create_circle	hand_lt_CTRL			 0.0	-3.0	0.0		radius=0.9	;
		rotate			hand_lt_CTRL			 0.0	90.0	0.0		euler worldSpace	;
		move			hand_lt_CTRL			-1.0	 0.0	4.0		relative_to=pinky_01_lt	;
		center_pivot	hand_lt_CTRL	;
		scale			hand_lt_CTRL			 2.0	 5.0	1.0	;
		freeze			hand_lt_CTRL	;

# Add CURL attribute to HAND_LT_CTRL
	# Add CURL attribute
		add_attribute	hand_lt_CTRL			curl			float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make CURL attribute to drive rotation of COMPOUND joints
		set_driven_key	hand_lt_CTRL.curl		---		---		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateY]
						hand_lt_CTRL.curl		---		---		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateY]
						hand_lt_CTRL.curl		---		---		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateY]
						hand_lt_CTRL.curl		---		---		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateY]
						hand_lt_CTRL.curl		 10		 90		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateY]
						hand_lt_CTRL.curl		 10		 90		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateY]
						hand_lt_CTRL.curl		 10		 90		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateY]
						hand_lt_CTRL.curl		 10		 90		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateY]
						hand_lt_CTRL.curl		-10		-15		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateY]
						hand_lt_CTRL.curl		-10		-15		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateY]
						hand_lt_CTRL.curl		-10		-15		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateY]
						hand_lt_CTRL.curl		-10		-15		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateY]	;

# Add SCRUNCH attribute to HAND_LT_CTRL
	# Add SCRUNCH attribute
		add_attribute	hand_lt_CTRL				scrunch		float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make SCRUNCH attribute to drive rotation of COMPOUND joints
		set_driven_key	hand_lt_CTRL.scrunch	---		---		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateY]
						hand_lt_CTRL.scrunch	---		---		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateY]
						hand_lt_CTRL.scrunch	---		---		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateY]
						hand_lt_CTRL.scrunch	---		---		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateY]
						hand_lt_CTRL.scrunch	 10		-42		[compound_pinky_01_lt]													[rotateY]
						hand_lt_CTRL.scrunch	 10		-42		[compound_ring_01_lt]													[rotateY]
						hand_lt_CTRL.scrunch	 10		-42		[compound_middle_01_lt]													[rotateY]
						hand_lt_CTRL.scrunch	 10		-42		[compound_index_01_lt]													[rotateY]
						hand_lt_CTRL.scrunch	 10		120		[compound_pinky_02_lt]													[rotateY]
						hand_lt_CTRL.scrunch	 10		120		[compound_ring_02_lt]													[rotateY]
						hand_lt_CTRL.scrunch	 10		120		[compound_middle_02_lt]													[rotateY]
						hand_lt_CTRL.scrunch	 10		120		[compound_index_02_lt]													[rotateY]
						hand_lt_CTRL.scrunch	 10		 55		[compound_pinky_03_lt]													[rotateY]
						hand_lt_CTRL.scrunch	 10		 55		[compound_ring_03_lt]													[rotateY]
						hand_lt_CTRL.scrunch	 10		 55		[compound_middle_03_lt]													[rotateY]
						hand_lt_CTRL.scrunch	 10		 55		[compound_index_03_lt]													[rotateY]
						hand_lt_CTRL.scrunch	-10		 13		[compound_pinky_01_lt]													[rotateY]
						hand_lt_CTRL.scrunch	-10		 13		[compound_ring_01_lt]													[rotateY]
						hand_lt_CTRL.scrunch	-10		 13		[compound_middle_01_lt]													[rotateY]
						hand_lt_CTRL.scrunch	-10		 13		[compound_index_01_lt]													[rotateY]
						hand_lt_CTRL.scrunch	-10		-12		[compound_pinky_02_lt]													[rotateY]
						hand_lt_CTRL.scrunch	-10		-12		[compound_ring_02_lt]													[rotateY]
						hand_lt_CTRL.scrunch	-10		-12		[compound_middle_02_lt]													[rotateY]
						hand_lt_CTRL.scrunch	-10		-12		[compound_index_02_lt]													[rotateY]
						hand_lt_CTRL.scrunch	-10		-11		[compound_pinky_03_lt]													[rotateY]
						hand_lt_CTRL.scrunch	-10		-11		[compound_ring_03_lt]													[rotateY]
						hand_lt_CTRL.scrunch	-10		-11		[compound_middle_03_lt]													[rotateY]
						hand_lt_CTRL.scrunch	-10		-11		[compound_index_03_lt]													[rotateY]	;

# Add LEAN attribute to HAND_LT_CTRL
	# Add LEAN attribute
		add_attribute	hand_lt_CTRL			lean			float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make LEAN attribute to drive rotation of COMPOUND joints
		set_driven_key	hand_lt_CTRL.lean		---		---		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateZ]
						hand_lt_CTRL.lean		---		---		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateZ]
						hand_lt_CTRL.lean		---		---		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateZ]
						hand_lt_CTRL.lean		---		---		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateZ]
						hand_lt_CTRL.lean		 10		 25		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateZ]
						hand_lt_CTRL.lean		 10		 25		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateZ]
						hand_lt_CTRL.lean		 10		 25		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateZ]
						hand_lt_CTRL.lean		 10		 25		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateZ]
						hand_lt_CTRL.lean		-10		-25		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateZ]
						hand_lt_CTRL.lean		-10		-25		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateZ]
						hand_lt_CTRL.lean		-10		-25		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateZ]
						hand_lt_CTRL.lean		-10		-25		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateZ]	;

# Add RELAX attribute to HAND_LT_CTRL
	# Add RELAX attribute
		add_attribute	hand_lt_CTRL			relax			float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make RELAX attribute to drive rotation of COMPOUND joints
		set_driven_key	hand_lt_CTRL.relax		---		---		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateY]
						hand_lt_CTRL.relax		---		---		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateY]
						hand_lt_CTRL.relax		---		---		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateY]
						hand_lt_CTRL.relax		---		---		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateY]
						hand_lt_CTRL.relax		 10		 34		[compound_pinky_01_lt]													[rotateY]
						hand_lt_CTRL.relax		 10		 28		[compound_ring_01_lt]													[rotateY]
						hand_lt_CTRL.relax		 10		 23		[compound_middle_01_lt]													[rotateY]
						hand_lt_CTRL.relax		 10		 16		[compound_index_01_lt]													[rotateY]
						hand_lt_CTRL.relax		 10		 15		[compound_pinky_02_lt]													[rotateY]
						hand_lt_CTRL.relax		 10		 15		[compound_ring_02_lt]													[rotateY]
						hand_lt_CTRL.relax		 10		 15		[compound_middle_02_lt]													[rotateY]
						hand_lt_CTRL.relax		 10		 10		[compound_index_02_lt]													[rotateY]
						hand_lt_CTRL.relax		 10		 15		[compound_pinky_03_lt]													[rotateY]
						hand_lt_CTRL.relax		 10		 15		[compound_ring_03_lt]													[rotateY]
						hand_lt_CTRL.relax		 10		 15		[compound_middle_03_lt]													[rotateY]
						hand_lt_CTRL.relax		 10		 18		[compound_index_03_lt]													[rotateY]
						hand_lt_CTRL.relax		-10		 16		[compound_pinky_01_lt]													[rotateY]
						hand_lt_CTRL.relax		-10		 19		[compound_ring_01_lt]													[rotateY]
						hand_lt_CTRL.relax		-10		 21		[compound_middle_01_lt]													[rotateY]
						hand_lt_CTRL.relax		-10		 23		[compound_index_01_lt]													[rotateY]
						hand_lt_CTRL.relax		-10		 15		[compound_pinky_02_lt]													[rotateY]
						hand_lt_CTRL.relax		-10		 15		[compound_ring_02_lt]													[rotateY]
						hand_lt_CTRL.relax		-10		 15		[compound_middle_02_lt]													[rotateY]
						hand_lt_CTRL.relax		-10		 15		[compound_index_02_lt]													[rotateY]
						hand_lt_CTRL.relax		-10		 15		[compound_pinky_03_lt]													[rotateY]
						hand_lt_CTRL.relax		-10		 15		[compound_ring_03_lt]													[rotateY]
						hand_lt_CTRL.relax		-10		 15		[compound_middle_03_lt]													[rotateY]
						hand_lt_CTRL.relax		-10		 15		[compound_index_03_lt]													[rotateY]	;

# Add SPREAD attribute to HAND_LT_CTRL
	# Add SPREAD attribute
		add_attribute	hand_lt_CTRL				spread		float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make SPREAD attribute to drive rotation of COMPOUND joints
		set_driven_key	hand_lt_CTRL.spread		---		---		[compound_pinky_base_lt, compound_pinky_01_lt]		[rotateZ]
						hand_lt_CTRL.spread		---		---		[compound_ring_base_lt, compound_ring_01_lt]		[rotateZ]
						hand_lt_CTRL.spread		---		---		[compound_middle_base_lt, compound_middle_01_lt]	[rotateZ]
						hand_lt_CTRL.spread		---		---		[compound_index_base_lt, compound_index_01_lt]		[rotateZ]
						hand_lt_CTRL.spread		 10		  5		[compound_pinky_base_lt]							[rotateZ]
						hand_lt_CTRL.spread		 10		  3		[compound_ring_base_lt]								[rotateZ]
						hand_lt_CTRL.spread		 10		  0		[compound_middle_base_lt]							[rotateZ]
						hand_lt_CTRL.spread		 10		 -3		[compound_index_base_lt]							[rotateZ]
						hand_lt_CTRL.spread		-10		 -9		[compound_pinky_base_lt]							[rotateZ]
						hand_lt_CTRL.spread		-10		 -1		[compound_pinky_01_lt]								[rotateZ]
						hand_lt_CTRL.spread		-10		 -3		[compound_ring_base_lt]								[rotateZ]
						hand_lt_CTRL.spread		-10		 -5		[compound_ring_01_lt]								[rotateZ]
						hand_lt_CTRL.spread		-10		  0		[compound_middle_base_lt]							[rotateZ]
						hand_lt_CTRL.spread		-10		  0		[compound_middle_01_lt]								[rotateZ]
						hand_lt_CTRL.spread		-10		  4		[compound_index_base_lt]							[rotateZ]
						hand_lt_CTRL.spread		-10		  2		[compound_index_01_lt]								[rotateZ]	;

# Add FIST attribute to HAND_LT_CTRL
	# Add FIST attribute
		add_attribute	hand_lt_CTRL				fist		float minValue=0 maxValue=10 defaultValue=0 keyable	;
	# Make FIST attribute to drive rotation of COMPOUND joints
		set_driven_key	hand_lt_CTRL.fist		---		---		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateY]
						hand_lt_CTRL.fist		---		---		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateY]
						hand_lt_CTRL.fist		---		---		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateY]
						hand_lt_CTRL.fist		---		---		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateY]
						hand_lt_CTRL.fist		---		---		[compound_thumb_orbit_lt, compound_thumb_01_lt, compound_thumb_02_lt]	[rotateY]
						hand_lt_CTRL.fist		---		---		[compound_thumb_orbit_lt]												[rotateZ]
						hand_lt_CTRL.fist		 10		 85		[compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]		[rotateY]
						hand_lt_CTRL.fist		 10		 85		[compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]			[rotateY]
						hand_lt_CTRL.fist		 10		 85		[compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]	[rotateY]
						hand_lt_CTRL.fist		 10		 85		[compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]		[rotateY]
						hand_lt_CTRL.fist		 10		 21		[compound_thumb_orbit_lt]												[rotateY]
						hand_lt_CTRL.fist		 10		-33		[compound_thumb_orbit_lt]												[rotateZ]
						hand_lt_CTRL.fist		 10		 44		[compound_thumb_01_lt]													[rotateY]
						hand_lt_CTRL.fist		 10		 44		[compound_thumb_02_lt]													[rotateY]	;

# Add members to layer: CONTROLS
	edit_layer			Controls								[hand_lt_CTRL]
	;


# RIGHT =====================================================================

# Create controls
	# Left COMPOUND Hand control
		create_circle	hand_rt_CTRL			 0.0	-3.0	0.0		radius=0.9	;
		rotate			hand_rt_CTRL			 0.0	90.0	0.0		euler worldSpace	;
		move			hand_rt_CTRL			-1.0	 0.0	4.0		relative_to=pinky_01_rt	;
		center_pivot	hand_rt_CTRL	;
		scale			hand_rt_CTRL			 2.0	 5.0	1.0	;
		freeze			hand_rt_CTRL	;

# Add CURL attribute to HAND_RT_CTRL
	# Add CURL attribute
		add_attribute	hand_rt_CTRL			curl			float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make CURL attribute to drive rotation of COMPOUND joints
		set_driven_key	hand_rt_CTRL.curl		---		---		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateY]
						hand_rt_CTRL.curl		---		---		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateY]
						hand_rt_CTRL.curl		---		---		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateY]
						hand_rt_CTRL.curl		---		---		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateY]
						hand_rt_CTRL.curl		 10		 90		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateY]
						hand_rt_CTRL.curl		 10		 90		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateY]
						hand_rt_CTRL.curl		 10		 90		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateY]
						hand_rt_CTRL.curl		 10		 90		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateY]
						hand_rt_CTRL.curl		-10		-15		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateY]
						hand_rt_CTRL.curl		-10		-15		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateY]
						hand_rt_CTRL.curl		-10		-15		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateY]
						hand_rt_CTRL.curl		-10		-15		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateY]	;

# Add SCRUNCH attribute to HAND_RT_CTRL
	# Add SCRUNCH attribute
		add_attribute	hand_rt_CTRL				scrunch		float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make SCRUNCH attribute to drive rotation of COMPOUND joints
		set_driven_key	hand_rt_CTRL.scrunch	---		---		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateY]
						hand_rt_CTRL.scrunch	---		---		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateY]
						hand_rt_CTRL.scrunch	---		---		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateY]
						hand_rt_CTRL.scrunch	---		---		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateY]
						hand_rt_CTRL.scrunch	 10		-42		[compound_pinky_01_rt]													[rotateY]
						hand_rt_CTRL.scrunch	 10		-42		[compound_ring_01_rt]													[rotateY]
						hand_rt_CTRL.scrunch	 10		-42		[compound_middle_01_rt]													[rotateY]
						hand_rt_CTRL.scrunch	 10		-42		[compound_index_01_rt]													[rotateY]
						hand_rt_CTRL.scrunch	 10		120		[compound_pinky_02_rt]													[rotateY]
						hand_rt_CTRL.scrunch	 10		120		[compound_ring_02_rt]													[rotateY]
						hand_rt_CTRL.scrunch	 10		120		[compound_middle_02_rt]													[rotateY]
						hand_rt_CTRL.scrunch	 10		120		[compound_index_02_rt]													[rotateY]
						hand_rt_CTRL.scrunch	 10		 55		[compound_pinky_03_rt]													[rotateY]
						hand_rt_CTRL.scrunch	 10		 55		[compound_ring_03_rt]													[rotateY]
						hand_rt_CTRL.scrunch	 10		 55		[compound_middle_03_rt]													[rotateY]
						hand_rt_CTRL.scrunch	 10		 55		[compound_index_03_rt]													[rotateY]
						hand_rt_CTRL.scrunch	-10		 13		[compound_pinky_01_rt]													[rotateY]
						hand_rt_CTRL.scrunch	-10		 13		[compound_ring_01_rt]													[rotateY]
						hand_rt_CTRL.scrunch	-10		 13		[compound_middle_01_rt]													[rotateY]
						hand_rt_CTRL.scrunch	-10		 13		[compound_index_01_rt]													[rotateY]
						hand_rt_CTRL.scrunch	-10		-12		[compound_pinky_02_rt]													[rotateY]
						hand_rt_CTRL.scrunch	-10		-12		[compound_ring_02_rt]													[rotateY]
						hand_rt_CTRL.scrunch	-10		-12		[compound_middle_02_rt]													[rotateY]
						hand_rt_CTRL.scrunch	-10		-12		[compound_index_02_rt]													[rotateY]
						hand_rt_CTRL.scrunch	-10		-11		[compound_pinky_03_rt]													[rotateY]
						hand_rt_CTRL.scrunch	-10		-11		[compound_ring_03_rt]													[rotateY]
						hand_rt_CTRL.scrunch	-10		-11		[compound_middle_03_rt]													[rotateY]
						hand_rt_CTRL.scrunch	-10		-11		[compound_index_03_rt]													[rotateY]	;

# Add LEAN attribute to HAND_RT_CTRL
	# Add LEAN attribute
		add_attribute	hand_rt_CTRL			lean			float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make LEAN attribute to drive rotation of COMPOUND joints
		set_driven_key	hand_rt_CTRL.lean		---		---		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateZ]
						hand_rt_CTRL.lean		---		---		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateZ]
						hand_rt_CTRL.lean		---		---		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateZ]
						hand_rt_CTRL.lean		---		---		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateZ]
						hand_rt_CTRL.lean		 10		 25		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateZ]
						hand_rt_CTRL.lean		 10		 25		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateZ]
						hand_rt_CTRL.lean		 10		 25		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateZ]
						hand_rt_CTRL.lean		 10		 25		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateZ]
						hand_rt_CTRL.lean		-10		-25		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateZ]
						hand_rt_CTRL.lean		-10		-25		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateZ]
						hand_rt_CTRL.lean		-10		-25		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateZ]
						hand_rt_CTRL.lean		-10		-25		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateZ]	;

# Add RELAX attribute to HAND_RT_CTRL
	# Add RELAX attribute
		add_attribute	hand_rt_CTRL			relax			float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make RELAX attribute to drive rotation of COMPOUND joints
		set_driven_key	hand_rt_CTRL.relax		---		---		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateY]
						hand_rt_CTRL.relax		---		---		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateY]
						hand_rt_CTRL.relax		---		---		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateY]
						hand_rt_CTRL.relax		---		---		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateY]
						hand_rt_CTRL.relax		 10		 34		[compound_pinky_01_rt]													[rotateY]
						hand_rt_CTRL.relax		 10		 28		[compound_ring_01_rt]													[rotateY]
						hand_rt_CTRL.relax		 10		 23		[compound_middle_01_rt]													[rotateY]
						hand_rt_CTRL.relax		 10		 16		[compound_index_01_rt]													[rotateY]
						hand_rt_CTRL.relax		 10		 15		[compound_pinky_02_rt]													[rotateY]
						hand_rt_CTRL.relax		 10		 15		[compound_ring_02_rt]													[rotateY]
						hand_rt_CTRL.relax		 10		 15		[compound_middle_02_rt]													[rotateY]
						hand_rt_CTRL.relax		 10		 10		[compound_index_02_rt]													[rotateY]
						hand_rt_CTRL.relax		 10		 15		[compound_pinky_03_rt]													[rotateY]
						hand_rt_CTRL.relax		 10		 15		[compound_ring_03_rt]													[rotateY]
						hand_rt_CTRL.relax		 10		 15		[compound_middle_03_rt]													[rotateY]
						hand_rt_CTRL.relax		 10		 18		[compound_index_03_rt]													[rotateY]
						hand_rt_CTRL.relax		-10		 16		[compound_pinky_01_rt]													[rotateY]
						hand_rt_CTRL.relax		-10		 19		[compound_ring_01_rt]													[rotateY]
						hand_rt_CTRL.relax		-10		 21		[compound_middle_01_rt]													[rotateY]
						hand_rt_CTRL.relax		-10		 23		[compound_index_01_rt]													[rotateY]
						hand_rt_CTRL.relax		-10		 15		[compound_pinky_02_rt]													[rotateY]
						hand_rt_CTRL.relax		-10		 15		[compound_ring_02_rt]													[rotateY]
						hand_rt_CTRL.relax		-10		 15		[compound_middle_02_rt]													[rotateY]
						hand_rt_CTRL.relax		-10		 15		[compound_index_02_rt]													[rotateY]
						hand_rt_CTRL.relax		-10		 15		[compound_pinky_03_rt]													[rotateY]
						hand_rt_CTRL.relax		-10		 15		[compound_ring_03_rt]													[rotateY]
						hand_rt_CTRL.relax		-10		 15		[compound_middle_03_rt]													[rotateY]
						hand_rt_CTRL.relax		-10		 15		[compound_index_03_rt]													[rotateY]	;

# Add SPREAD attribute to HAND_RT_CTRL
	# Add SPREAD attribute
		add_attribute	hand_rt_CTRL				spread		float minValue=-10 maxValue=10 defaultValue=0 keyable	;
	# Make SPREAD attribute to drive rotation of COMPOUND joints
		set_driven_key	hand_rt_CTRL.spread		---		---		[compound_pinky_base_rt, compound_pinky_01_rt]		[rotateZ]
						hand_rt_CTRL.spread		---		---		[compound_ring_base_rt, compound_ring_01_rt]		[rotateZ]
						hand_rt_CTRL.spread		---		---		[compound_middle_base_rt, compound_middle_01_rt]	[rotateZ]
						hand_rt_CTRL.spread		---		---		[compound_index_base_rt, compound_index_01_rt]		[rotateZ]
						hand_rt_CTRL.spread		 10		  5		[compound_pinky_base_rt]							[rotateZ]
						hand_rt_CTRL.spread		 10		  3		[compound_ring_base_rt]								[rotateZ]
						hand_rt_CTRL.spread		 10		  0		[compound_middle_base_rt]							[rotateZ]
						hand_rt_CTRL.spread		 10		 -3		[compound_index_base_rt]							[rotateZ]
						hand_rt_CTRL.spread		-10		 -9		[compound_pinky_base_rt]							[rotateZ]
						hand_rt_CTRL.spread		-10		 -1		[compound_pinky_01_rt]								[rotateZ]
						hand_rt_CTRL.spread		-10		 -3		[compound_ring_base_rt]								[rotateZ]
						hand_rt_CTRL.spread		-10		 -5		[compound_ring_01_rt]								[rotateZ]
						hand_rt_CTRL.spread		-10		  0		[compound_middle_base_rt]							[rotateZ]
						hand_rt_CTRL.spread		-10		  0		[compound_middle_01_rt]								[rotateZ]
						hand_rt_CTRL.spread		-10		  4		[compound_index_base_rt]							[rotateZ]
						hand_rt_CTRL.spread		-10		  2		[compound_index_01_rt]								[rotateZ]	;

# Add FIST attribute to HAND_RT_CTRL
	# Add FIST attribute
		add_attribute	hand_rt_CTRL				fist		float minValue=0 maxValue=10 defaultValue=0 keyable	;
	# Make FIST attribute to drive rotation of COMPOUND joints
		set_driven_key	hand_rt_CTRL.fist		---		---		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateY]
						hand_rt_CTRL.fist		---		---		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateY]
						hand_rt_CTRL.fist		---		---		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateY]
						hand_rt_CTRL.fist		---		---		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateY]
						hand_rt_CTRL.fist		---		---		[compound_thumb_orbit_rt, compound_thumb_01_rt, compound_thumb_02_rt]	[rotateY]
						hand_rt_CTRL.fist		---		---		[compound_thumb_orbit_rt]												[rotateZ]
						hand_rt_CTRL.fist		 10		 85		[compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]		[rotateY]
						hand_rt_CTRL.fist		 10		 85		[compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]			[rotateY]
						hand_rt_CTRL.fist		 10		 85		[compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]	[rotateY]
						hand_rt_CTRL.fist		 10		 85		[compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]		[rotateY]
						hand_rt_CTRL.fist		 10		 21		[compound_thumb_orbit_rt]												[rotateY]
						hand_rt_CTRL.fist		 10		-33		[compound_thumb_orbit_rt]												[rotateZ]
						hand_rt_CTRL.fist		 10		 44		[compound_thumb_01_rt]													[rotateY]
						hand_rt_CTRL.fist		 10		 44		[compound_thumb_02_rt]													[rotateY]	;

# Add members to layer: CONTROLS
	edit_layer			Controls								[hand_rt_CTRL]
	;


#############################################################################
#### [ HAND ] Palm Controls
#############################################################################

# Update locators: INNER_PALM_LT_LOC, MIDDLE_PALM_LT_LOC, OUTER_PALM_LT_LOC
	parent				outer_palm_lt_LOC		[middle_palm_lt_LOC]
						inner_palm_lt_LOC		[outer_palm_lt_LOC]	;

# Create HAND joint constraint
	duplicate			const_hand_lt_base								result_hand_base_lt					parentOnly	;
	parent				middle_palm_lt_LOC								[const_hand_lt_base]	;
	parent_constraint	hand_base_lt_CTRL								[const_hand_lt_base]	;

# Add STRAIGHT joints for PALM-RAISE feature
	# Create STRAIGHT joint chain for COMPOUND joint controls
		duplicate			pinky_compoundStraight_lt_start				compound_pinky_01_lt				parentOnly		# Straight_START
							ring_compoundStraight_lt_start				compound_ring_01_lt					parentOnly
							middle_compoundStraight_lt_start			compound_middle_01_lt				parentOnly
							index_compoundStraight_lt_start				compound_index_01_lt				parentOnly
							thumb_compoundStraight_lt_start				compound_thumb_orbit_lt				parentOnly
							pinky_compoundStraight_lt_end				compound_pinky_04_lt				parentOnly		# Straight_END
							ring_compoundStraight_lt_end				compound_ring_04_lt					parentOnly
							middle_compoundStraight_lt_end				compound_middle_04_lt				parentOnly
							index_compoundStraight_lt_end				compound_index_04_lt				parentOnly
							thumb_compoundStraight_lt_end				compound_thumb_03_lt				parentOnly	;
		parent				pinky_compoundStraight_lt_start				[pinky_compoundStraight_lt_end]						# Parent Straight_END under Straight_START
							ring_compoundStraight_lt_start				[ring_compoundStraight_lt_end]
							middle_compoundStraight_lt_start			[middle_compoundStraight_lt_end]
							index_compoundStraight_lt_start				[index_compoundStraight_lt_end]
							thumb_compoundStraight_lt_start				[thumb_compoundStraight_lt_end]
							pinky_compoundStraight_lt_start				[compound_pinky_01_lt]								# Parent Compound_Finger01 under Straight_START
							ring_compoundStraight_lt_start				[compound_ring_01_lt]
							middle_compoundStraight_lt_start			[compound_middle_01_lt]
							index_compoundStraight_lt_start				[compound_index_01_lt]
							thumb_compoundStraight_lt_start				[compound_thumb_orbit_lt]	;
	# Create STRAIGHT joint for RESULT joint chain
		duplicate			pinky_resultStraight_lt						pinky_compoundStraight_lt_start		parentOnly		# Straight
							ring_resultStraight_lt						ring_compoundStraight_lt_start		parentOnly
							middle_resultStraight_lt					middle_compoundStraight_lt_start	parentOnly
							index_resultStraight_lt						index_compoundStraight_lt_start		parentOnly
							thumb_resultStraight_lt						thumb_compoundStraight_lt_start		parentOnly	;
		parent				result_pinky_base_lt						[pinky_resultStraight_lt]							# Parent Straight under Result_Finger_Base
							result_ring_base_lt							[ring_resultStraight_lt]
							result_middle_base_lt						[middle_resultStraight_lt]
							result_index_base_lt						[index_resultStraight_lt]
							result_thumb_base_lt						[thumb_resultStraight_lt]
							pinky_resultStraight_lt						[orient_pinky_01_lt]								# Parent Orient_Finger01 under Straight
							ring_resultStraight_lt						[orient_ring_01_lt]
							middle_resultStraight_lt					[orient_middle_01_lt]
							index_resultStraight_lt						[orient_index_01_lt]
							thumb_resultStraight_lt						[orient_thumb_orbit_lt]	;
	# Connect STRAIGHT joint of COMPOUND to STRAIGHT of RESULT
		connect_attribute	pinky_compoundStraight_lt_start.rotate		pinky_resultStraight_lt.rotate
							ring_compoundStraight_lt_start.rotate		ring_resultStraight_lt.rotate
							middle_compoundStraight_lt_start.rotate		middle_resultStraight_lt.rotate
							index_compoundStraight_lt_start.rotate		index_resultStraight_lt.rotate
							thumb_compoundStraight_lt_start.rotate		thumb_resultStraight_lt.rotate	;
	# Create IK handle: SPINE_HDL
		ik_handle			pinky_straight_lt_HDL						pinky_compoundStraight_lt_start		pinky_compoundStraight_lt_end	solver="ikSCsolver"
							ring_straight_lt_HDL						ring_compoundStraight_lt_start		ring_compoundStraight_lt_end	solver="ikSCsolver"
							middle_straight_lt_HDL						middle_compoundStraight_lt_start	middle_compoundStraight_lt_end	solver="ikSCsolver"
							index_straight_lt_HDL						index_compoundStraight_lt_start		index_compoundStraight_lt_end	solver="ikSCsolver"
							thumb_straight_lt_HDL						thumb_compoundStraight_lt_start		thumb_compoundStraight_lt_end	solver="ikSCsolver"	;
		rename				effector1									pinky_straight_lt_EFF
							effector2									ring_straight_lt_EFF
							effector3									middle_straight_lt_EFF
							effector4									index_straight_lt_EFF
							effector5									thumb_straight_lt_EFF	;
	# Create group: STRAIGHT_HDL_GRP
		create_group		straight_lt_HDL_GRP	;
		parent				straight_lt_HDL_GRP							[pinky_straight_lt_HDL, ring_straight_lt_HDL, middle_straight_lt_HDL, index_straight_lt_HDL, thumb_straight_lt_HDL]	;

# Add PALM-RAISE attribute to HAND_LT_CTRL
	# Add PALM-RAISE attribute
		add_attribute	hand_lt_CTRL			palmRaise		float minValue=-90 maxValue=90 defaultValue=0 keyable	;
	# Make PALM-RAISE attribute to drive rotation of PALM
		set_driven_key	hand_lt_CTRL.palmRaise	---		---		[middle_palm_lt_LOC]						[rotateY]
						hand_lt_CTRL.palmRaise	 90		 90		[middle_palm_lt_LOC]						[rotateY]
						hand_lt_CTRL.palmRaise	-90		-90		[middle_palm_lt_LOC]						[rotateY]	;

# Add SIDE-ROLL attribute to HAND_LT_CTRL
	# Add SIDE-ROLL attribute
		add_attribute	hand_lt_CTRL				sideRoll	float minValue=-90 maxValue=90 defaultValue=0 keyable	;
	# Make SIDE-ROLL attribute to drive rotation of PALM
		set_driven_key	hand_lt_CTRL.sideRoll	---		---		[inner_palm_lt_LOC, outer_palm_lt_LOC]		[rotateX]
						hand_lt_CTRL.sideRoll	 90		 90		[inner_palm_lt_LOC]							[rotateX]
						hand_lt_CTRL.sideRoll	-90		-90		[outer_palm_lt_LOC]							[rotateX]	;

# Update SPREAD attribute to drive rotation of COMPOUND joints
	set_driven_key		hand_lt_CTRL.spread		---		-----	[compound_pinky_01_lt]						[rotateZ]
						hand_lt_CTRL.spread		---		-----	[compound_ring_01_lt]						[rotateZ]
						hand_lt_CTRL.spread		---		-----	[compound_middle_01_lt]						[rotateZ]
						hand_lt_CTRL.spread		---		-----	[compound_index_01_lt]						[rotateZ]
						hand_lt_CTRL.spread		 10		  8.9	[compound_pinky_01_lt]						[rotateZ]
						hand_lt_CTRL.spread		 10		  5.0	[compound_ring_01_lt]						[rotateZ]
						hand_lt_CTRL.spread		 10		  0.0	[compound_middle_01_lt]						[rotateZ]
						hand_lt_CTRL.spread		 10		 -5.1	[compound_index_01_lt]						[rotateZ]
						hand_lt_CTRL.spread		-10		-17.3	[compound_pinky_01_lt]						[rotateZ]
						hand_lt_CTRL.spread		-10		-10.0	[compound_ring_01_lt]						[rotateZ]
						hand_lt_CTRL.spread		-10		  0.0	[compound_middle_01_lt]						[rotateZ]
						hand_lt_CTRL.spread		-10		  8.8	[compound_index_01_lt]						[rotateZ]	;

# Create group: HAND_BASE_LT_CTRL_GRP
	create_group		hand_lt_CTRL_GRP	;
	parent				hand_lt_CTRL_GRP						[pinky_lt_CTRL, ring_lt_CTRL, middle_lt_CTRL, index_lt_CTRL, thumb_lt_CTRL, hand_lt_CTRL]	;
	parent_constraint	hand_lt_CTRL_GRP						[const_hand_lt_base]	;


# RIGHT =====================================================================

# Update locators: INNER_PALM_RT_LOC, MIDDLE_PALM_RT_LOC, OUTER_PALM_RT_LOC
	parent				outer_palm_rt_LOC		[middle_palm_rt_LOC]
						inner_palm_rt_LOC		[outer_palm_rt_LOC]	;

# Create HAND joint constraint
	duplicate			const_hand_rt_base								result_hand_base_rt					parentOnly	;
	parent				middle_palm_rt_LOC								[const_hand_rt_base]	;
	parent_constraint	hand_base_rt_CTRL								[const_hand_rt_base]	;

# Add STRAIGHT joints for PALM-RAISE feature
	# Create STRAIGHT joint chain for COMPOUND joint controls
		duplicate			pinky_compoundStraight_rt_start				compound_pinky_01_rt				parentOnly		# Straight_START
							ring_compoundStraight_rt_start				compound_ring_01_rt					parentOnly
							middle_compoundStraight_rt_start			compound_middle_01_rt				parentOnly
							index_compoundStraight_rt_start				compound_index_01_rt				parentOnly
							thumb_compoundStraight_rt_start				compound_thumb_orbit_rt				parentOnly
							pinky_compoundStraight_rt_end				compound_pinky_04_rt				parentOnly		# Straight_END
							ring_compoundStraight_rt_end				compound_ring_04_rt					parentOnly
							middle_compoundStraight_rt_end				compound_middle_04_rt				parentOnly
							index_compoundStraight_rt_end				compound_index_04_rt				parentOnly
							thumb_compoundStraight_rt_end				compound_thumb_03_rt				parentOnly	;
		parent				pinky_compoundStraight_rt_start				[pinky_compoundStraight_rt_end]						# Parent Straight_END under Straight_START
							ring_compoundStraight_rt_start				[ring_compoundStraight_rt_end]
							middle_compoundStraight_rt_start			[middle_compoundStraight_rt_end]
							index_compoundStraight_rt_start				[index_compoundStraight_rt_end]
							thumb_compoundStraight_rt_start				[thumb_compoundStraight_rt_end]
							pinky_compoundStraight_rt_start				[compound_pinky_01_rt]								# Parent Compound_Finger01 under Straight_START
							ring_compoundStraight_rt_start				[compound_ring_01_rt]
							middle_compoundStraight_rt_start			[compound_middle_01_rt]
							index_compoundStraight_rt_start				[compound_index_01_rt]
							thumb_compoundStraight_rt_start				[compound_thumb_orbit_rt]	;
	# Create STRAIGHT joint for RESULT joint chain
		duplicate			pinky_resultStraight_rt						pinky_compoundStraight_rt_start		parentOnly		# Straight
							ring_resultStraight_rt						ring_compoundStraight_rt_start		parentOnly
							middle_resultStraight_rt					middle_compoundStraight_rt_start	parentOnly
							index_resultStraight_rt						index_compoundStraight_rt_start		parentOnly
							thumb_resultStraight_rt						thumb_compoundStraight_rt_start		parentOnly	;
		parent				result_pinky_base_rt						[pinky_resultStraight_rt]							# Parent Straight under Result_Finger_Base
							result_ring_base_rt							[ring_resultStraight_rt]
							result_middle_base_rt						[middle_resultStraight_rt]
							result_index_base_rt						[index_resultStraight_rt]
							result_thumb_base_rt						[thumb_resultStraight_rt]
							pinky_resultStraight_rt						[orient_pinky_01_rt]								# Parent Orient_Finger01 under Straight
							ring_resultStraight_rt						[orient_ring_01_rt]
							middle_resultStraight_rt					[orient_middle_01_rt]
							index_resultStraight_rt						[orient_index_01_rt]
							thumb_resultStraight_rt						[orient_thumb_orbit_rt]	;
	# Connect STRAIGHT joint of COMPOUND to STRAIGHT of RESULT
		connect_attribute	pinky_compoundStraight_rt_start.rotate		pinky_resultStraight_rt.rotate
							ring_compoundStraight_rt_start.rotate		ring_resultStraight_rt.rotate
							middle_compoundStraight_rt_start.rotate		middle_resultStraight_rt.rotate
							index_compoundStraight_rt_start.rotate		index_resultStraight_rt.rotate
							thumb_compoundStraight_rt_start.rotate		thumb_resultStraight_rt.rotate	;
	# Create IK handle: SPINE_HDL
		ik_handle			pinky_straight_rt_HDL						pinky_compoundStraight_rt_start		pinky_compoundStraight_rt_end	solver="ikSCsolver"
							ring_straight_rt_HDL						ring_compoundStraight_rt_start		ring_compoundStraight_rt_end	solver="ikSCsolver"
							middle_straight_rt_HDL						middle_compoundStraight_rt_start	middle_compoundStraight_rt_end	solver="ikSCsolver"
							index_straight_rt_HDL						index_compoundStraight_rt_start		index_compoundStraight_rt_end	solver="ikSCsolver"
							thumb_straight_rt_HDL						thumb_compoundStraight_rt_start		thumb_compoundStraight_rt_end	solver="ikSCsolver"	;
		rename				effector1									pinky_straight_rt_EFF
							effector2									ring_straight_rt_EFF
							effector3									middle_straight_rt_EFF
							effector4									index_straight_rt_EFF
							effector5									thumb_straight_rt_EFF	;
	# Create group: STRAIGHT_HDL_GRP
		create_group		straight_rt_HDL_GRP	;
		parent				straight_rt_HDL_GRP							[pinky_straight_rt_HDL, ring_straight_rt_HDL, middle_straight_rt_HDL, index_straight_rt_HDL, thumb_straight_rt_HDL]	;

# Add PALM-RAISE attribute to HAND_RT_CTRL
	# Add PALM-RAISE attribute
		add_attribute	hand_rt_CTRL			palmRaise		float minValue=-90 maxValue=90 defaultValue=0 keyable	;
	# Make PALM-RAISE attribute to drive rotation of PALM
		set_driven_key	hand_rt_CTRL.palmRaise	---		---		[middle_palm_rt_LOC]						[rotateY]
						hand_rt_CTRL.palmRaise	 90		-90		[middle_palm_rt_LOC]						[rotateY]
						hand_rt_CTRL.palmRaise	-90		 90		[middle_palm_rt_LOC]						[rotateY]	;

# Add SIDE-ROLL attribute to HAND_RT_CTRL
	# Add SIDE-ROLL attribute
		add_attribute	hand_rt_CTRL				sideRoll	float minValue=-90 maxValue=90 defaultValue=0 keyable	;
	# Make SIDE-ROLL attribute to drive rotation of PALM
		set_driven_key	hand_rt_CTRL.sideRoll	---		---		[inner_palm_rt_LOC, outer_palm_rt_LOC]		[rotateX]
						hand_rt_CTRL.sideRoll	 90		 90		[inner_palm_rt_LOC]							[rotateX]
						hand_rt_CTRL.sideRoll	-90		-90		[outer_palm_rt_LOC]							[rotateX]	;

# Update SPREAD attribute to drive rotation of COMPOUND joints
	set_driven_key		hand_rt_CTRL.spread		---		-----	[compound_pinky_01_rt]						[rotateZ]
						hand_rt_CTRL.spread		---		-----	[compound_ring_01_rt]						[rotateZ]
						hand_rt_CTRL.spread		---		-----	[compound_middle_01_rt]						[rotateZ]
						hand_rt_CTRL.spread		---		-----	[compound_index_01_rt]						[rotateZ]
						hand_rt_CTRL.spread		 10		  8.9	[compound_pinky_01_rt]						[rotateZ]
						hand_rt_CTRL.spread		 10		  5.0	[compound_ring_01_rt]						[rotateZ]
						hand_rt_CTRL.spread		 10		  0.0	[compound_middle_01_rt]						[rotateZ]
						hand_rt_CTRL.spread		 10		 -5.1	[compound_index_01_rt]						[rotateZ]
						hand_rt_CTRL.spread		-10		-17.3	[compound_pinky_01_rt]						[rotateZ]
						hand_rt_CTRL.spread		-10		-10.0	[compound_ring_01_rt]						[rotateZ]
						hand_rt_CTRL.spread		-10		  0.0	[compound_middle_01_rt]						[rotateZ]
						hand_rt_CTRL.spread		-10		  8.8	[compound_index_01_rt]						[rotateZ]	;

# Create group: HAND_BASE_RT_CTRL_GRP
	create_group		hand_rt_CTRL_GRP	;
	parent				hand_rt_CTRL_GRP						[pinky_rt_CTRL, ring_rt_CTRL, middle_rt_CTRL, index_rt_CTRL, thumb_rt_CTRL, hand_rt_CTRL]	;
	parent_constraint	hand_rt_CTRL_GRP						[const_hand_rt_base]	;


#############################################################################
#### [ HAND ] Post-COMPOUND Controls
#############################################################################

# Set anim curves to linear
	key_tangent			[translate, rotate]		[compound_pinky_base_lt, compound_pinky_01_lt, compound_pinky_02_lt, compound_pinky_03_lt]			inTangentType="linear" outTangentType="linear"
						[translate, rotate]		[compound_ring_base_lt, compound_ring_01_lt, compound_ring_02_lt, compound_ring_03_lt]				inTangentType="linear" outTangentType="linear"
						[translate, rotate]		[compound_middle_base_lt, compound_middle_01_lt, compound_middle_02_lt, compound_middle_03_lt]		inTangentType="linear" outTangentType="linear"
						[translate, rotate]		[compound_index_base_lt, compound_index_01_lt, compound_index_02_lt, compound_index_03_lt]			inTangentType="linear" outTangentType="linear"
						[translate, rotate]		[compound_thumb_base_lt, compound_thumb_orbit_lt, compound_thumb_01_lt, compound_thumb_02_lt]		inTangentType="linear" outTangentType="linear"
	;


# RIGHT =====================================================================

# Set anim curves to linear
	key_tangent			[translate, rotate]		[compound_pinky_base_rt, compound_pinky_01_rt, compound_pinky_02_rt, compound_pinky_03_rt]			inTangentType="linear" outTangentType="linear"
						[translate, rotate]		[compound_ring_base_rt, compound_ring_01_rt, compound_ring_02_rt, compound_ring_03_rt]				inTangentType="linear" outTangentType="linear"
						[translate, rotate]		[compound_middle_base_rt, compound_middle_01_rt, compound_middle_02_rt, compound_middle_03_rt]		inTangentType="linear" outTangentType="linear"
						[translate, rotate]		[compound_index_base_rt, compound_index_01_rt, compound_index_02_rt, compound_index_03_rt]			inTangentType="linear" outTangentType="linear"
						[translate, rotate]		[compound_thumb_base_rt, compound_thumb_orbit_rt, compound_thumb_01_rt, compound_thumb_02_rt]		inTangentType="linear" outTangentType="linear"
	;


#############################################################################
#### [ HAND ] Group and Space Constraint
#############################################################################

# Create group: HAND_LT_GRP
	create_group		hand_lt_GRP	;
	parent				hand_lt_GRP						[hand_base_lt_CTRL, hand_lt_CTRL_GRP]
						hand_sys_GRP					[hand_lt_GRP]	;

# Create group: DO_NOT_TOUCH_GRP
	create_group		DO_NOT_TOUCH_GRP	;
	parent				|DO_NOT_TOUCH_GRP				[result_hand_base_lt]
						hand_lt_GRP						[|DO_NOT_TOUCH_GRP]	;

# Create group: HAND_LT_CONST_GRP
	create_group		hand_lt_const_GRP	;
	parent				hand_lt_const_GRP				[straight_lt_HDL_GRP, inner_palm_lt_LOC]
						hand_lt_GRP|DO_NOT_TOUCH_GRP	[hand_lt_const_GRP]	;
	move				hand_lt_const_GRP				0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=hand_lt	;
	parent_constraint	hand_lt_const_GRP				[result_hand_lt]	;
	delete				ik_arm_lt_bind_end_parentConstraint1	;	#1todo: does this work?
	parent_constraint	ik_arm_lt_bind_end				[const_hand_lt_base]	;


# RIGHT =====================================================================

# Create group: HAND_RT_GRP
	create_group		hand_rt_GRP	;
	parent				hand_rt_GRP						[hand_base_rt_CTRL, hand_rt_CTRL_GRP]
						hand_sys_GRP					[hand_rt_GRP]	;

# Create group: DO_NOT_TOUCH_GRP
	create_group		DO_NOT_TOUCH_GRP	;
	parent				|DO_NOT_TOUCH_GRP				[result_hand_base_rt]
						hand_rt_GRP						[|DO_NOT_TOUCH_GRP]	;

# Create group: HAND_RT_CONST_GRP
	create_group		hand_rt_const_GRP	;
	parent				hand_rt_const_GRP				[straight_rt_HDL_GRP, inner_palm_rt_LOC]
						hand_rt_GRP|DO_NOT_TOUCH_GRP	[hand_rt_const_GRP]	;
	move				hand_rt_const_GRP				0.0		0.0		0.0			[rotatePivot, scalePivot]		relative_to=hand_rt	;
	parent_constraint	hand_rt_const_GRP				[result_hand_rt]	;
	delete				ik_arm_rt_bind_end_parentConstraint1	;	#1todo: does this work?
	parent_constraint	ik_arm_rt_bind_end				[const_hand_rt_base]	;


#############################################################################
#### [ HAND ] Visibility
#############################################################################

# Add HAND FK / CTRL visibility attributes to ARM_SETTINGS_LT_CTRL
	add_attribute		arm_settings_lt_CTRL						handFkVisibility			bool niceName="Hand FK Visibility" defaultValue=True keyable
						arm_settings_lt_CTRL						handCtrlVisibility			bool niceName="Hand CTRL Visibility" defaultValue=True keyable	;
	connect_attribute	arm_settings_lt_CTRL.handFkVisibility		hand_base_lt_CTRL.visibility
						arm_settings_lt_CTRL.handCtrlVisibility		hand_lt_CTRL_GRP.visibility	;


# RIGHT =====================================================================

# Add HAND FK / CTRL visibility attributes to ARM_SETTINGS_RT_CTRL
	add_attribute		arm_settings_rt_CTRL						handFkVisibility			bool niceName="Hand FK Visibility" defaultValue=True keyable
						arm_settings_rt_CTRL						handCtrlVisibility			bool niceName="Hand CTRL Visibility" defaultValue=True keyable	;
	connect_attribute	arm_settings_rt_CTRL.handFkVisibility		hand_base_rt_CTRL.visibility
						arm_settings_rt_CTRL.handCtrlVisibility		hand_rt_CTRL_GRP.visibility	;


#############################################################################
#### [ HAND ] Lock And Hide Control Channels
#############################################################################

# Lock-and-Hide channels
	set_attribute		hand_base_lt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						hand_lt_CTRL_GRP					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						pinky_lt_CTRL						lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]			# Main Controls
						ring_lt_CTRL						lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						middle_lt_CTRL						lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						index_lt_CTRL						lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						thumb_lt_CTRL						lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						hand_lt_CTRL						lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						fk_pinky_01_lt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]				# FK Controls
						fk_pinky_02_lt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_pinky_03_lt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_ring_01_lt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_ring_02_lt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_ring_03_lt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_middle_01_lt_CTRL				lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_middle_02_lt_CTRL				lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_middle_03_lt_CTRL				lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_index_01_lt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_index_02_lt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_index_03_lt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_thumb_orbit_lt_CTRL				lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_thumb_01_lt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_thumb_02_lt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						pinky_compoundStraight_lt_start		keyable=False channelBox=False			[rx, ry, rz]									# Straight Controls
						pinky_compoundStraight_lt_start		lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						pinky_compoundStraight_lt_end		keyable=False channelBox=False			[tx, ty, tz]
						pinky_compoundStraight_lt_end		lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v, radi]
						ring_compoundStraight_lt_start		keyable=False channelBox=False			[rx, ry, rz]
						ring_compoundStraight_lt_start		lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						ring_compoundStraight_lt_end		keyable=False channelBox=False			[tx, ty, tz]
						ring_compoundStraight_lt_end		lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v, radi]
						middle_compoundStraight_lt_start	keyable=False channelBox=False			[rx, ry, rz]
						middle_compoundStraight_lt_start	lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						middle_compoundStraight_lt_end		keyable=False channelBox=False			[tx, ty, tz]
						middle_compoundStraight_lt_end		lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v, radi]
						index_compoundStraight_lt_start		keyable=False channelBox=False			[rx, ry, rz]
						index_compoundStraight_lt_start		lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						index_compoundStraight_lt_end		keyable=False channelBox=False			[tx, ty, tz]
						index_compoundStraight_lt_end		lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v, radi]
						thumb_compoundStraight_lt_start		keyable=False channelBox=False			[rx, ry, rz]
						thumb_compoundStraight_lt_start		lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						thumb_compoundStraight_lt_end		keyable=False channelBox=False			[tx, ty, tz]
						thumb_compoundStraight_lt_end		lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v, radi]
						compound_pinky_base_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]	# Compound Constrols
						compound_pinky_01_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_pinky_02_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_pinky_03_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_pinky_04_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_ring_base_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_ring_01_lt					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_ring_02_lt					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_ring_03_lt					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_ring_04_lt					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_middle_base_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_middle_01_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_middle_02_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_middle_03_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_middle_04_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_index_base_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_index_01_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_index_02_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_index_03_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_index_04_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_thumb_base_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_thumb_orbit_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_thumb_01_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_thumb_02_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_thumb_03_lt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
	;

# Hide objects
	set_attribute		straight_lt_HDL_GRP.visibility		0
						inner_palm_lt_LOC.visibility		0
						middle_palm_lt_LOC.visibility		0
						outer_palm_lt_LOC.visibility		0
	;


# RIGHT =====================================================================

# Lock-and-Hide channels
	set_attribute		hand_base_rt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						hand_rt_CTRL_GRP					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						pinky_rt_CTRL						lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]			# Main Controls
						ring_rt_CTRL						lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						middle_rt_CTRL						lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						index_rt_CTRL						lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						thumb_rt_CTRL						lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						hand_rt_CTRL						lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v]
						fk_pinky_01_rt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]				# FK Controls
						fk_pinky_02_rt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_pinky_03_rt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_ring_01_rt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_ring_02_rt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_ring_03_rt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_middle_01_rt_CTRL				lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_middle_02_rt_CTRL				lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_middle_03_rt_CTRL				lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_index_01_rt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_index_02_rt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_index_03_rt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_thumb_orbit_rt_CTRL				lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_thumb_01_rt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						fk_thumb_02_rt_CTRL					lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						pinky_compoundStraight_rt_start		keyable=False channelBox=False			[rx, ry, rz]									# Straight Controls
						pinky_compoundStraight_rt_start		lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						pinky_compoundStraight_rt_end		keyable=False channelBox=False			[tx, ty, tz]
						pinky_compoundStraight_rt_end		lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v, radi]
						ring_compoundStraight_rt_start		keyable=False channelBox=False			[rx, ry, rz]
						ring_compoundStraight_rt_start		lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						ring_compoundStraight_rt_end		keyable=False channelBox=False			[tx, ty, tz]
						ring_compoundStraight_rt_end		lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v, radi]
						middle_compoundStraight_rt_start	keyable=False channelBox=False			[rx, ry, rz]
						middle_compoundStraight_rt_start	lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						middle_compoundStraight_rt_end		keyable=False channelBox=False			[tx, ty, tz]
						middle_compoundStraight_rt_end		lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v, radi]
						index_compoundStraight_rt_start		keyable=False channelBox=False			[rx, ry, rz]
						index_compoundStraight_rt_start		lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						index_compoundStraight_rt_end		keyable=False channelBox=False			[tx, ty, tz]
						index_compoundStraight_rt_end		lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v, radi]
						thumb_compoundStraight_rt_start		keyable=False channelBox=False			[rx, ry, rz]
						thumb_compoundStraight_rt_start		lock keyable=False channelBox=False		[tx, ty, tz, sx, sy, sz, v, radi]
						thumb_compoundStraight_rt_end		keyable=False channelBox=False			[tx, ty, tz]
						thumb_compoundStraight_rt_end		lock keyable=False channelBox=False		[rx, ry, rz, sx, sy, sz, v, radi]
						compound_pinky_base_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]	# Compound Constrols
						compound_pinky_01_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_pinky_02_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_pinky_03_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_pinky_04_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_ring_base_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_ring_01_rt					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_ring_02_rt					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_ring_03_rt					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_ring_04_rt					lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_middle_base_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_middle_01_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_middle_02_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_middle_03_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_middle_04_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_index_base_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_index_01_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_index_02_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_index_03_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_index_04_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_thumb_base_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_thumb_orbit_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_thumb_01_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_thumb_02_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
						compound_thumb_03_rt				lock keyable=False channelBox=False		[tx, ty, tz, rx, ry, rz, sx, sy, sz, v, radi]
	;

# Hide objects
	set_attribute		straight_rt_HDL_GRP.visibility		0
						inner_palm_rt_LOC.visibility		0
						middle_palm_rt_LOC.visibility		0
						outer_palm_rt_LOC.visibility		0
	;

